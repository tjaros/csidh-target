   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "main.c"
  18              		.section	.text.set_secret,"ax",%progbits
  19              		.align	1
  20              		.global	set_secret
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	set_secret:
  26              	.LVL0:
  27              	.LFB5:
   1:main.c        **** #include "hal.h"
   2:main.c        **** #include <stdint.h>
   3:main.c        **** #include <stdlib.h>
   4:main.c        **** #include <string.h>
   5:main.c        **** #include <stdio.h>
   6:main.c        **** 
   7:main.c        **** #include "fp.h"
   8:main.c        **** #include "csidh.h"
   9:main.c        **** #include "mont.h"
  10:main.c        **** #include "uint.h"
  11:main.c        **** #include "parametrization.h"
  12:main.c        **** 
  13:main.c        **** #include "simpleserial.h"
  14:main.c        **** #include "hal.h"
  15:main.c        **** 
  16:main.c        **** 
  17:main.c        **** 
  18:main.c        **** 
  19:main.c        **** public_key pk = {.A.c = {0}};
  20:main.c        **** private_key sk = {.e = {0}};
  21:main.c        **** public_key result;
  22:main.c        **** #ifdef F419
  23:main.c        **** uint8_t num_batches = 1;
  24:main.c        **** #else
  25:main.c        **** uint8_t num_batches = 3;
  26:main.c        **** #endif
  27:main.c        **** int8_t max_exponent[NUM_PRIMES] = {1};
  28:main.c        **** unsigned int num_isogenies = 1;
  29:main.c        **** uint8_t my = 0;
  30:main.c        **** 
  31:main.c        **** uint8_t set_public(uint8_t cmd, uint8_t scmd, uint8_t dlen, uint8_t* data)
  32:main.c        **** {
  33:main.c        ****     if (scmd == 0x01)
  34:main.c        ****         pk = base;
  35:main.c        ****     else
  36:main.c        ****         memcpy(pk.A.c, (void *) data, LIMBS * 8);
  37:main.c        ****     return 0;
  38:main.c        **** }
  39:main.c        ****  
  40:main.c        **** uint8_t get_public(uint8_t cmd, uint8_t scmd, uint8_t dlen, uint8_t* data)
  41:main.c        **** {
  42:main.c        ****     simpleserial_put('r', (uint8_t) sizeof(pk.A.c), (void *) pk.A.c);
  43:main.c        ****     return 0;
  44:main.c        **** }
  45:main.c        **** 
  46:main.c        **** uint8_t set_secret(uint8_t cmd, uint8_t scmd, uint8_t dlen, uint8_t* data)
  47:main.c        **** {
  28              		.loc 1 47 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  48:main.c        ****     memcpy(sk.e, (void *) data, NUM_PRIMES);
  32              		.loc 1 48 5 view .LVU1
  47:main.c        ****     memcpy(sk.e, (void *) data, NUM_PRIMES);
  33              		.loc 1 47 1 is_stmt 0 view .LVU2
  34 0000 08B5     		push	{r3, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
  39              		.loc 1 48 5 view .LVU3
  40 0002 4A22     		movs	r2, #74
  41              	.LVL1:
  42              		.loc 1 48 5 view .LVU4
  43 0004 1946     		mov	r1, r3
  44              	.LVL2:
  45              		.loc 1 48 5 view .LVU5
  46 0006 0248     		ldr	r0, .L2
  47              	.LVL3:
  48              		.loc 1 48 5 view .LVU6
  49 0008 FFF7FEFF 		bl	memcpy
  50              	.LVL4:
  49:main.c        ****     return 0;
  51              		.loc 1 49 5 is_stmt 1 view .LVU7
  50:main.c        **** }
  52              		.loc 1 50 1 is_stmt 0 view .LVU8
  53 000c 0020     		movs	r0, #0
  54 000e 08BD     		pop	{r3, pc}
  55              	.L3:
  56              		.align	2
  57              	.L2:
  58 0010 00000000 		.word	.LANCHOR0
  59              		.cfi_endproc
  60              	.LFE5:
  62              		.section	.text.get_public,"ax",%progbits
  63              		.align	1
  64              		.global	get_public
  65              		.syntax unified
  66              		.thumb
  67              		.thumb_func
  69              	get_public:
  70              	.LVL5:
  71              	.LFB4:
  41:main.c        ****     simpleserial_put('r', (uint8_t) sizeof(pk.A.c), (void *) pk.A.c);
  72              		.loc 1 41 1 is_stmt 1 view -0
  73              		.cfi_startproc
  74              		@ args = 0, pretend = 0, frame = 0
  75              		@ frame_needed = 0, uses_anonymous_args = 0
  42:main.c        ****     return 0;
  76              		.loc 1 42 5 view .LVU10
  41:main.c        ****     simpleserial_put('r', (uint8_t) sizeof(pk.A.c), (void *) pk.A.c);
  77              		.loc 1 41 1 is_stmt 0 view .LVU11
  78 0000 08B5     		push	{r3, lr}
  79              	.LCFI1:
  80              		.cfi_def_cfa_offset 8
  81              		.cfi_offset 3, -8
  82              		.cfi_offset 14, -4
  42:main.c        ****     return 0;
  83              		.loc 1 42 5 view .LVU12
  84 0002 034A     		ldr	r2, .L5
  85              	.LVL6:
  42:main.c        ****     return 0;
  86              		.loc 1 42 5 view .LVU13
  87 0004 4021     		movs	r1, #64
  88              	.LVL7:
  42:main.c        ****     return 0;
  89              		.loc 1 42 5 view .LVU14
  90 0006 7220     		movs	r0, #114
  91              	.LVL8:
  42:main.c        ****     return 0;
  92              		.loc 1 42 5 view .LVU15
  93 0008 FFF7FEFF 		bl	simpleserial_put
  94              	.LVL9:
  43:main.c        **** }
  95              		.loc 1 43 5 is_stmt 1 view .LVU16
  44:main.c        **** 
  96              		.loc 1 44 1 is_stmt 0 view .LVU17
  97 000c 0020     		movs	r0, #0
  98 000e 08BD     		pop	{r3, pc}
  99              	.L6:
 100              		.align	2
 101              	.L5:
 102 0010 50000000 		.word	.LANCHOR0+80
 103              		.cfi_endproc
 104              	.LFE4:
 106              		.section	.text.get_secret,"ax",%progbits
 107              		.align	1
 108              		.global	get_secret
 109              		.syntax unified
 110              		.thumb
 111              		.thumb_func
 113              	get_secret:
 114              	.LVL10:
 115              	.LFB6:
  51:main.c        **** 
  52:main.c        **** uint8_t get_secret(uint8_t cmd, uint8_t scmd, uint8_t dlen, uint8_t* data)
  53:main.c        **** {
 116              		.loc 1 53 1 is_stmt 1 view -0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
  54:main.c        ****     simpleserial_put('r', (uint8_t) sizeof(sk.e), (void *) sk.e);
 120              		.loc 1 54 5 view .LVU19
  53:main.c        ****     simpleserial_put('r', (uint8_t) sizeof(sk.e), (void *) sk.e);
 121              		.loc 1 53 1 is_stmt 0 view .LVU20
 122 0000 08B5     		push	{r3, lr}
 123              	.LCFI2:
 124              		.cfi_def_cfa_offset 8
 125              		.cfi_offset 3, -8
 126              		.cfi_offset 14, -4
 127              		.loc 1 54 5 view .LVU21
 128 0002 034A     		ldr	r2, .L8
 129              	.LVL11:
 130              		.loc 1 54 5 view .LVU22
 131 0004 4A21     		movs	r1, #74
 132              	.LVL12:
 133              		.loc 1 54 5 view .LVU23
 134 0006 7220     		movs	r0, #114
 135              	.LVL13:
 136              		.loc 1 54 5 view .LVU24
 137 0008 FFF7FEFF 		bl	simpleserial_put
 138              	.LVL14:
  55:main.c        ****     return 0;
 139              		.loc 1 55 5 is_stmt 1 view .LVU25
  56:main.c        **** }
 140              		.loc 1 56 1 is_stmt 0 view .LVU26
 141 000c 0020     		movs	r0, #0
 142 000e 08BD     		pop	{r3, pc}
 143              	.L9:
 144              		.align	2
 145              	.L8:
 146 0010 00000000 		.word	.LANCHOR0
 147              		.cfi_endproc
 148              	.LFE6:
 150              		.section	.text.run_csidh,"ax",%progbits
 151              		.align	1
 152              		.global	run_csidh
 153              		.syntax unified
 154              		.thumb
 155              		.thumb_func
 157              	run_csidh:
 158              	.LVL15:
 159              	.LFB7:
  57:main.c        **** 
  58:main.c        **** // Runs a group action on current public key and the secret
  59:main.c        **** uint8_t run_csidh(uint8_t cmd, uint8_t scmd, uint8_t dlen, uint8_t* data)
  60:main.c        **** {
 160              		.loc 1 60 1 is_stmt 1 view -0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
  61:main.c        ****     uint8_t error = csidh(&result, &pk, &sk, num_batches, max_exponent, num_isogenies, my);
 164              		.loc 1 61 5 view .LVU28
  60:main.c        ****     uint8_t error = csidh(&result, &pk, &sk, num_batches, max_exponent, num_isogenies, my);
 165              		.loc 1 60 1 is_stmt 0 view .LVU29
 166 0000 7FB5     		push	{r0, r1, r2, r3, r4, r5, r6, lr}
 167              	.LCFI3:
 168              		.cfi_def_cfa_offset 32
 169              		.cfi_offset 4, -16
 170              		.cfi_offset 5, -12
 171              		.cfi_offset 6, -8
 172              		.cfi_offset 14, -4
 173              		.loc 1 61 21 view .LVU30
 174 0002 134C     		ldr	r4, .L13
 175 0004 134B     		ldr	r3, .L13+4
 176              	.LVL16:
 177              		.loc 1 61 21 view .LVU31
 178 0006 94F8D020 		ldrb	r2, [r4, #208]	@ zero_extendqisi2
 179              	.LVL17:
 180              		.loc 1 61 21 view .LVU32
 181 000a 0292     		str	r2, [sp, #8]
 182 000c 5A68     		ldr	r2, [r3, #4]
 183 000e 0192     		str	r2, [sp, #4]
 184 0010 03F10802 		add	r2, r3, #8
 185 0014 0092     		str	r2, [sp]
 186 0016 04F15001 		add	r1, r4, #80
 187              	.LVL18:
 188              		.loc 1 61 21 view .LVU33
 189 001a 2246     		mov	r2, r4
 190 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 191 001e 04F19000 		add	r0, r4, #144
 192              	.LVL19:
 193              		.loc 1 61 21 view .LVU34
 194 0022 FFF7FEFF 		bl	csidh
 195              	.LVL20:
  62:main.c        ****     pk = result;
 196              		.loc 1 62 8 view .LVU35
 197 0026 04F15005 		add	r5, r4, #80
 198 002a 9034     		adds	r4, r4, #144
  61:main.c        ****     uint8_t error = csidh(&result, &pk, &sk, num_batches, max_exponent, num_isogenies, my);
 199              		.loc 1 61 21 view .LVU36
 200 002c 0646     		mov	r6, r0
 201              	.LVL21:
 202              		.loc 1 62 5 is_stmt 1 view .LVU37
 203              		.loc 1 62 8 is_stmt 0 view .LVU38
 204 002e 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 205 0030 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 206 0032 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 207 0034 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 208 0036 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 209 0038 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 210 003a 94E80F00 		ldm	r4, {r0, r1, r2, r3}
  63:main.c        **** 
  64:main.c        **** 
  65:main.c        ****     if (error != 0)
  66:main.c        ****         return 0x10+error;
  67:main.c        ****     return 0;
 211              		.loc 1 67 12 view .LVU39
 212 003e 002E     		cmp	r6, #0
  62:main.c        ****     pk = result;
 213              		.loc 1 62 8 view .LVU40
 214 0040 85E80F00 		stm	r5, {r0, r1, r2, r3}
  65:main.c        ****         return 0x10+error;
 215              		.loc 1 65 5 is_stmt 1 view .LVU41
  68:main.c        **** }
 216              		.loc 1 68 1 is_stmt 0 view .LVU42
 217 0044 14BF     		ite	ne
 218 0046 1120     		movne	r0, #17
 219 0048 0020     		moveq	r0, #0
 220 004a 04B0     		add	sp, sp, #16
 221              	.LCFI4:
 222              		.cfi_def_cfa_offset 16
 223              		@ sp needed
 224 004c 70BD     		pop	{r4, r5, r6, pc}
 225              	.LVL22:
 226              	.L14:
 227              		.loc 1 68 1 view .LVU43
 228 004e 00BF     		.align	2
 229              	.L13:
 230 0050 00000000 		.word	.LANCHOR0
 231 0054 00000000 		.word	.LANCHOR1
 232              		.cfi_endproc
 233              	.LFE7:
 235              		.section	.text.set_public,"ax",%progbits
 236              		.align	1
 237              		.global	set_public
 238              		.syntax unified
 239              		.thumb
 240              		.thumb_func
 242              	set_public:
 243              	.LVL23:
 244              	.LFB3:
  32:main.c        ****     if (scmd == 0x01)
 245              		.loc 1 32 1 is_stmt 1 view -0
 246              		.cfi_startproc
 247              		@ args = 0, pretend = 0, frame = 0
 248              		@ frame_needed = 0, uses_anonymous_args = 0
  33:main.c        ****         pk = base;
 249              		.loc 1 33 5 view .LVU45
  33:main.c        ****         pk = base;
 250              		.loc 1 33 8 is_stmt 0 view .LVU46
 251 0000 0129     		cmp	r1, #1
  32:main.c        ****     if (scmd == 0x01)
 252              		.loc 1 32 1 view .LVU47
 253 0002 30B5     		push	{r4, r5, lr}
 254              	.LCFI5:
 255              		.cfi_def_cfa_offset 12
 256              		.cfi_offset 4, -12
 257              		.cfi_offset 5, -8
 258              		.cfi_offset 14, -4
  34:main.c        ****     else
 259              		.loc 1 34 12 view .LVU48
 260 0004 0C4C     		ldr	r4, .L20
  33:main.c        ****         pk = base;
 261              		.loc 1 33 8 view .LVU49
 262 0006 0CD1     		bne	.L16
  34:main.c        ****     else
 263              		.loc 1 34 9 is_stmt 1 view .LVU50
  34:main.c        ****     else
 264              		.loc 1 34 12 is_stmt 0 view .LVU51
 265 0008 0C4D     		ldr	r5, .L20+4
 266 000a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 267              	.LVL24:
  34:main.c        ****     else
 268              		.loc 1 34 12 view .LVU52
 269 000c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 270 000e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 271 0010 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 272 0012 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 273 0014 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 274 0016 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 275 001a 84E80F00 		stm	r4, {r0, r1, r2, r3}
 276              	.L17:
  37:main.c        **** }
 277              		.loc 1 37 5 is_stmt 1 view .LVU53
  38:main.c        ****  
 278              		.loc 1 38 1 is_stmt 0 view .LVU54
 279 001e 0020     		movs	r0, #0
 280 0020 30BD     		pop	{r4, r5, pc}
 281              	.LVL25:
 282              	.L16:
 283              	.LBB4:
 284              	.LBI4:
  31:main.c        **** {
 285              		.loc 1 31 9 is_stmt 1 view .LVU55
 286              	.LBB5:
  36:main.c        ****     return 0;
 287              		.loc 1 36 9 view .LVU56
 288 0022 03F14005 		add	r5, r3, #64
 289              	.LVL26:
 290              	.L18:
  36:main.c        ****     return 0;
 291              		.loc 1 36 9 is_stmt 0 view .LVU57
 292 0026 1868     		ldr	r0, [r3]	@ unaligned
 293 0028 5968     		ldr	r1, [r3, #4]	@ unaligned
 294 002a 2246     		mov	r2, r4
 295 002c 03C2     		stmia	r2!, {r0, r1}
 296 002e 0833     		adds	r3, r3, #8
 297 0030 AB42     		cmp	r3, r5
 298 0032 1446     		mov	r4, r2
 299 0034 F7D1     		bne	.L18
 300 0036 F2E7     		b	.L17
 301              	.L21:
 302              		.align	2
 303              	.L20:
 304 0038 50000000 		.word	.LANCHOR0+80
 305 003c 00000000 		.word	base
 306              	.LBE5:
 307              	.LBE4:
 308              		.cfi_endproc
 309              	.LFE3:
 311              		.section	.text.api,"ax",%progbits
 312              		.align	1
 313              		.global	api
 314              		.syntax unified
 315              		.thumb
 316              		.thumb_func
 318              	api:
 319              	.LFB8:
  69:main.c        **** 
  70:main.c        **** #ifdef DBG
  71:main.c        **** void test_ecc(void)
  72:main.c        **** {
  73:main.c        ****     // Here we just do some simple ec multiplication to check if we got correct results
  74:main.c        ****     proj P = {.x={{119}}, .z={{1}}};
  75:main.c        ****     proj A = {.x={{0}}, .z={{1}}};
  76:main.c        ****     proj Q = {{{0}}};
  77:main.c        ****     uint_c k = {{1}};
  78:main.c        **** 
  79:main.c        ****     char str[1024];
  80:main.c        ****     sprintf(str, 
  81:main.c        ****     "[DBG] xMUL P=(%lu, %lu) A=%lu Q=(%lu, %lu) k=%lu\n",
  82:main.c        ****     (long unsigned int)P.x.c[0],
  83:main.c        ****     (long unsigned int)P.z.c[0],
  84:main.c        ****     (long unsigned int)A.x.c[0],
  85:main.c        ****     (long unsigned int)Q.x.c[0],
  86:main.c        ****     (long unsigned int)Q.z.c[0],
  87:main.c        ****     (long unsigned int)k.c[0]
  88:main.c        ****     );
  89:main.c        **** 
  90:main.c        ****     uart_puts(str);
  91:main.c        ****     xMUL(&Q, &A, &P, &k);
  92:main.c        **** 
  93:main.c        ****     sprintf(str, 
  94:main.c        ****     "[DBG] xMUL P=(%lu, %lu) A=%lu Q=(%lu, %lu) k=%lu\n",
  95:main.c        ****     (long unsigned int)P.x.c[0],
  96:main.c        ****     (long unsigned int)P.z.c[0],
  97:main.c        ****     (long unsigned int)A.x.c[0],
  98:main.c        ****     (long unsigned int)Q.x.c[0],
  99:main.c        ****     (long unsigned int)Q.z.c[0],
 100:main.c        ****     (long unsigned int)k.c[0]
 101:main.c        ****     );
 102:main.c        ****     uart_puts(str);
 103:main.c        **** 
 104:main.c        **** }
 105:main.c        **** 
 106:main.c        **** uint8_t tests(uint8_t cmd, uint8_t scmd, uint8_t dlen, uint8_t* data)
 107:main.c        **** {
 108:main.c        ****     test_ecc();
 109:main.c        ****     return 0;
 110:main.c        **** }
 111:main.c        **** 
 112:main.c        **** #endif
 113:main.c        **** 
 114:main.c        **** void api(void)
 115:main.c        **** {
 320              		.loc 1 115 1 is_stmt 1 view -0
 321              		.cfi_startproc
 322              		@ Volatile: function does not return.
 323              		@ args = 0, pretend = 0, frame = 0
 324              		@ frame_needed = 0, uses_anonymous_args = 0
 116:main.c        ****     // Set/Get public
 117:main.c        ****     simpleserial_addcmd('1', LIMBS * 8, set_public);
 325              		.loc 1 117 5 view .LVU59
 115:main.c        ****     // Set/Get public
 326              		.loc 1 115 1 is_stmt 0 view .LVU60
 327 0000 08B5     		push	{r3, lr}
 328              	.LCFI6:
 329              		.cfi_def_cfa_offset 8
 330              		.cfi_offset 3, -8
 331              		.cfi_offset 14, -4
 332              		.loc 1 117 5 view .LVU61
 333 0002 0E4A     		ldr	r2, .L24
 334 0004 4021     		movs	r1, #64
 335 0006 3120     		movs	r0, #49
 336 0008 FFF7FEFF 		bl	simpleserial_addcmd
 337              	.LVL27:
 118:main.c        ****     simpleserial_addcmd('2', 0, get_public);
 338              		.loc 1 118 5 is_stmt 1 view .LVU62
 339 000c 0C4A     		ldr	r2, .L24+4
 340 000e 0021     		movs	r1, #0
 341 0010 3220     		movs	r0, #50
 342 0012 FFF7FEFF 		bl	simpleserial_addcmd
 343              	.LVL28:
 119:main.c        ****     // Set/Get private
 120:main.c        ****     simpleserial_addcmd('3', NUM_PRIMES, set_secret);
 344              		.loc 1 120 5 view .LVU63
 345 0016 0B4A     		ldr	r2, .L24+8
 346 0018 4A21     		movs	r1, #74
 347 001a 3320     		movs	r0, #51
 348 001c FFF7FEFF 		bl	simpleserial_addcmd
 349              	.LVL29:
 121:main.c        ****     simpleserial_addcmd('4', 0, get_secret);
 350              		.loc 1 121 5 view .LVU64
 351 0020 094A     		ldr	r2, .L24+12
 352 0022 0021     		movs	r1, #0
 353 0024 3420     		movs	r0, #52
 354 0026 FFF7FEFF 		bl	simpleserial_addcmd
 355              	.LVL30:
 122:main.c        ****     // csidh does not need arguments
 123:main.c        ****     simpleserial_addcmd('5', 0, run_csidh);
 356              		.loc 1 123 5 view .LVU65
 357 002a 084A     		ldr	r2, .L24+16
 358 002c 0021     		movs	r1, #0
 359 002e 3520     		movs	r0, #53
 360 0030 FFF7FEFF 		bl	simpleserial_addcmd
 361              	.LVL31:
 362              	.L23:
 124:main.c        ****     #ifdef DBG
 125:main.c        ****     simpleserial_addcmd('6', 0, tests);
 126:main.c        ****     #endif
 127:main.c        **** 
 128:main.c        ****     while (1)
 363              		.loc 1 128 5 discriminator 1 view .LVU66
 129:main.c        ****     {
 130:main.c        ****         simpleserial_get();
 364              		.loc 1 130 9 discriminator 1 view .LVU67
 365 0034 FFF7FEFF 		bl	simpleserial_get
 366              	.LVL32:
 128:main.c        ****     {
 367              		.loc 1 128 11 discriminator 1 view .LVU68
 368 0038 FCE7     		b	.L23
 369              	.L25:
 370 003a 00BF     		.align	2
 371              	.L24:
 372 003c 00000000 		.word	set_public
 373 0040 00000000 		.word	get_public
 374 0044 00000000 		.word	set_secret
 375 0048 00000000 		.word	get_secret
 376 004c 00000000 		.word	run_csidh
 377              		.cfi_endproc
 378              	.LFE8:
 380              		.section	.text.startup.main,"ax",%progbits
 381              		.align	1
 382              		.global	main
 383              		.syntax unified
 384              		.thumb
 385              		.thumb_func
 387              	main:
 388              	.LFB9:
 131:main.c        ****     }
 132:main.c        **** }
 133:main.c        **** 
 134:main.c        **** int main(void)
 135:main.c        **** {
 389              		.loc 1 135 1 view -0
 390              		.cfi_startproc
 391              		@ Volatile: function does not return.
 392              		@ args = 0, pretend = 0, frame = 0
 393              		@ frame_needed = 0, uses_anonymous_args = 0
 136:main.c        ****     platform_init();
 394              		.loc 1 136 5 view .LVU70
 135:main.c        ****     platform_init();
 395              		.loc 1 135 1 is_stmt 0 view .LVU71
 396 0000 08B5     		push	{r3, lr}
 397              	.LCFI7:
 398              		.cfi_def_cfa_offset 8
 399              		.cfi_offset 3, -8
 400              		.cfi_offset 14, -4
 401              		.loc 1 136 5 view .LVU72
 402 0002 FFF7FEFF 		bl	platform_init
 403              	.LVL33:
 137:main.c        ****     init_uart();
 404              		.loc 1 137 5 is_stmt 1 view .LVU73
 405 0006 FFF7FEFF 		bl	init_uart
 406              	.LVL34:
 138:main.c        **** 
 139:main.c        ****     putch('r');
 407              		.loc 1 139 5 view .LVU74
 408 000a 7220     		movs	r0, #114
 409 000c FFF7FEFF 		bl	putch
 410              	.LVL35:
 140:main.c        ****     putch('e');
 411              		.loc 1 140 5 view .LVU75
 412 0010 6520     		movs	r0, #101
 413 0012 FFF7FEFF 		bl	putch
 414              	.LVL36:
 141:main.c        ****     putch('s');
 415              		.loc 1 141 5 view .LVU76
 416 0016 7320     		movs	r0, #115
 417 0018 FFF7FEFF 		bl	putch
 418              	.LVL37:
 142:main.c        ****     putch('e');
 419              		.loc 1 142 5 view .LVU77
 420 001c 6520     		movs	r0, #101
 421 001e FFF7FEFF 		bl	putch
 422              	.LVL38:
 143:main.c        ****     putch('t');
 423              		.loc 1 143 5 view .LVU78
 424 0022 7420     		movs	r0, #116
 425 0024 FFF7FEFF 		bl	putch
 426              	.LVL39:
 144:main.c        **** 
 145:main.c        **** 
 146:main.c        ****     simpleserial_init();
 427              		.loc 1 146 5 view .LVU79
 428 0028 FFF7FEFF 		bl	simpleserial_init
 429              	.LVL40:
 147:main.c        ****     api();
 430              		.loc 1 147 5 view .LVU80
 431 002c FFF7FEFF 		bl	api
 432              	.LVL41:
 433              		.cfi_endproc
 434              	.LFE9:
 436              		.global	my
 437              		.global	num_isogenies
 438              		.global	max_exponent
 439              		.global	num_batches
 440              		.global	result
 441              		.global	sk
 442              		.global	pk
 443              		.data
 444              		.align	2
 445              		.set	.LANCHOR1,. + 0
 448              	num_batches:
 449 0000 03       		.byte	3
 450 0001 000000   		.space	3
 453              	num_isogenies:
 454 0004 01000000 		.word	1
 457              	max_exponent:
 458 0008 0100     		.ascii	"\001\000"
 459 000a 00000000 		.space	72
 459      00000000 
 459      00000000 
 459      00000000 
 459      00000000 
 460              		.bss
 461              		.align	3
 462              		.set	.LANCHOR0,. + 0
 465              	sk:
 466 0000 00000000 		.space	74
 466      00000000 
 466      00000000 
 466      00000000 
 466      00000000 
 467 004a 00000000 		.space	6
 467      0000
 470              	pk:
 471 0050 00000000 		.space	64
 471      00000000 
 471      00000000 
 471      00000000 
 471      00000000 
 474              	result:
 475 0090 00000000 		.space	64
 475      00000000 
 475      00000000 
 475      00000000 
 475      00000000 
 478              	my:
 479 00d0 00       		.space	1
 480              		.text
 481              	.Letext0:
 482              		.file 2 "/nix/store/ys6f5rkagvk7j6mawa5fiakglv1568hl-gcc-arm-embedded-12.2.rel1/arm-none-eabi/incl
 483              		.file 3 "/nix/store/ys6f5rkagvk7j6mawa5fiakglv1568hl-gcc-arm-embedded-12.2.rel1/arm-none-eabi/incl
 484              		.file 4 "/nix/store/ys6f5rkagvk7j6mawa5fiakglv1568hl-gcc-arm-embedded-12.2.rel1/lib/gcc/arm-none-e
 485              		.file 5 "parametrization.h"
 486              		.file 6 "csidh.h"
 487              		.file 7 "./simpleserial/simpleserial.h"
 488              		.file 8 "./hal/stm32f3/stm32f3_hal.h"
 489              		.file 9 "./hal/hal.h"
 490              		.file 10 "/nix/store/ys6f5rkagvk7j6mawa5fiakglv1568hl-gcc-arm-embedded-12.2.rel1/arm-none-eabi/inc
 491              		.file 11 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc9YmiNY.s:19     .text.set_secret:0000000000000000 $t
     /tmp/cc9YmiNY.s:25     .text.set_secret:0000000000000000 set_secret
     /tmp/cc9YmiNY.s:58     .text.set_secret:0000000000000010 $d
     /tmp/cc9YmiNY.s:63     .text.get_public:0000000000000000 $t
     /tmp/cc9YmiNY.s:69     .text.get_public:0000000000000000 get_public
     /tmp/cc9YmiNY.s:102    .text.get_public:0000000000000010 $d
     /tmp/cc9YmiNY.s:107    .text.get_secret:0000000000000000 $t
     /tmp/cc9YmiNY.s:113    .text.get_secret:0000000000000000 get_secret
     /tmp/cc9YmiNY.s:146    .text.get_secret:0000000000000010 $d
     /tmp/cc9YmiNY.s:151    .text.run_csidh:0000000000000000 $t
     /tmp/cc9YmiNY.s:157    .text.run_csidh:0000000000000000 run_csidh
     /tmp/cc9YmiNY.s:230    .text.run_csidh:0000000000000050 $d
     /tmp/cc9YmiNY.s:236    .text.set_public:0000000000000000 $t
     /tmp/cc9YmiNY.s:242    .text.set_public:0000000000000000 set_public
     /tmp/cc9YmiNY.s:304    .text.set_public:0000000000000038 $d
     /tmp/cc9YmiNY.s:312    .text.api:0000000000000000 $t
     /tmp/cc9YmiNY.s:318    .text.api:0000000000000000 api
     /tmp/cc9YmiNY.s:372    .text.api:000000000000003c $d
     /tmp/cc9YmiNY.s:381    .text.startup.main:0000000000000000 $t
     /tmp/cc9YmiNY.s:387    .text.startup.main:0000000000000000 main
     /tmp/cc9YmiNY.s:478    .bss:00000000000000d0 my
     /tmp/cc9YmiNY.s:453    .data:0000000000000004 num_isogenies
     /tmp/cc9YmiNY.s:457    .data:0000000000000008 max_exponent
     /tmp/cc9YmiNY.s:448    .data:0000000000000000 num_batches
     /tmp/cc9YmiNY.s:474    .bss:0000000000000090 result
     /tmp/cc9YmiNY.s:465    .bss:0000000000000000 sk
     /tmp/cc9YmiNY.s:470    .bss:0000000000000050 pk
     /tmp/cc9YmiNY.s:444    .data:0000000000000000 $d
     /tmp/cc9YmiNY.s:461    .bss:0000000000000000 $d

UNDEFINED SYMBOLS
memcpy
simpleserial_put
csidh
base
simpleserial_addcmd
simpleserial_get
platform_init
init_uart
putch
simpleserial_init
