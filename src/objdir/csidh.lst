   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"csidh.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "csidh.c"
  18              		.section	.rodata.str1.1,"aMS",%progbits,1
  19              	.LC2:
  20 0000 6C6F7765 		.ascii	"lower < upper\000"
  20      72203C20 
  20      75707065 
  20      7200
  21              	.LC3:
  22 000e 63736964 		.ascii	"csidh.c\000"
  22      682E6300 
  23              		.section	.text.cofactor_multiples,"ax",%progbits
  24              		.align	1
  25              		.syntax unified
  26              		.thumb
  27              		.thumb_func
  29              	cofactor_multiples:
  30              	.LVL0:
  31              	.LFB8:
   1:csidh.c       **** 
   2:csidh.c       **** #include <string.h>
   3:csidh.c       **** #include <assert.h>
   4:csidh.c       **** #include <stdio.h>
   5:csidh.c       **** 
   6:csidh.c       **** #include "hal.h"
   7:csidh.c       **** #include "uint.h"
   8:csidh.c       **** #include "fp.h"
   9:csidh.c       **** #include "mont.h"
  10:csidh.c       **** #include "csidh.h"
  11:csidh.c       **** #include "randombytes.h"
  12:csidh.c       **** #include "parametrization.h"
  13:csidh.c       **** 
  14:csidh.c       **** const public_key base = {0}; /* A = 0 */
  15:csidh.c       **** 
  16:csidh.c       **** //TODO remove
  17:csidh.c       **** //int8_t error = 0;
  18:csidh.c       **** 
  19:csidh.c       **** void uart_puts(char *s)
  20:csidh.c       **** {
  21:csidh.c       ****     while (*s)
  22:csidh.c       ****     {
  23:csidh.c       ****         putch(*(s++));
  24:csidh.c       ****     }
  25:csidh.c       **** }
  26:csidh.c       **** 
  27:csidh.c       **** extern unsigned long long overflowcnt;
  28:csidh.c       **** extern unsigned long long startcnt;
  29:csidh.c       **** 
  30:csidh.c       **** /* get priv[pos] in constant time  */
  31:csidh.c       **** int32_t lookup(size_t pos, int8_t const *priv)
  32:csidh.c       **** {
  33:csidh.c       ****     int b;
  34:csidh.c       ****     int8_t r = priv[0];
  35:csidh.c       ****     for (size_t i = 1; i < NUM_PRIMES; i++)
  36:csidh.c       ****     {
  37:csidh.c       ****         b = isequal(i, pos);
  38:csidh.c       ****         //ISEQUAL(i, pos, b);
  39:csidh.c       ****         //b = (uint8_t)(1-((-(i ^ pos)) >> 31));
  40:csidh.c       ****         cmov(&r, &priv[i], b);
  41:csidh.c       ****         //CMOV(&r, &priv[i], b);
  42:csidh.c       ****     }
  43:csidh.c       ****     return r;
  44:csidh.c       **** }
  45:csidh.c       **** 
  46:csidh.c       **** /* check if a and b are equal in constant time  */
  47:csidh.c       **** uint32_t isequal(uint32_t a, uint32_t b)
  48:csidh.c       **** {
  49:csidh.c       ****     //size_t i;
  50:csidh.c       ****     uint32_t r = 0;
  51:csidh.c       ****     unsigned char *ta = (unsigned char *)&a;
  52:csidh.c       ****     unsigned char *tb = (unsigned char *)&b;
  53:csidh.c       ****     r = (ta[0] ^ tb[0]) | (ta[1] ^ tb[1]) | (ta[2] ^ tb[2]) | (ta[3] ^ tb[3]);
  54:csidh.c       ****     r = (-r);
  55:csidh.c       ****     r = r >> 31;
  56:csidh.c       ****     return (int)(1 - r);
  57:csidh.c       **** }
  58:csidh.c       **** 
  59:csidh.c       **** /* decision bit b has to be either 0 or 1 */
  60:csidh.c       **** void cmov(int8_t *r, const int8_t *a, uint32_t b)
  61:csidh.c       **** {
  62:csidh.c       ****     uint32_t t;
  63:csidh.c       ****     b = -b; /* Now b is either 0 or 0xffffffff */
  64:csidh.c       ****     t = (*r ^ *a) & b;
  65:csidh.c       ****     *r ^= t;
  66:csidh.c       **** }
  67:csidh.c       **** 
  68:csidh.c       **** void csidh_private(private_key *priv, const int8_t *max_exponent)
  69:csidh.c       **** {
  70:csidh.c       ****     memset(&priv->e, 0, sizeof(priv->e));
  71:csidh.c       ****     for (size_t i = 0; i < NUM_PRIMES;)
  72:csidh.c       ****     {
  73:csidh.c       ****         int8_t buf[64];
  74:csidh.c       ****         randombytes((unsigned char *)buf, sizeof(buf));
  75:csidh.c       ****         for (size_t j = 0; j < sizeof(buf); ++j)
  76:csidh.c       ****         {
  77:csidh.c       ****             if (buf[j] <= max_exponent[i] && buf[j] >= -max_exponent[i])
  78:csidh.c       ****             {
  79:csidh.c       ****                 priv->e[i] = lookup(j, buf);
  80:csidh.c       ****                 if (++i >= NUM_PRIMES)
  81:csidh.c       ****                     break;
  82:csidh.c       ****             }
  83:csidh.c       ****         }
  84:csidh.c       ****     }
  85:csidh.c       **** }
  86:csidh.c       **** 
  87:csidh.c       **** /* compute [(p+1)/l] P for all l in our list of primes. */
  88:csidh.c       **** /* divide and conquer is much faster than doing it naively,
  89:csidh.c       ****  * but uses more memory. */
  90:csidh.c       **** static void cofactor_multiples(proj *P, const proj *A, size_t lower,
  91:csidh.c       ****                                size_t upper)
  92:csidh.c       **** {
  32              		.loc 1 92 1 view -0
  33              		.cfi_startproc
  34              		@ args = 0, pretend = 0, frame = 128
  35              		@ frame_needed = 0, uses_anonymous_args = 0
  93:csidh.c       ****     assert(lower < upper);
  36              		.loc 1 93 5 view .LVU1
  92:csidh.c       ****     assert(lower < upper);
  37              		.loc 1 92 1 is_stmt 0 view .LVU2
  38 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 32
  41              		.cfi_offset 4, -32
  42              		.cfi_offset 5, -28
  43              		.cfi_offset 6, -24
  44              		.cfi_offset 7, -20
  45              		.cfi_offset 8, -16
  46              		.cfi_offset 9, -12
  47              		.cfi_offset 10, -8
  48              		.cfi_offset 14, -4
  49              		.loc 1 93 5 view .LVU3
  50 0004 9A42     		cmp	r2, r3
  92:csidh.c       ****     assert(lower < upper);
  51              		.loc 1 92 1 view .LVU4
  52 0006 A0B0     		sub	sp, sp, #128
  53              	.LCFI1:
  54              		.cfi_def_cfa_offset 160
  92:csidh.c       ****     assert(lower < upper);
  55              		.loc 1 92 1 view .LVU5
  56 0008 8046     		mov	r8, r0
  57 000a 8946     		mov	r9, r1
  58 000c 1746     		mov	r7, r2
  59 000e 9A46     		mov	r10, r3
  60              		.loc 1 93 5 view .LVU6
  61 0010 05D3     		bcc	.L2
  62              		.loc 1 93 5 discriminator 1 view .LVU7
  63 0012 304B     		ldr	r3, .L11
  64              	.LVL1:
  65              		.loc 1 93 5 discriminator 1 view .LVU8
  66 0014 304A     		ldr	r2, .L11+4
  67              	.LVL2:
  68              		.loc 1 93 5 discriminator 1 view .LVU9
  69 0016 3148     		ldr	r0, .L11+8
  70              	.LVL3:
  71              		.loc 1 93 5 discriminator 1 view .LVU10
  72 0018 5D21     		movs	r1, #93
  73              	.LVL4:
  74              		.loc 1 93 5 discriminator 1 view .LVU11
  75 001a FFF7FEFF 		bl	__assert_func
  76              	.LVL5:
  77              	.L2:
  94:csidh.c       **** 
  95:csidh.c       ****     if (upper - lower == 1)
  78              		.loc 1 95 5 is_stmt 1 view .LVU12
  79              		.loc 1 95 15 is_stmt 0 view .LVU13
  80 001e 9E1A     		subs	r6, r3, r2
  81              		.loc 1 95 8 view .LVU14
  82 0020 012E     		cmp	r6, #1
  83 0022 41D0     		beq	.L1
  96:csidh.c       ****         return;
  97:csidh.c       **** 
  98:csidh.c       ****     size_t mid = lower + (upper - lower + 1) / 2;
  84              		.loc 1 98 5 is_stmt 1 view .LVU15
  99:csidh.c       **** 
 100:csidh.c       ****     uint_c cl = uint_1, cu = uint_1;
  85              		.loc 1 100 12 is_stmt 0 view .LVU16
  86 0024 2E4C     		ldr	r4, .L11+12
  98:csidh.c       **** 
  87              		.loc 1 98 41 view .LVU17
  88 0026 0136     		adds	r6, r6, #1
  98:csidh.c       **** 
  89              		.loc 1 98 12 view .LVU18
  90 0028 02EB5606 		add	r6, r2, r6, lsr #1
  91              	.LVL6:
  92              		.loc 1 100 5 is_stmt 1 view .LVU19
  93              		.loc 1 100 12 is_stmt 0 view .LVU20
  94 002c 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
  95              	.LVL7:
  96              		.loc 1 100 12 view .LVU21
  97 002e 6D46     		mov	r5, sp
  98 0030 0FC5     		stmia	r5!, {r0, r1, r2, r3}
  99 0032 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 100 0034 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 101 0036 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 102 0038 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 103 003a 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 104              		.loc 1 100 25 view .LVU22
 105 003e A4F1300C 		sub	ip, r4, #48
 106              		.loc 1 100 12 view .LVU23
 107 0042 85E80F00 		stm	r5, {r0, r1, r2, r3}
 108              		.loc 1 100 25 view .LVU24
 109 0046 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 110 004a 10AD     		add	r5, sp, #64
 111 004c 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 112 004e BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 113 0052 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 114 0054 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 115 0058 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 116 005a 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 117 005e 85E80F00 		stm	r5, {r0, r1, r2, r3}
 101:csidh.c       ****     for (size_t i = lower; i < mid; ++i)
 118              		.loc 1 101 5 is_stmt 1 view .LVU25
 119              	.LBB2:
 120              		.loc 1 101 10 view .LVU26
 121              	.LVL8:
 102:csidh.c       ****         uint_mul3_64(&cu, &cu, primes[i]);
 122              		.loc 1 102 38 is_stmt 0 view .LVU27
 123 0062 204D     		ldr	r5, .L11+16
 101:csidh.c       ****     for (size_t i = lower; i < mid; ++i)
 124              		.loc 1 101 5 view .LVU28
 125 0064 3C46     		mov	r4, r7
 126              	.LVL9:
 127              	.L4:
 101:csidh.c       ****     for (size_t i = lower; i < mid; ++i)
 128              		.loc 1 101 30 is_stmt 1 discriminator 1 view .LVU29
 129 0066 B442     		cmp	r4, r6
 130 0068 21D3     		bcc	.L5
 101:csidh.c       ****     for (size_t i = lower; i < mid; ++i)
 131              		.loc 1 101 30 is_stmt 0 discriminator 1 view .LVU30
 132              	.LBE2:
 133              	.LBB3:
 103:csidh.c       ****     for (size_t i = mid; i < upper; ++i)
 104:csidh.c       ****         uint_mul3_64(&cl, &cl, primes[i]);
 134              		.loc 1 104 38 view .LVU31
 135 006a 1E4D     		ldr	r5, .L11+16
 136              	.LBE3:
 137              	.LBB4:
 138 006c 3446     		mov	r4, r6
 139              	.LVL10:
 140              	.L6:
 141              		.loc 1 104 38 view .LVU32
 142              	.LBE4:
 143              	.LBB5:
 103:csidh.c       ****     for (size_t i = mid; i < upper; ++i)
 144              		.loc 1 103 28 is_stmt 1 discriminator 1 view .LVU33
 145 006e 5445     		cmp	r4, r10
 146 0070 26D3     		bcc	.L7
 147              	.LBE5:
 105:csidh.c       **** 
 106:csidh.c       ****     xMUL(&P[mid], A, &P[lower], &cu);
 148              		.loc 1 106 5 view .LVU34
 149              		.loc 1 106 22 is_stmt 0 view .LVU35
 150 0072 08EBC714 		add	r4, r8, r7, lsl #7
 151              	.LVL11:
 152              		.loc 1 106 5 view .LVU36
 153 0076 10AB     		add	r3, sp, #64
 154 0078 2246     		mov	r2, r4
 155 007a 4946     		mov	r1, r9
 156 007c 08EBC610 		add	r0, r8, r6, lsl #7
 157 0080 FFF7FEFF 		bl	xMUL
 158              	.LVL12:
 107:csidh.c       ****     xMUL(&P[lower], A, &P[lower], &cl);
 159              		.loc 1 107 5 is_stmt 1 view .LVU37
 160 0084 6B46     		mov	r3, sp
 161 0086 2246     		mov	r2, r4
 162 0088 4946     		mov	r1, r9
 163 008a 2046     		mov	r0, r4
 164 008c FFF7FEFF 		bl	xMUL
 165              	.LVL13:
 108:csidh.c       **** 
 109:csidh.c       ****     cofactor_multiples(P, A, lower, mid);
 166              		.loc 1 109 5 view .LVU38
 167 0090 3346     		mov	r3, r6
 168 0092 3A46     		mov	r2, r7
 169 0094 4946     		mov	r1, r9
 170 0096 4046     		mov	r0, r8
 171 0098 FFF7B2FF 		bl	cofactor_multiples
 172              	.LVL14:
 110:csidh.c       ****     cofactor_multiples(P, A, mid, upper);
 173              		.loc 1 110 5 view .LVU39
 174 009c 5346     		mov	r3, r10
 175 009e 3246     		mov	r2, r6
 176 00a0 4946     		mov	r1, r9
 177 00a2 4046     		mov	r0, r8
 178 00a4 FFF7ACFF 		bl	cofactor_multiples
 179              	.LVL15:
 180              	.L1:
 111:csidh.c       **** }
 181              		.loc 1 111 1 is_stmt 0 view .LVU40
 182 00a8 20B0     		add	sp, sp, #128
 183              	.LCFI2:
 184              		.cfi_remember_state
 185              		.cfi_def_cfa_offset 32
 186              		@ sp needed
 187 00aa BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 188              	.LVL16:
 189              	.L5:
 190              	.LCFI3:
 191              		.cfi_restore_state
 192              	.LBB6:
 102:csidh.c       ****     for (size_t i = mid; i < upper; ++i)
 193              		.loc 1 102 9 is_stmt 1 discriminator 3 view .LVU41
 194 00ae 10A9     		add	r1, sp, #64
 195 00b0 55F82420 		ldr	r2, [r5, r4, lsl #2]
 196 00b4 0023     		movs	r3, #0
 197 00b6 0846     		mov	r0, r1
 198 00b8 FFF7FEFF 		bl	uint_mul3_64
 199              	.LVL17:
 101:csidh.c       ****         uint_mul3_64(&cu, &cu, primes[i]);
 200              		.loc 1 101 37 discriminator 3 view .LVU42
 201 00bc 0134     		adds	r4, r4, #1
 202              	.LVL18:
 101:csidh.c       ****         uint_mul3_64(&cu, &cu, primes[i]);
 203              		.loc 1 101 37 is_stmt 0 discriminator 3 view .LVU43
 204 00be D2E7     		b	.L4
 205              	.LVL19:
 206              	.L7:
 101:csidh.c       ****         uint_mul3_64(&cu, &cu, primes[i]);
 207              		.loc 1 101 37 discriminator 3 view .LVU44
 208              	.LBE6:
 209              	.LBB7:
 104:csidh.c       **** 
 210              		.loc 1 104 9 is_stmt 1 discriminator 3 view .LVU45
 211 00c0 55F82420 		ldr	r2, [r5, r4, lsl #2]
 212 00c4 0023     		movs	r3, #0
 213 00c6 6946     		mov	r1, sp
 214 00c8 6846     		mov	r0, sp
 215 00ca FFF7FEFF 		bl	uint_mul3_64
 216              	.LVL20:
 103:csidh.c       ****         uint_mul3_64(&cl, &cl, primes[i]);
 217              		.loc 1 103 37 discriminator 3 view .LVU46
 218 00ce 0134     		adds	r4, r4, #1
 219              	.LVL21:
 103:csidh.c       ****         uint_mul3_64(&cl, &cl, primes[i]);
 220              		.loc 1 103 37 is_stmt 0 discriminator 3 view .LVU47
 221 00d0 CDE7     		b	.L6
 222              	.L12:
 223 00d2 00BF     		.align	2
 224              	.L11:
 225 00d4 00000000 		.word	.LC2
 226 00d8 00000000 		.word	.LANCHOR0
 227 00dc 0E000000 		.word	.LC3
 228 00e0 00000000 		.word	uint_1
 229 00e4 00000000 		.word	primes
 230              	.LBE7:
 231              		.cfi_endproc
 232              	.LFE8:
 234              		.section	.text.uart_puts,"ax",%progbits
 235              		.align	1
 236              		.global	uart_puts
 237              		.syntax unified
 238              		.thumb
 239              		.thumb_func
 241              	uart_puts:
 242              	.LVL22:
 243              	.LFB3:
  20:csidh.c       ****     while (*s)
 244              		.loc 1 20 1 is_stmt 1 view -0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 0
 247              		@ frame_needed = 0, uses_anonymous_args = 0
  21:csidh.c       ****     {
 248              		.loc 1 21 5 view .LVU49
  20:csidh.c       ****     while (*s)
 249              		.loc 1 20 1 is_stmt 0 view .LVU50
 250 0000 10B5     		push	{r4, lr}
 251              	.LCFI4:
 252              		.cfi_def_cfa_offset 8
 253              		.cfi_offset 4, -8
 254              		.cfi_offset 14, -4
 255 0002 441E     		subs	r4, r0, #1
 256              	.LVL23:
 257              	.L14:
  21:csidh.c       ****     {
 258              		.loc 1 21 12 is_stmt 1 view .LVU51
 259 0004 14F8010F 		ldrb	r0, [r4, #1]!	@ zero_extendqisi2
 260              	.LVL24:
  21:csidh.c       ****     {
 261              		.loc 1 21 12 is_stmt 0 view .LVU52
 262 0008 00B9     		cbnz	r0, .L15
  25:csidh.c       **** 
 263              		.loc 1 25 1 view .LVU53
 264 000a 10BD     		pop	{r4, pc}
 265              	.LVL25:
 266              	.L15:
  23:csidh.c       ****     }
 267              		.loc 1 23 9 is_stmt 1 view .LVU54
  23:csidh.c       ****     }
 268              		.loc 1 23 9 is_stmt 0 view .LVU55
 269 000c FFF7FEFF 		bl	putch
 270              	.LVL26:
 271 0010 F8E7     		b	.L14
 272              		.cfi_endproc
 273              	.LFE3:
 275              		.section	.text.isequal,"ax",%progbits
 276              		.align	1
 277              		.global	isequal
 278              		.syntax unified
 279              		.thumb
 280              		.thumb_func
 282              	isequal:
 283              	.LVL27:
 284              	.LFB5:
  48:csidh.c       ****     //size_t i;
 285              		.loc 1 48 1 is_stmt 1 view -0
 286              		.cfi_startproc
 287              		@ args = 0, pretend = 0, frame = 0
 288              		@ frame_needed = 0, uses_anonymous_args = 0
 289              		@ link register save eliminated.
  50:csidh.c       ****     unsigned char *ta = (unsigned char *)&a;
 290              		.loc 1 50 5 view .LVU57
  51:csidh.c       ****     unsigned char *tb = (unsigned char *)&b;
 291              		.loc 1 51 5 view .LVU58
  52:csidh.c       ****     r = (ta[0] ^ tb[0]) | (ta[1] ^ tb[1]) | (ta[2] ^ tb[2]) | (ta[3] ^ tb[3]);
 292              		.loc 1 52 5 view .LVU59
  53:csidh.c       ****     r = (-r);
 293              		.loc 1 53 5 view .LVU60
  53:csidh.c       ****     r = (-r);
 294              		.loc 1 53 61 is_stmt 0 view .LVU61
 295 0000 80EA0103 		eor	r3, r0, r1
 296 0004 C3F30722 		ubfx	r2, r3, #8, #8
 297 0008 1343     		orrs	r3, r3, r2
  53:csidh.c       ****     r = (-r);
 298              		.loc 1 53 56 view .LVU62
 299 000a 81EA0002 		eor	r2, r1, r0
  53:csidh.c       ****     r = (-r);
 300              		.loc 1 53 61 view .LVU63
 301 000e C2F30742 		ubfx	r2, r2, #16, #8
 302 0012 1343     		orrs	r3, r3, r2
 303 0014 4840     		eors	r0, r0, r1
 304              	.LVL28:
  53:csidh.c       ****     r = (-r);
 305              		.loc 1 53 61 view .LVU64
 306 0016 43EA1060 		orr	r0, r3, r0, lsr #24
  53:csidh.c       ****     r = (-r);
 307              		.loc 1 53 7 view .LVU65
 308 001a C0B2     		uxtb	r0, r0
 309              	.LVL29:
  54:csidh.c       ****     r = r >> 31;
 310              		.loc 1 54 5 is_stmt 1 view .LVU66
  54:csidh.c       ****     r = r >> 31;
 311              		.loc 1 54 7 is_stmt 0 view .LVU67
 312 001c 4042     		rsbs	r0, r0, #0
 313              	.LVL30:
  55:csidh.c       ****     return (int)(1 - r);
 314              		.loc 1 55 5 is_stmt 1 view .LVU68
  56:csidh.c       **** }
 315              		.loc 1 56 5 view .LVU69
  55:csidh.c       ****     return (int)(1 - r);
 316              		.loc 1 55 7 is_stmt 0 view .LVU70
 317 001e C00F     		lsrs	r0, r0, #31
 318              	.LVL31:
  57:csidh.c       **** 
 319              		.loc 1 57 1 view .LVU71
 320 0020 C0F10100 		rsb	r0, r0, #1
 321              	.LVL32:
  57:csidh.c       **** 
 322              		.loc 1 57 1 view .LVU72
 323 0024 7047     		bx	lr
 324              		.cfi_endproc
 325              	.LFE5:
 327              		.section	.text.cmov,"ax",%progbits
 328              		.align	1
 329              		.global	cmov
 330              		.syntax unified
 331              		.thumb
 332              		.thumb_func
 334              	cmov:
 335              	.LVL33:
 336              	.LFB6:
  61:csidh.c       ****     uint32_t t;
 337              		.loc 1 61 1 is_stmt 1 view -0
 338              		.cfi_startproc
 339              		@ args = 0, pretend = 0, frame = 0
 340              		@ frame_needed = 0, uses_anonymous_args = 0
  62:csidh.c       ****     b = -b; /* Now b is either 0 or 0xffffffff */
 341              		.loc 1 62 5 view .LVU74
  63:csidh.c       ****     t = (*r ^ *a) & b;
 342              		.loc 1 63 5 view .LVU75
  64:csidh.c       ****     *r ^= t;
 343              		.loc 1 64 5 view .LVU76
  64:csidh.c       ****     *r ^= t;
 344              		.loc 1 64 13 is_stmt 0 view .LVU77
 345 0000 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
  61:csidh.c       ****     uint32_t t;
 346              		.loc 1 61 1 view .LVU78
 347 0002 10B5     		push	{r4, lr}
 348              	.LCFI5:
 349              		.cfi_def_cfa_offset 8
 350              		.cfi_offset 4, -8
 351              		.cfi_offset 14, -4
  64:csidh.c       ****     *r ^= t;
 352              		.loc 1 64 10 view .LVU79
 353 0004 90F90040 		ldrsb	r4, [r0]
 354              	.LVL34:
  65:csidh.c       **** }
 355              		.loc 1 65 5 is_stmt 1 view .LVU80
  64:csidh.c       ****     *r ^= t;
 356              		.loc 1 64 13 is_stmt 0 view .LVU81
 357 0008 6340     		eors	r3, r3, r4
 358 000a 5BB2     		sxtb	r3, r3
  63:csidh.c       ****     t = (*r ^ *a) & b;
 359              		.loc 1 63 7 view .LVU82
 360 000c 5242     		rsbs	r2, r2, #0
 361              	.LVL35:
  64:csidh.c       ****     *r ^= t;
 362              		.loc 1 64 7 view .LVU83
 363 000e 1340     		ands	r3, r3, r2
  65:csidh.c       **** }
 364              		.loc 1 65 8 view .LVU84
 365 0010 5C40     		eors	r4, r4, r3
 366              	.LVL36:
  65:csidh.c       **** }
 367              		.loc 1 65 8 view .LVU85
 368 0012 0470     		strb	r4, [r0]
 369              	.LVL37:
  66:csidh.c       **** 
 370              		.loc 1 66 1 view .LVU86
 371 0014 10BD     		pop	{r4, pc}
 372              		.cfi_endproc
 373              	.LFE6:
 375              		.section	.text.lookup,"ax",%progbits
 376              		.align	1
 377              		.global	lookup
 378              		.syntax unified
 379              		.thumb
 380              		.thumb_func
 382              	lookup:
 383              	.LVL38:
 384              	.LFB4:
  32:csidh.c       ****     int b;
 385              		.loc 1 32 1 is_stmt 1 view -0
 386              		.cfi_startproc
 387              		@ args = 0, pretend = 0, frame = 8
 388              		@ frame_needed = 0, uses_anonymous_args = 0
  33:csidh.c       ****     int8_t r = priv[0];
 389              		.loc 1 33 5 view .LVU88
  34:csidh.c       ****     for (size_t i = 1; i < NUM_PRIMES; i++)
 390              		.loc 1 34 5 view .LVU89
  32:csidh.c       ****     int b;
 391              		.loc 1 32 1 is_stmt 0 view .LVU90
 392 0000 73B5     		push	{r0, r1, r4, r5, r6, lr}
 393              	.LCFI6:
 394              		.cfi_def_cfa_offset 24
 395              		.cfi_offset 4, -16
 396              		.cfi_offset 5, -12
 397              		.cfi_offset 6, -8
 398              		.cfi_offset 14, -4
  34:csidh.c       ****     for (size_t i = 1; i < NUM_PRIMES; i++)
 399              		.loc 1 34 12 view .LVU91
 400 0002 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 401 0004 8DF80730 		strb	r3, [sp, #7]
  35:csidh.c       ****     {
 402              		.loc 1 35 5 is_stmt 1 view .LVU92
 403              	.LBB8:
  35:csidh.c       ****     {
 404              		.loc 1 35 10 view .LVU93
 405              	.LVL39:
  35:csidh.c       ****     {
 406              		.loc 1 35 26 view .LVU94
 407              	.LBE8:
  32:csidh.c       ****     int b;
 408              		.loc 1 32 1 is_stmt 0 view .LVU95
 409 0008 0646     		mov	r6, r0
 410 000a 0D46     		mov	r5, r1
 411              	.LBB9:
  35:csidh.c       ****     {
 412              		.loc 1 35 17 view .LVU96
 413 000c 0124     		movs	r4, #1
 414              	.LVL40:
 415              	.L19:
  37:csidh.c       ****         //ISEQUAL(i, pos, b);
 416              		.loc 1 37 9 is_stmt 1 discriminator 3 view .LVU97
  37:csidh.c       ****         //ISEQUAL(i, pos, b);
 417              		.loc 1 37 13 is_stmt 0 discriminator 3 view .LVU98
 418 000e 3146     		mov	r1, r6
 419 0010 2046     		mov	r0, r4
 420 0012 FFF7FEFF 		bl	isequal
 421              	.LVL41:
  40:csidh.c       ****         //CMOV(&r, &priv[i], b);
 422              		.loc 1 40 9 discriminator 3 view .LVU99
 423 0016 2919     		adds	r1, r5, r4
  37:csidh.c       ****         //ISEQUAL(i, pos, b);
 424              		.loc 1 37 13 discriminator 3 view .LVU100
 425 0018 0246     		mov	r2, r0
 426              	.LVL42:
  40:csidh.c       ****         //CMOV(&r, &priv[i], b);
 427              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU101
  35:csidh.c       ****     {
 428              		.loc 1 35 41 is_stmt 0 discriminator 3 view .LVU102
 429 001a 0134     		adds	r4, r4, #1
 430              	.LVL43:
  40:csidh.c       ****         //CMOV(&r, &priv[i], b);
 431              		.loc 1 40 9 discriminator 3 view .LVU103
 432 001c 0DF10700 		add	r0, sp, #7
 433              	.LVL44:
  40:csidh.c       ****         //CMOV(&r, &priv[i], b);
 434              		.loc 1 40 9 discriminator 3 view .LVU104
 435 0020 FFF7FEFF 		bl	cmov
 436              	.LVL45:
  35:csidh.c       ****     {
 437              		.loc 1 35 41 is_stmt 1 discriminator 3 view .LVU105
  35:csidh.c       ****     {
 438              		.loc 1 35 26 discriminator 3 view .LVU106
 439 0024 4A2C     		cmp	r4, #74
 440 0026 F2D1     		bne	.L19
 441              	.LBE9:
  43:csidh.c       **** }
 442              		.loc 1 43 5 view .LVU107
  44:csidh.c       **** 
 443              		.loc 1 44 1 is_stmt 0 view .LVU108
 444 0028 9DF90700 		ldrsb	r0, [sp, #7]
 445 002c 02B0     		add	sp, sp, #8
 446              	.LCFI7:
 447              		.cfi_def_cfa_offset 16
 448              		@ sp needed
 449 002e 70BD     		pop	{r4, r5, r6, pc}
  44:csidh.c       **** 
 450              		.loc 1 44 1 view .LVU109
 451              		.cfi_endproc
 452              	.LFE4:
 454              		.section	.text.csidh_private,"ax",%progbits
 455              		.align	1
 456              		.global	csidh_private
 457              		.syntax unified
 458              		.thumb
 459              		.thumb_func
 461              	csidh_private:
 462              	.LVL46:
 463              	.LFB7:
  69:csidh.c       ****     memset(&priv->e, 0, sizeof(priv->e));
 464              		.loc 1 69 1 is_stmt 1 view -0
 465              		.cfi_startproc
 466              		@ args = 0, pretend = 0, frame = 64
 467              		@ frame_needed = 0, uses_anonymous_args = 0
  70:csidh.c       ****     for (size_t i = 0; i < NUM_PRIMES;)
 468              		.loc 1 70 5 view .LVU111
  69:csidh.c       ****     memset(&priv->e, 0, sizeof(priv->e));
 469              		.loc 1 69 1 is_stmt 0 view .LVU112
 470 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 471              	.LCFI8:
 472              		.cfi_def_cfa_offset 20
 473              		.cfi_offset 4, -20
 474              		.cfi_offset 5, -16
 475              		.cfi_offset 6, -12
 476              		.cfi_offset 7, -8
 477              		.cfi_offset 14, -4
  70:csidh.c       ****     for (size_t i = 0; i < NUM_PRIMES;)
 478              		.loc 1 70 5 view .LVU113
 479 0002 4A22     		movs	r2, #74
  69:csidh.c       ****     memset(&priv->e, 0, sizeof(priv->e));
 480              		.loc 1 69 1 view .LVU114
 481 0004 91B0     		sub	sp, sp, #68
 482              	.LCFI9:
 483              		.cfi_def_cfa_offset 88
  69:csidh.c       ****     memset(&priv->e, 0, sizeof(priv->e));
 484              		.loc 1 69 1 view .LVU115
 485 0006 0F46     		mov	r7, r1
  70:csidh.c       ****     for (size_t i = 0; i < NUM_PRIMES;)
 486              		.loc 1 70 5 view .LVU116
 487 0008 0021     		movs	r1, #0
 488              	.LVL47:
  69:csidh.c       ****     memset(&priv->e, 0, sizeof(priv->e));
 489              		.loc 1 69 1 view .LVU117
 490 000a 0646     		mov	r6, r0
  70:csidh.c       ****     for (size_t i = 0; i < NUM_PRIMES;)
 491              		.loc 1 70 5 view .LVU118
 492 000c FFF7FEFF 		bl	memset
 493              	.LVL48:
  71:csidh.c       ****     {
 494              		.loc 1 71 5 is_stmt 1 view .LVU119
 495              	.LBB10:
  71:csidh.c       ****     {
 496              		.loc 1 71 10 view .LVU120
  71:csidh.c       ****     {
 497              		.loc 1 71 26 view .LVU121
  71:csidh.c       ****     {
 498              		.loc 1 71 17 is_stmt 0 view .LVU122
 499 0010 0024     		movs	r4, #0
 500              	.LVL49:
 501              	.L25:
 502              	.LBB11:
  73:csidh.c       ****         randombytes((unsigned char *)buf, sizeof(buf));
 503              		.loc 1 73 9 is_stmt 1 view .LVU123
  74:csidh.c       ****         for (size_t j = 0; j < sizeof(buf); ++j)
 504              		.loc 1 74 9 view .LVU124
 505 0012 4021     		movs	r1, #64
 506 0014 6846     		mov	r0, sp
 507 0016 FFF7FEFF 		bl	randombytes
 508              	.LVL50:
  75:csidh.c       ****         {
 509              		.loc 1 75 9 view .LVU125
 510              	.LBB12:
  75:csidh.c       ****         {
 511              		.loc 1 75 14 view .LVU126
  75:csidh.c       ****         {
 512              		.loc 1 75 30 view .LVU127
  75:csidh.c       ****         {
 513              		.loc 1 75 21 is_stmt 0 view .LVU128
 514 001a 0025     		movs	r5, #0
 515              	.LVL51:
 516              	.L24:
  77:csidh.c       ****             {
 517              		.loc 1 77 13 is_stmt 1 view .LVU129
  77:csidh.c       ****             {
 518              		.loc 1 77 20 is_stmt 0 view .LVU130
 519 001c 1DF90520 		ldrsb	r2, [sp, r5]
  77:csidh.c       ****             {
 520              		.loc 1 77 24 view .LVU131
 521 0020 3B57     		ldrsb	r3, [r7, r4]
  77:csidh.c       ****             {
 522              		.loc 1 77 16 view .LVU132
 523 0022 9A42     		cmp	r2, r3
 524 0024 0ADC     		bgt	.L22
  77:csidh.c       ****             {
 525              		.loc 1 77 56 discriminator 1 view .LVU133
 526 0026 5B42     		rsbs	r3, r3, #0
  77:csidh.c       ****             {
 527              		.loc 1 77 43 discriminator 1 view .LVU134
 528 0028 9A42     		cmp	r2, r3
 529 002a 07DB     		blt	.L22
  79:csidh.c       ****                 if (++i >= NUM_PRIMES)
 530              		.loc 1 79 17 is_stmt 1 view .LVU135
  79:csidh.c       ****                 if (++i >= NUM_PRIMES)
 531              		.loc 1 79 30 is_stmt 0 view .LVU136
 532 002c 6946     		mov	r1, sp
 533 002e 2846     		mov	r0, r5
 534 0030 FFF7FEFF 		bl	lookup
 535              	.LVL52:
  79:csidh.c       ****                 if (++i >= NUM_PRIMES)
 536              		.loc 1 79 28 view .LVU137
 537 0034 3055     		strb	r0, [r6, r4]
  80:csidh.c       ****                     break;
 538              		.loc 1 80 17 is_stmt 1 view .LVU138
  80:csidh.c       ****                     break;
 539              		.loc 1 80 20 is_stmt 0 view .LVU139
 540 0036 0134     		adds	r4, r4, #1
 541              	.LVL53:
  80:csidh.c       ****                     break;
 542              		.loc 1 80 20 view .LVU140
 543 0038 492C     		cmp	r4, #73
 544 003a 04D8     		bhi	.L21
 545              	.L22:
  75:csidh.c       ****         {
 546              		.loc 1 75 45 is_stmt 1 discriminator 2 view .LVU141
 547 003c 0135     		adds	r5, r5, #1
 548              	.LVL54:
  75:csidh.c       ****         {
 549              		.loc 1 75 30 discriminator 2 view .LVU142
 550 003e 402D     		cmp	r5, #64
 551 0040 ECD1     		bne	.L24
  75:csidh.c       ****         {
 552              		.loc 1 75 30 is_stmt 0 discriminator 2 view .LVU143
 553              	.LBE12:
 554              	.LBE11:
  71:csidh.c       ****     {
 555              		.loc 1 71 26 is_stmt 1 view .LVU144
 556 0042 492C     		cmp	r4, #73
 557 0044 E5D9     		bls	.L25
 558              	.L21:
  71:csidh.c       ****     {
 559              		.loc 1 71 26 is_stmt 0 view .LVU145
 560              	.LBE10:
  85:csidh.c       **** 
 561              		.loc 1 85 1 view .LVU146
 562 0046 11B0     		add	sp, sp, #68
 563              	.LCFI10:
 564              		.cfi_def_cfa_offset 20
 565              		@ sp needed
 566 0048 F0BD     		pop	{r4, r5, r6, r7, pc}
  85:csidh.c       **** 
 567              		.loc 1 85 1 view .LVU147
 568              		.cfi_endproc
 569              	.LFE7:
 571              		.section	.text.validate,"ax",%progbits
 572              		.align	1
 573              		.global	validate
 574              		.syntax unified
 575              		.thumb
 576              		.thumb_func
 578              	validate:
 579              	.LVL55:
 580              	.LFB9:
 112:csidh.c       **** 
 113:csidh.c       **** /* never accepts invalid keys. */
 114:csidh.c       **** bool validate(public_key const *in)
 115:csidh.c       **** {
 581              		.loc 1 115 1 is_stmt 1 view -0
 582              		.cfi_startproc
 583              		@ args = 0, pretend = 0, frame = 9728
 584              		@ frame_needed = 0, uses_anonymous_args = 0
 116:csidh.c       ****     const proj A = {in->A, fp_1};
 585              		.loc 1 116 5 view .LVU149
 115:csidh.c       ****     const proj A = {in->A, fp_1};
 586              		.loc 1 115 1 is_stmt 0 view .LVU150
 587 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 588              	.LCFI11:
 589              		.cfi_def_cfa_offset 28
 590              		.cfi_offset 4, -28
 591              		.cfi_offset 5, -24
 592              		.cfi_offset 6, -20
 593              		.cfi_offset 7, -16
 594              		.cfi_offset 8, -12
 595              		.cfi_offset 9, -8
 596              		.cfi_offset 14, -4
 597              		.loc 1 116 16 view .LVU151
 598 0004 0446     		mov	r4, r0
 599 0006 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 600              	.LVL56:
 115:csidh.c       ****     const proj A = {in->A, fp_1};
 601              		.loc 1 115 1 view .LVU152
 602 0008 ADF5185D 		sub	sp, sp, #9728
 603              	.LCFI12:
 604              		.cfi_def_cfa_offset 9756
 605 000c 81B0     		sub	sp, sp, #4
 606              	.LCFI13:
 607              		.cfi_def_cfa_offset 9760
 608              		.loc 1 116 16 view .LVU153
 609 000e 20AD     		add	r5, sp, #128
 610 0010 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 611 0012 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 612              	.LVL57:
 613              		.loc 1 116 16 view .LVU154
 614 0014 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 615 0016 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 616              	.LVL58:
 617              		.loc 1 116 16 view .LVU155
 618 0018 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 619 001a 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 620 001e 85E80F00 		stm	r5, {r0, r1, r2, r3}
 621 0022 384D     		ldr	r5, .L40
 622              	.LBB13:
 623              	.LBB14:
 117:csidh.c       **** 
 118:csidh.c       ****     do
 119:csidh.c       ****     {
 120:csidh.c       **** 
 121:csidh.c       ****         proj P[NUM_PRIMES];
 122:csidh.c       ****         fp_random(&P->x);
 123:csidh.c       ****         P->z = fp_1;
 124:csidh.c       **** 
 125:csidh.c       ****         /* maximal 2-power in p+1 */
 126:csidh.c       ****         xDBL(P, &A, P);
 127:csidh.c       ****         xDBL(P, &A, P);
 128:csidh.c       **** 
 129:csidh.c       ****         cofactor_multiples(P, &A, 0, NUM_PRIMES);
 130:csidh.c       **** 
 131:csidh.c       ****         uint_c order = uint_1;
 132:csidh.c       **** 
 133:csidh.c       ****         for (size_t i = NUM_PRIMES - 1; i < NUM_PRIMES; --i)
 134:csidh.c       ****         {
 135:csidh.c       **** 
 136:csidh.c       ****             /* we only gain information if [(p+1)/l] P is non-zero */
 137:csidh.c       ****             if (memcmp(&P[i].z, &fp_0, sizeof(fp)))
 624              		.loc 1 137 17 view .LVU156
 625 0024 384E     		ldr	r6, .L40+4
 626              	.LBB15:
 138:csidh.c       ****             {
 139:csidh.c       **** 
 140:csidh.c       ****                 uint_c tmp;
 141:csidh.c       ****                 uint_set(&tmp, primes[i]);
 627              		.loc 1 141 38 view .LVU157
 628 0026 394F     		ldr	r7, .L40+8
 629              	.LBE15:
 630              	.LBE14:
 631              	.LBE13:
 116:csidh.c       **** 
 632              		.loc 1 116 16 view .LVU158
 633 0028 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 634 002a 30AC     		add	r4, sp, #192
 635              	.LVL59:
 116:csidh.c       **** 
 636              		.loc 1 116 16 view .LVU159
 637 002c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 638 002e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 639 0030 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 640 0032 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 641 0034 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 642 0036 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 643 003a 84E80F00 		stm	r4, {r0, r1, r2, r3}
 644              	.L33:
 118:csidh.c       ****     {
 645              		.loc 1 118 5 is_stmt 1 view .LVU160
 646              	.LBB23:
 121:csidh.c       ****         fp_random(&P->x);
 647              		.loc 1 121 9 view .LVU161
 122:csidh.c       ****         P->z = fp_1;
 648              		.loc 1 122 9 view .LVU162
 123:csidh.c       **** 
 649              		.loc 1 123 14 is_stmt 0 view .LVU163
 650 003e 314D     		ldr	r5, .L40
 651              	.LBB19:
 652              	.LBB16:
 142:csidh.c       ****                 xMUL(&P[i], &A, &P[i], &tmp);
 143:csidh.c       **** 
 144:csidh.c       ****                 if (memcmp(&P[i].z, &fp_0, sizeof(fp)))
 145:csidh.c       ****                     /* P does not have order dividing p+1. */
 146:csidh.c       ****                     return false;
 147:csidh.c       **** 
 148:csidh.c       ****                 uint_mul3_64(&order, &order, primes[i]);
 149:csidh.c       **** 
 150:csidh.c       ****                 if (uint_sub3(&tmp, &four_sqrt_p, &order)) /* returns borrow */
 653              		.loc 1 150 21 view .LVU164
 654 0040 DFF8CC80 		ldr	r8, .L40+12
 655              	.LBE16:
 656              	.LBE19:
 122:csidh.c       ****         P->z = fp_1;
 657              		.loc 1 122 9 view .LVU165
 658 0044 40A8     		add	r0, sp, #256
 659 0046 FFF7FEFF 		bl	fp_random
 660              	.LVL60:
 123:csidh.c       **** 
 661              		.loc 1 123 9 is_stmt 1 view .LVU166
 123:csidh.c       **** 
 662              		.loc 1 123 14 is_stmt 0 view .LVU167
 663 004a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 664 004c 50AC     		add	r4, sp, #320
 665 004e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 666 0050 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 667 0052 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 668 0054 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 669 0056 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 670 0058 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 671 005c 84E80F00 		stm	r4, {r0, r1, r2, r3}
 126:csidh.c       ****         xDBL(P, &A, P);
 672              		.loc 1 126 9 is_stmt 1 view .LVU168
 673 0060 40AA     		add	r2, sp, #256
 674 0062 1046     		mov	r0, r2
 675 0064 20A9     		add	r1, sp, #128
 676 0066 FFF7FEFF 		bl	xDBL
 677              	.LVL61:
 127:csidh.c       **** 
 678              		.loc 1 127 9 view .LVU169
 679 006a 40AA     		add	r2, sp, #256
 680 006c 1046     		mov	r0, r2
 681 006e 20A9     		add	r1, sp, #128
 131:csidh.c       **** 
 682              		.loc 1 131 16 is_stmt 0 view .LVU170
 683 0070 284D     		ldr	r5, .L40+16
 127:csidh.c       **** 
 684              		.loc 1 127 9 view .LVU171
 685 0072 FFF7FEFF 		bl	xDBL
 686              	.LVL62:
 129:csidh.c       **** 
 687              		.loc 1 129 9 is_stmt 1 view .LVU172
 688 0076 4A23     		movs	r3, #74
 689 0078 0022     		movs	r2, #0
 690 007a 20A9     		add	r1, sp, #128
 691 007c 40A8     		add	r0, sp, #256
 692 007e FFF7FEFF 		bl	cofactor_multiples
 693              	.LVL63:
 131:csidh.c       **** 
 694              		.loc 1 131 9 view .LVU173
 131:csidh.c       **** 
 695              		.loc 1 131 16 is_stmt 0 view .LVU174
 696 0082 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 697 0084 6C46     		mov	r4, sp
 698 0086 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 699 0088 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 700 008a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 701 008c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 702 008e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 703 0090 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 704              	.LBB20:
 133:csidh.c       ****         {
 705              		.loc 1 133 21 view .LVU175
 706 0094 4925     		movs	r5, #73
 707              	.LBE20:
 131:csidh.c       **** 
 708              		.loc 1 131 16 view .LVU176
 709 0096 84E80F00 		stm	r4, {r0, r1, r2, r3}
 133:csidh.c       ****         {
 710              		.loc 1 133 9 is_stmt 1 view .LVU177
 711              	.LBB21:
 133:csidh.c       ****         {
 712              		.loc 1 133 14 view .LVU178
 713              	.LVL64:
 133:csidh.c       ****         {
 714              		.loc 1 133 43 view .LVU179
 715 009a 0DF51754 		add	r4, sp, #9664
 716              	.LVL65:
 717              	.L32:
 137:csidh.c       ****             {
 718              		.loc 1 137 13 view .LVU180
 137:csidh.c       ****             {
 719              		.loc 1 137 17 is_stmt 0 view .LVU181
 720 009e 4022     		movs	r2, #64
 721 00a0 3146     		mov	r1, r6
 722 00a2 2046     		mov	r0, r4
 723 00a4 FFF7FEFF 		bl	memcmp
 724              	.LVL66:
 137:csidh.c       ****             {
 725              		.loc 1 137 16 view .LVU182
 726 00a8 30B3     		cbz	r0, .L30
 727              	.LBB17:
 140:csidh.c       ****                 uint_set(&tmp, primes[i]);
 728              		.loc 1 140 17 is_stmt 1 view .LVU183
 141:csidh.c       ****                 xMUL(&P[i], &A, &P[i], &tmp);
 729              		.loc 1 141 17 view .LVU184
 730 00aa 57F82590 		ldr	r9, [r7, r5, lsl #2]
 731 00ae 0023     		movs	r3, #0
 732 00b0 4A46     		mov	r2, r9
 733 00b2 10A8     		add	r0, sp, #64
 734 00b4 FFF7FEFF 		bl	uint_set
 735              	.LVL67:
 142:csidh.c       **** 
 736              		.loc 1 142 17 view .LVU185
 737 00b8 A4F14002 		sub	r2, r4, #64
 738 00bc 10AB     		add	r3, sp, #64
 739 00be 1046     		mov	r0, r2
 740 00c0 20A9     		add	r1, sp, #128
 741 00c2 FFF7FEFF 		bl	xMUL
 742              	.LVL68:
 144:csidh.c       ****                     /* P does not have order dividing p+1. */
 743              		.loc 1 144 17 view .LVU186
 144:csidh.c       ****                     /* P does not have order dividing p+1. */
 744              		.loc 1 144 21 is_stmt 0 view .LVU187
 745 00c6 4022     		movs	r2, #64
 746 00c8 3146     		mov	r1, r6
 747 00ca 2046     		mov	r0, r4
 748 00cc FFF7FEFF 		bl	memcmp
 749              	.LVL69:
 144:csidh.c       ****                     /* P does not have order dividing p+1. */
 750              		.loc 1 144 20 view .LVU188
 751 00d0 0346     		mov	r3, r0
 752 00d2 78B9     		cbnz	r0, .L34
 148:csidh.c       **** 
 753              		.loc 1 148 17 is_stmt 1 view .LVU189
 754 00d4 4A46     		mov	r2, r9
 755 00d6 6946     		mov	r1, sp
 756 00d8 6846     		mov	r0, sp
 757 00da FFF7FEFF 		bl	uint_mul3_64
 758              	.LVL70:
 759              		.loc 1 150 17 view .LVU190
 760              		.loc 1 150 21 is_stmt 0 view .LVU191
 761 00de 6A46     		mov	r2, sp
 762 00e0 4146     		mov	r1, r8
 763 00e2 10A8     		add	r0, sp, #64
 764 00e4 FFF7FEFF 		bl	uint_sub3
 765              	.LVL71:
 766              		.loc 1 150 20 view .LVU192
 767 00e8 30B1     		cbz	r0, .L30
 768              	.L35:
 769              	.LBE17:
 770              	.LBE21:
 771              	.LBE23:
 151:csidh.c       ****                     /* order > 4 sqrt(p), hence definitely supersingular */
 152:csidh.c       ****                     return true;
 153:csidh.c       ****             }
 154:csidh.c       ****         }
 155:csidh.c       **** 
 156:csidh.c       ****         /* P didn't have big enough order to prove supersingularity. */
 157:csidh.c       ****     } while (1);
 158:csidh.c       **** }
 772              		.loc 1 158 1 view .LVU193
 773 00ea 0DF5185D 		add	sp, sp, #9728
 774 00ee 01B0     		add	sp, sp, #4
 775              	.LCFI14:
 776              		.cfi_remember_state
 777              		.cfi_def_cfa_offset 28
 778              		@ sp needed
 779 00f0 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 780              	.LVL72:
 781              	.L34:
 782              	.LCFI15:
 783              		.cfi_restore_state
 784              	.LBB24:
 785              	.LBB22:
 786              	.LBB18:
 146:csidh.c       **** 
 787              		.loc 1 146 28 view .LVU194
 788 00f4 0020     		movs	r0, #0
 789 00f6 F8E7     		b	.L35
 790              	.L30:
 791              	.LBE18:
 133:csidh.c       ****         {
 792              		.loc 1 133 57 is_stmt 1 discriminator 2 view .LVU195
 793 00f8 013D     		subs	r5, r5, #1
 794              	.LVL73:
 133:csidh.c       ****         {
 795              		.loc 1 133 43 discriminator 2 view .LVU196
 796 00fa 6B1C     		adds	r3, r5, #1
 797 00fc A4F18004 		sub	r4, r4, #128
 798 0100 CDD1     		bne	.L32
 799 0102 9CE7     		b	.L33
 800              	.L41:
 801              		.align	2
 802              	.L40:
 803 0104 00000000 		.word	fp_1
 804 0108 00000000 		.word	fp_0
 805 010c 00000000 		.word	primes
 806 0110 00000000 		.word	four_sqrt_p
 807 0114 00000000 		.word	uint_1
 808              	.LBE22:
 809              	.LBE24:
 810              		.cfi_endproc
 811              	.LFE9:
 813              		.section	.text.elligator,"ax",%progbits
 814              		.align	1
 815              		.global	elligator
 816              		.syntax unified
 817              		.thumb
 818              		.thumb_func
 820              	elligator:
 821              	.LVL74:
 822              	.LFB10:
 159:csidh.c       **** 
 160:csidh.c       **** /* compute x^3 + Ax^2 + x */
 161:csidh.c       **** /*
 162:csidh.c       **** static void montgomery_rhs(fp *rhs, fp const *A, fp const *x) {
 163:csidh.c       **** 	fp tmp;
 164:csidh.c       **** 	*rhs = *x;
 165:csidh.c       **** 	fp_sq1(rhs);
 166:csidh.c       **** 	fp_mul3(&tmp, A, x);
 167:csidh.c       **** 	fp_add2(rhs, &tmp);
 168:csidh.c       **** 	fp_add2(rhs, &fp_1);
 169:csidh.c       **** 	fp_mul2(rhs, x);
 170:csidh.c       **** }
 171:csidh.c       **** */
 172:csidh.c       **** 
 173:csidh.c       **** /* generates curve points */
 174:csidh.c       **** void elligator(proj *P, proj *Pd, const fp *A)
 175:csidh.c       **** {
 823              		.loc 1 175 1 view -0
 824              		.cfi_startproc
 825              		@ args = 0, pretend = 0, frame = 256
 826              		@ frame_needed = 0, uses_anonymous_args = 0
 176:csidh.c       **** 
 177:csidh.c       ****     fp u2m1, tmp, rhs;
 827              		.loc 1 177 5 view .LVU198
 178:csidh.c       ****     bool issquare;
 828              		.loc 1 178 5 view .LVU199
 179:csidh.c       **** 
 180:csidh.c       **** #if defined(DETERMINISTIC)
 181:csidh.c       ****     fp u2 = {{0xf73849b0ce4e064b, 0x94bbfb03237b4a47, 0x467d743c736b034f, 0xb3fee59267e9b9e8, 0x036
 182:csidh.c       **** #else
 183:csidh.c       ****     fp u2;
 829              		.loc 1 183 5 view .LVU200
 184:csidh.c       ****     fp_random(&u2);
 830              		.loc 1 184 5 view .LVU201
 175:csidh.c       **** 
 831              		.loc 1 175 1 is_stmt 0 view .LVU202
 832 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 833              	.LCFI16:
 834              		.cfi_def_cfa_offset 24
 835              		.cfi_offset 4, -24
 836              		.cfi_offset 5, -20
 837              		.cfi_offset 6, -16
 838              		.cfi_offset 7, -12
 839              		.cfi_offset 8, -8
 840              		.cfi_offset 14, -4
 841 0004 C0B0     		sub	sp, sp, #256
 842              	.LCFI17:
 843              		.cfi_def_cfa_offset 280
 175:csidh.c       **** 
 844              		.loc 1 175 1 view .LVU203
 845 0006 0646     		mov	r6, r0
 846              		.loc 1 184 5 view .LVU204
 847 0008 30A8     		add	r0, sp, #192
 848              	.LVL75:
 175:csidh.c       **** 
 849              		.loc 1 175 1 view .LVU205
 850 000a 0C46     		mov	r4, r1
 851 000c 1546     		mov	r5, r2
 852              		.loc 1 184 5 view .LVU206
 853 000e FFF7FEFF 		bl	fp_random
 854              	.LVL76:
 185:csidh.c       **** #endif
 186:csidh.c       **** 
 187:csidh.c       ****     fp_sq1(&u2);                // u^2
 855              		.loc 1 187 5 is_stmt 1 view .LVU207
 856 0012 30A8     		add	r0, sp, #192
 857 0014 FFF7FEFF 		bl	fp_sq1
 858              	.LVL77:
 188:csidh.c       ****     fp_sub3(&u2m1, &u2, &fp_1); // u^2 - 1
 859              		.loc 1 188 5 view .LVU208
 860 0018 2D4A     		ldr	r2, .L43
 861 001a 30A9     		add	r1, sp, #192
 862 001c 6846     		mov	r0, sp
 863 001e FFF7FEFF 		bl	fp_sub3
 864              	.LVL78:
 189:csidh.c       ****                                 //uart_puts("3\n");
 190:csidh.c       ****     fp_sq2(&tmp, &u2m1);        // (u^2 - 1)^2
 865              		.loc 1 190 5 view .LVU209
 866 0022 6946     		mov	r1, sp
 867 0024 10A8     		add	r0, sp, #64
 868 0026 FFF7FEFF 		bl	fp_sq2
 869              	.LVL79:
 191:csidh.c       ****     fp_sq2(&rhs, A);            // A^2
 870              		.loc 1 191 5 view .LVU210
 871 002a 2946     		mov	r1, r5
 872 002c 20A8     		add	r0, sp, #128
 873 002e FFF7FEFF 		bl	fp_sq2
 874              	.LVL80:
 192:csidh.c       ****     fp_mul2(&rhs, &u2);         // A^2u^2
 875              		.loc 1 192 5 view .LVU211
 876 0032 30A9     		add	r1, sp, #192
 877 0034 20A8     		add	r0, sp, #128
 878 0036 FFF7FEFF 		bl	fp_mul2
 879              	.LVL81:
 193:csidh.c       ****     fp_add2(&rhs, &tmp);        // A^2u^2 + u(u^2 - 1)^2
 880              		.loc 1 193 5 view .LVU212
 881 003a 10A9     		add	r1, sp, #64
 882 003c 20A8     		add	r0, sp, #128
 883 003e FFF7FEFF 		bl	fp_add2
 884              	.LVL82:
 194:csidh.c       ****     fp_mul2(&rhs, A);           // (A^2u^2 + u(u^2 - 1)^2)A
 885              		.loc 1 194 5 view .LVU213
 886 0042 2946     		mov	r1, r5
 887 0044 20A8     		add	r0, sp, #128
 888 0046 FFF7FEFF 		bl	fp_mul2
 889              	.LVL83:
 195:csidh.c       ****     fp_mul2(&rhs, &u2m1);       // (A^2u^2 + u(u^2 - 1)^2)A(u^2 - 1)
 890              		.loc 1 195 5 view .LVU214
 891 004a 6946     		mov	r1, sp
 892 004c 20A8     		add	r0, sp, #128
 893 004e FFF7FEFF 		bl	fp_mul2
 894              	.LVL84:
 196:csidh.c       ****                                 // uart_puts("4\n");
 197:csidh.c       ****     fp_set(&P->x, 0);
 895              		.loc 1 197 5 view .LVU215
 896 0052 0022     		movs	r2, #0
 897 0054 0023     		movs	r3, #0
 898 0056 3046     		mov	r0, r6
 899 0058 FFF7FEFF 		bl	fp_set
 900              	.LVL85:
 198:csidh.c       ****     fp_add2(&P->x, A);
 901              		.loc 1 198 5 view .LVU216
 199:csidh.c       ****     fp_set(&P->z, 0);
 902              		.loc 1 199 12 is_stmt 0 view .LVU217
 903 005c 06F14007 		add	r7, r6, #64
 198:csidh.c       ****     fp_add2(&P->x, A);
 904              		.loc 1 198 5 view .LVU218
 905 0060 2946     		mov	r1, r5
 906 0062 3046     		mov	r0, r6
 907 0064 FFF7FEFF 		bl	fp_add2
 908              	.LVL86:
 909              		.loc 1 199 5 is_stmt 1 view .LVU219
 910 0068 0022     		movs	r2, #0
 911 006a 0023     		movs	r3, #0
 912 006c 3846     		mov	r0, r7
 913 006e FFF7FEFF 		bl	fp_set
 914              	.LVL87:
 200:csidh.c       ****     fp_add2(&P->z, &u2m1);
 915              		.loc 1 200 5 view .LVU220
 916 0072 6946     		mov	r1, sp
 917 0074 3846     		mov	r0, r7
 918 0076 FFF7FEFF 		bl	fp_add2
 919              	.LVL88:
 201:csidh.c       ****     fp_set(&Pd->x, 0);
 920              		.loc 1 201 5 view .LVU221
 921 007a 0022     		movs	r2, #0
 922 007c 0023     		movs	r3, #0
 923 007e 2046     		mov	r0, r4
 924 0080 FFF7FEFF 		bl	fp_set
 925              	.LVL89:
 202:csidh.c       ****     fp_sub2(&Pd->x, A);
 926              		.loc 1 202 5 view .LVU222
 927 0084 2946     		mov	r1, r5
 928 0086 2046     		mov	r0, r4
 929 0088 FFF7FEFF 		bl	fp_sub2
 930              	.LVL90:
 203:csidh.c       ****     fp_mul2(&Pd->x, &u2);
 931              		.loc 1 203 5 view .LVU223
 204:csidh.c       ****     fp_set(&Pd->z, 0);
 932              		.loc 1 204 12 is_stmt 0 view .LVU224
 933 008c 04F14008 		add	r8, r4, #64
 203:csidh.c       ****     fp_mul2(&Pd->x, &u2);
 934              		.loc 1 203 5 view .LVU225
 935 0090 30A9     		add	r1, sp, #192
 936 0092 2046     		mov	r0, r4
 937 0094 FFF7FEFF 		bl	fp_mul2
 938              	.LVL91:
 939              		.loc 1 204 5 is_stmt 1 view .LVU226
 940 0098 0023     		movs	r3, #0
 941 009a 0022     		movs	r2, #0
 942 009c 4046     		mov	r0, r8
 943 009e FFF7FEFF 		bl	fp_set
 944              	.LVL92:
 205:csidh.c       ****     fp_add2(&Pd->z, &u2m1);
 945              		.loc 1 205 5 view .LVU227
 946 00a2 6946     		mov	r1, sp
 947 00a4 4046     		mov	r0, r8
 948 00a6 FFF7FEFF 		bl	fp_add2
 949              	.LVL93:
 206:csidh.c       **** 
 207:csidh.c       ****     issquare = fp_issquare(&rhs);
 950              		.loc 1 207 5 view .LVU228
 951              		.loc 1 207 16 is_stmt 0 view .LVU229
 952 00aa 20A8     		add	r0, sp, #128
 953 00ac FFF7FEFF 		bl	fp_issquare
 954              	.LVL94:
 208:csidh.c       ****     fp_cswap(&P->x, &Pd->x, !issquare);
 955              		.loc 1 208 5 is_stmt 1 view .LVU230
 956 00b0 80F00105 		eor	r5, r0, #1
 957              	.LVL95:
 958              		.loc 1 208 5 is_stmt 0 view .LVU231
 959 00b4 EDB2     		uxtb	r5, r5
 960 00b6 2A46     		mov	r2, r5
 961 00b8 2146     		mov	r1, r4
 962 00ba 3046     		mov	r0, r6
 963              	.LVL96:
 964              		.loc 1 208 5 view .LVU232
 965 00bc FFF7FEFF 		bl	fp_cswap
 966              	.LVL97:
 209:csidh.c       ****     fp_cswap(&P->z, &Pd->z, !issquare);
 967              		.loc 1 209 5 is_stmt 1 view .LVU233
 968 00c0 2A46     		mov	r2, r5
 969 00c2 4146     		mov	r1, r8
 970 00c4 3846     		mov	r0, r7
 971 00c6 FFF7FEFF 		bl	fp_cswap
 972              	.LVL98:
 210:csidh.c       **** }
 973              		.loc 1 210 1 is_stmt 0 view .LVU234
 974 00ca 40B0     		add	sp, sp, #256
 975              	.LCFI18:
 976              		.cfi_def_cfa_offset 24
 977              		@ sp needed
 978 00cc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 979              	.LVL99:
 980              	.L44:
 981              		.loc 1 210 1 view .LVU235
 982              		.align	2
 983              	.L43:
 984 00d0 00000000 		.word	fp_1
 985              		.cfi_endproc
 986              	.LFE10:
 988              		.section	.text.action,"ax",%progbits
 989              		.align	1
 990              		.global	action
 991              		.syntax unified
 992              		.thumb
 993              		.thumb_func
 995              	action:
 996              	.LVL100:
 997              	.LFB11:
 211:csidh.c       **** 
 212:csidh.c       **** #ifdef CM
 213:csidh.c       **** // Input: A supersingular curve E : Cy^2 = Cx^3 + Ax^2 + Cx over F_p,  and an element u in {2,..., 
 214:csidh.c       **** // Output: A pair of points T+ in E[pi - 1] and T- in E[pi + 1], error variable error.
 215:csidh.c       **** /* generates curve points */
 216:csidh.c       **** static bool new_elligator(proj *P, proj *Pd, const proj *A, const fp *u, int8_t *ps)
 217:csidh.c       **** {
 218:csidh.c       ****     bool error = 0;
 219:csidh.c       ****     bool b = false, s1, s2;
 220:csidh.c       ****     fp a, tmp0, tmp1, tmp2, u2m1, xz;
 221:csidh.c       ****     //fp_set(&a, 0);
 222:csidh.c       ****     // A->x = A and A->z = C
 223:csidh.c       ****     b = fp_cmp_ct(&A->x, &fp_0); // b <- isequal(A, 0)
 224:csidh.c       ****     //fp_cadd(&a, &fp_0, u, !b);                // a <- cadd(0, bu)
 225:csidh.c       ****     fp_cset(&a, u, !b);           // a <- cadd(0, bu)
 226:csidh.c       ****     fp_sq2(&tmp0, u);             // u^2
 227:csidh.c       ****     fp_sub3(&u2m1, &tmp0, &fp_1); // u^2 - 1
 228:csidh.c       ****     fp_mul3(&P->z, &u2m1, &A->z); // Z = C(u^2 - 1)
 229:csidh.c       ****     fp_mul3(&tmp0, &P->z, &a);    // aC(u^2 - 1)
 230:csidh.c       ****     fp_add3(&P->x, &A->x, &tmp0); // X = A +aC(u^2 −1)
 231:csidh.c       ****     fp_cset(&Pd->z, &P->z, 1);    // Z' = C(u^2 - 1)
 232:csidh.c       **** 
 233:csidh.c       ****     //fp_sub3(&tmp0, u, &fp_1);                   // u - 1
 234:csidh.c       ****     fp_mul3(&tmp2, &a, &A->z);     // aC
 235:csidh.c       ****     fp_mul3(&tmp1, &u2m1, &tmp2);  // aC (u^2 − 1)
 236:csidh.c       ****     fp_sq2(&tmp0, u);              // u^2
 237:csidh.c       ****     fp_mul3(&tmp2, &A->x, &tmp0);  // Au^2
 238:csidh.c       ****     fp_sub3(&tmp0, &fp_0, &tmp2);  // -Au^2
 239:csidh.c       ****     fp_sub3(&Pd->x, &tmp0, &tmp1); // X' = −Au^2 −aC (u^2 −1)
 240:csidh.c       **** 
 241:csidh.c       ****     fp_sq2(&tmp0, &P->x);         // X^2
 242:csidh.c       ****     fp_mul3(&tmp1, &A->z, &tmp0); // CX^2
 243:csidh.c       ****     fp_mul3(&xz, &P->x, &P->z);   // XZ
 244:csidh.c       ****     fp_mul3(&tmp0, &A->x, &xz);   // AXZ
 245:csidh.c       ****     fp_sq2(&a, &P->z);            // Z^2
 246:csidh.c       ****     fp_mul3(&tmp2, &A->z, &a);    // CZ^2
 247:csidh.c       ****     fp_add3(&a, &tmp1, &tmp0);    // CX^2 + AXZ
 248:csidh.c       ****     fp_add3(&tmp0, &a, &tmp2);    // CX^2 + AXZ + + CZ^2
 249:csidh.c       ****     fp_mul3(&tmp1, &xz, &tmp0);   // XZ(CX^2 + AXZ + + CZ^2)
 250:csidh.c       **** 
 251:csidh.c       ****     s1 = fp_issquare(&tmp1); // s1 <- Legendre symbol(XZ(CX^2 + AXZ + + CZ^2), p)
 252:csidh.c       **** 
 253:csidh.c       ****     fp_sq2(&tmp0, &Pd->x);        // X'^2
 254:csidh.c       ****     fp_mul3(&tmp1, &A->z, &tmp0); // CX'^2
 255:csidh.c       ****     fp_mul3(&xz, &Pd->x, &Pd->z); // X'Z'
 256:csidh.c       ****     fp_mul3(&tmp0, &A->x, &xz);   // AX'Z'
 257:csidh.c       ****     fp_sq2(&a, &Pd->z);           // Z'^2
 258:csidh.c       ****     fp_mul3(&tmp2, &A->z, &a);    // CZ'^2
 259:csidh.c       ****     fp_add3(&a, &tmp1, &tmp0);    // CX'^2 + AX'Z'
 260:csidh.c       ****     fp_add3(&tmp0, &a, &tmp2);    // CX'^2 + AX'Z' + + CZ'^2
 261:csidh.c       ****     fp_mul3(&tmp1, &xz, &tmp0);   // X'Z'(CX'^2 + AX'Z' + + CZ'^2)
 262:csidh.c       **** 
 263:csidh.c       ****     s2 = fp_issquare(&tmp1); // s2 <- Legendre symbol(X'Z'(CX'^2 + AX'Z' + CZ'^2), p)
 264:csidh.c       **** 
 265:csidh.c       ****     // fp_cswap(&P->x, &Pd->x, !s1);
 266:csidh.c       ****     // fp_cswap(&P->z, &Pd->z, !s1);
 267:csidh.c       **** 
 268:csidh.c       ****     error |= !(s1 ^ s2);
 269:csidh.c       **** 
 270:csidh.c       ****     *ps = !(s1 ^ 1); //ps stores information which point is stored in P
 271:csidh.c       **** 
 272:csidh.c       ****     error |= (*ps ^ !(s1 ^ 1)); //check that ps has not been manipulated
 273:csidh.c       ****     return error;
 274:csidh.c       **** }
 275:csidh.c       **** #endif
 276:csidh.c       **** 
 277:csidh.c       **** /* constant-time. */
 278:csidh.c       **** bool action(public_key *out, public_key const *in, private_key const *priv,
 279:csidh.c       ****             uint8_t num_batches, int8_t const *max_exponent, unsigned int const num_isogenies, uint
 280:csidh.c       **** {
 998              		.loc 1 280 1 is_stmt 1 view -0
 999              		.cfi_startproc
 1000              		@ args = 12, pretend = 0, frame = 1160
 1001              		@ frame_needed = 0, uses_anonymous_args = 0
 281:csidh.c       **** 
 282:csidh.c       **** #ifdef DBG
 283:csidh.c       ****     char str[1000];
 284:csidh.c       **** #endif
 285:csidh.c       **** 
 286:csidh.c       **** 
 287:csidh.c       **** 
 288:csidh.c       **** #ifdef F419
 289:csidh.c       ****     uint_c k[1] = {{{4 * 3 * 5 * 7}}};
 290:csidh.c       ****     uint_c p_order = {{119}};
 291:csidh.c       **** #else
 292:csidh.c       ****     //factors k for different batches
 293:csidh.c       ****     uint_c k[3] = {{{0x1b5933af628d005c, 0x9d4af02b1d7b7f56, 0x8977a8435092262a, 0xb86302ff54a37ca2
 1002              		.loc 1 293 5 view .LVU237
 280:csidh.c       **** 
 1003              		.loc 1 280 1 is_stmt 0 view .LVU238
 1004 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1005              	.LCFI19:
 1006              		.cfi_def_cfa_offset 36
 1007              		.cfi_offset 4, -36
 1008              		.cfi_offset 5, -32
 1009              		.cfi_offset 6, -28
 1010              		.cfi_offset 7, -24
 1011              		.cfi_offset 8, -20
 1012              		.cfi_offset 9, -16
 1013              		.cfi_offset 10, -12
 1014              		.cfi_offset 11, -8
 1015              		.cfi_offset 14, -4
 1016 0004 ADF29C4D 		subw	sp, sp, #1180
 1017              	.LCFI20:
 1018              		.cfi_def_cfa_offset 1216
 294:csidh.c       ****                  {{0xd97b8b6bc6f6be1c, 0x315872c44ea6e448, 0x1aae7c54fd380c86, 0x237ec4cf2da454a2, 
 295:csidh.c       ****                  {{0x629ea97b02169a84, 0xc4b9616a12d48d22, 0x492a10278ad7b45a, 0xc44ac4dce55b87f8, 
 296:csidh.c       **** 
 297:csidh.c       ****     uint_c p_order = {{0x24403b2c196b9323, 0x8a8759a31723c208, 0xb4a93a543937992b, 0xcdd1f791dc7eb7
 1019              		.loc 1 297 12 view .LVU239
 1020 0008 B74F     		ldr	r7, .L67
 280:csidh.c       **** 
 1021              		.loc 1 280 1 view .LVU240
 1022 000a 0890     		str	r0, [sp, #32]
 1023 000c 0C46     		mov	r4, r1
 1024 000e 9046     		mov	r8, r2
 293:csidh.c       ****                  {{0xd97b8b6bc6f6be1c, 0x315872c44ea6e448, 0x1aae7c54fd380c86, 0x237ec4cf2da454a2, 
 1025              		.loc 1 293 12 view .LVU241
 1026 0010 B649     		ldr	r1, .L67+4
 1027              	.LVL101:
 293:csidh.c       ****                  {{0xd97b8b6bc6f6be1c, 0x315872c44ea6e448, 0x1aae7c54fd380c86, 0x237ec4cf2da454a2, 
 1028              		.loc 1 293 12 view .LVU242
 1029 0012 C022     		movs	r2, #192
 1030              	.LVL102:
 280:csidh.c       **** 
 1031              		.loc 1 280 1 view .LVU243
 1032 0014 1E46     		mov	r6, r3
 293:csidh.c       ****                  {{0xd97b8b6bc6f6be1c, 0x315872c44ea6e448, 0x1aae7c54fd380c86, 0x237ec4cf2da454a2, 
 1033              		.loc 1 293 12 view .LVU244
 1034 0016 F6A8     		add	r0, sp, #984
 1035              	.LVL103:
 280:csidh.c       **** 
 1036              		.loc 1 280 1 view .LVU245
 1037 0018 9DF8C834 		ldrb	r3, [sp, #1224]	@ zero_extendqisi2
 1038              	.LVL104:
 280:csidh.c       **** 
 1039              		.loc 1 280 1 view .LVU246
 1040 001c 0993     		str	r3, [sp, #36]
 293:csidh.c       ****                  {{0xd97b8b6bc6f6be1c, 0x315872c44ea6e448, 0x1aae7c54fd380c86, 0x237ec4cf2da454a2, 
 1041              		.loc 1 293 12 view .LVU247
 1042 001e FFF7FEFF 		bl	memcpy
 1043              	.LVL105:
 1044              		.loc 1 297 5 is_stmt 1 view .LVU248
 1045              		.loc 1 297 12 is_stmt 0 view .LVU249
 1046 0022 0FCF     		ldmia	r7!, {r0, r1, r2, r3}
 1047 0024 0CAD     		add	r5, sp, #48
 1048 0026 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1049 0028 0FCF     		ldmia	r7!, {r0, r1, r2, r3}
 1050 002a 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1051 002c 0FCF     		ldmia	r7!, {r0, r1, r2, r3}
 1052 002e 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1053 0030 97E80F00 		ldm	r7, {r0, r1, r2, r3}
 1054 0034 85E80F00 		stm	r5, {r0, r1, r2, r3}
 298:csidh.c       **** #endif
 299:csidh.c       **** 
 300:csidh.c       ****     int8_t ec = 0, m = 0;
 1055              		.loc 1 300 5 is_stmt 1 view .LVU250
 1056              	.LVL106:
 301:csidh.c       ****     uint8_t count = 0;
 1057              		.loc 1 301 5 view .LVU251
 302:csidh.c       ****     //uint8_t elligator_index = 0;
 303:csidh.c       ****     uint8_t last_iso[3], bc, ss;
 1058              		.loc 1 303 5 view .LVU252
 304:csidh.c       ****     proj P, Pd, K;
 1059              		.loc 1 304 5 view .LVU253
 305:csidh.c       ****     uint_c cof, l;
 1060              		.loc 1 305 5 view .LVU254
 306:csidh.c       ****     bool finished[NUM_PRIMES] = {0};
 1061              		.loc 1 306 5 view .LVU255
 1062              		.loc 1 306 10 is_stmt 0 view .LVU256
 1063 0038 4A22     		movs	r2, #74
 1064 003a 0021     		movs	r1, #0
 1065 003c 3DA8     		add	r0, sp, #244
 1066 003e FFF7FEFF 		bl	memset
 1067              	.LVL107:
 307:csidh.c       **** #ifdef REDUCEDSK
 308:csidh.c       ****     memset(finished, 1, sizeof(finished));
 309:csidh.c       ****     finished[0] = 0;
 310:csidh.c       ****     finished[1] = 0;
 311:csidh.c       **** 
 312:csidh.c       **** #endif
 313:csidh.c       **** 
 314:csidh.c       ****     int8_t e[NUM_PRIMES] = {0};
 1068              		.loc 1 314 5 is_stmt 1 view .LVU257
 315:csidh.c       **** 
 316:csidh.c       **** #ifdef CM
 317:csidh.c       ****     bool error = 0;
 318:csidh.c       ****     (void)p_order;
 319:csidh.c       ****     uint_c lastOrder;
 320:csidh.c       ****     proj lastA = {in->A, fp_1};
 321:csidh.c       **** #endif
 322:csidh.c       **** 
 323:csidh.c       ****     int8_t counter[NUM_PRIMES] = {0};
 1069              		.loc 1 323 5 view .LVU258
 324:csidh.c       ****     int8_t s, ps;
 1070              		.loc 1 324 5 view .LVU259
 325:csidh.c       ****     unsigned int isog_counter = 0;
 1071              		.loc 1 325 5 view .LVU260
 326:csidh.c       **** 
 327:csidh.c       **** #ifdef F419
 328:csidh.c       ****     last_iso[0] = 2;
 329:csidh.c       **** #else
 330:csidh.c       ****     //index for skipping point evaluations
 331:csidh.c       ****     last_iso[0] = 72;
 1072              		.loc 1 331 5 view .LVU261
 332:csidh.c       ****     last_iso[1] = 73;
 1073              		.loc 1 332 5 view .LVU262
 333:csidh.c       ****     last_iso[2] = 71;
 1074              		.loc 1 333 5 view .LVU263
 331:csidh.c       ****     last_iso[1] = 73;
 1075              		.loc 1 331 17 is_stmt 0 view .LVU264
 1076 0042 44F64813 		movw	r3, #18760
 1077 0046 ADF82C30 		strh	r3, [sp, #44]	@ movhi
 334:csidh.c       **** #endif
 335:csidh.c       **** 
 336:csidh.c       ****     memcpy(e, priv->e, sizeof(priv->e));
 1078              		.loc 1 336 5 view .LVU265
 1079 004a 4A22     		movs	r2, #74
 333:csidh.c       **** #endif
 1080              		.loc 1 333 17 view .LVU266
 1081 004c 4723     		movs	r3, #71
 1082              		.loc 1 336 5 view .LVU267
 1083 004e 4146     		mov	r1, r8
 1084 0050 50A8     		add	r0, sp, #320
 333:csidh.c       **** #endif
 1085              		.loc 1 333 17 view .LVU268
 1086 0052 8DF82E30 		strb	r3, [sp, #46]
 1087              		.loc 1 336 5 is_stmt 1 view .LVU269
 1088 0056 FFF7FEFF 		bl	memcpy
 1089              	.LVL108:
 337:csidh.c       **** 
 338:csidh.c       ****     memcpy(counter, max_exponent, sizeof(counter));
 1090              		.loc 1 338 5 view .LVU270
 1091 005a DDF8C014 		ldr	r1, [sp, #1216]
 1092 005e 4A22     		movs	r2, #74
 1093 0060 63A8     		add	r0, sp, #396
 1094 0062 FFF7FEFF 		bl	memcpy
 1095              	.LVL109:
 339:csidh.c       **** 
 340:csidh.c       ****     proj A = {in->A, fp_1};
 1096              		.loc 1 340 5 view .LVU271
 1097              		.loc 1 340 10 is_stmt 0 view .LVU272
 1098 0066 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1099              	.LVL110:
 1100              		.loc 1 340 10 view .LVU273
 1101 0068 D6AD     		add	r5, sp, #856
 1102 006a 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1103 006c 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1104              	.LVL111:
 1105              		.loc 1 340 10 view .LVU274
 1106 006e 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1107 0070 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1108              	.LVL112:
 1109              		.loc 1 340 10 view .LVU275
 1110 0072 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1111 0074 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 341:csidh.c       **** #ifdef DBG
 342:csidh.c       ****     sprintf(str, 
 343:csidh.c       ****     "[DBG] Entered the while isog_counter=%d < num_isogenies=%d loop\n",
 344:csidh.c       ****     isog_counter,
 345:csidh.c       ****     num_isogenies
 346:csidh.c       ****     );
 347:csidh.c       ****     uart_puts(str);
 348:csidh.c       **** #endif
 349:csidh.c       ****     while (isog_counter < num_isogenies)
 1112              		.loc 1 349 11 view .LVU276
 1113 0078 4FF00009 		mov	r9, #0
 340:csidh.c       **** #ifdef DBG
 1114              		.loc 1 340 10 view .LVU277
 1115 007c 85E80F00 		stm	r5, {r0, r1, r2, r3}
 1116              		.loc 1 349 5 is_stmt 1 view .LVU278
 325:csidh.c       **** 
 1117              		.loc 1 325 18 is_stmt 0 view .LVU279
 1118 0080 CDF81090 		str	r9, [sp, #16]
 300:csidh.c       ****     uint8_t count = 0;
 1119              		.loc 1 300 20 view .LVU280
 1120 0084 4D46     		mov	r5, r9
 1121              	.LVL113:
 1122              	.L46:
 340:csidh.c       **** #ifdef DBG
 1123              		.loc 1 340 10 view .LVU281
 1124 0086 DFF868C2 		ldr	ip, .L67+8
 1125 008a BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 1126 008e E6AC     		add	r4, sp, #920
 1127 0090 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1128 0092 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 1129 0096 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1130 0098 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 1131 009c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1132 009e 9CE80F00 		ldm	ip, {r0, r1, r2, r3}
 1133 00a2 84E80F00 		stm	r4, {r0, r1, r2, r3}
 1134              	.LVL114:
 1135              		.loc 1 349 25 is_stmt 1 view .LVU282
 1136 00a6 049B     		ldr	r3, [sp, #16]
 1137 00a8 DDF8C424 		ldr	r2, [sp, #1220]
 1138 00ac 9342     		cmp	r3, r2
 1139 00ae 10D3     		bcc	.L62
 350:csidh.c       ****     {
 351:csidh.c       **** #ifdef DBG
 352:csidh.c       ****     sprintf(str, 
 353:csidh.c       ****     "[DBG][while isog_counter=%d] ****************************************\n",
 354:csidh.c       ****     isog_counter
 355:csidh.c       ****     );
 356:csidh.c       ****     uart_puts(str);
 357:csidh.c       **** #endif
 358:csidh.c       ****         m = (m + 1) % num_batches;
 359:csidh.c       **** 
 360:csidh.c       ****         if (count == my * num_batches)
 361:csidh.c       ****         { //merge the batches after my rounds
 362:csidh.c       ****             m = 0;
 363:csidh.c       **** #ifdef F419
 364:csidh.c       ****             last_iso[0] = 2;
 365:csidh.c       **** #else
 366:csidh.c       ****             last_iso[0] = 73;   //doesn't skip point evaluations anymore after merging batches
 367:csidh.c       **** #endif
 368:csidh.c       ****             uint_set(&k[m], 4); //recompute factor k
 369:csidh.c       ****             num_batches = 1;
 370:csidh.c       **** 
 371:csidh.c       ****             // no need for constant-time, depends only on randomness
 372:csidh.c       ****             for (uint8_t i = 0; i < NUM_PRIMES; i++)
 373:csidh.c       ****             {
 374:csidh.c       ****                 if (counter[i] == 0)
 375:csidh.c       ****                 {
 376:csidh.c       ****                     uint_mul3_64(&k[m], &k[m], primes[i]);
 377:csidh.c       ****                 }
 378:csidh.c       ****             }
 379:csidh.c       **** #ifdef DBG
 380:csidh.c       ****     sprintf(str, 
 381:csidh.c       ****     "[DBG] Recomputed the factor k=%lu\n",
 382:csidh.c       ****     (long unsigned int)k[0].c[0]
 383:csidh.c       ****     );
 384:csidh.c       ****     uart_puts(str);
 385:csidh.c       **** #endif
 386:csidh.c       ****         }
 387:csidh.c       **** 
 388:csidh.c       **** #ifdef CM
 389:csidh.c       ****         #if defined(DETERMINISTIc)
 390:csidh.c       ****         fp u = {{0x9b9499cf4466e265, 0x1890b03f447fc2c2, 0x59200afefa8db817, 0x9d45d54e769e45a7, 0x
 391:csidh.c       ****         #else
 392:csidh.c       ****          fp u;
 393:csidh.c       ****          fp_random(&u);
 394:csidh.c       ****          while (compare(&u, &p_minus_1_halves) > 0)
 395:csidh.c       ****              fp_random(&u);
 396:csidh.c       ****         #endif
 397:csidh.c       ****         error |= new_elligator(&P, &Pd, &A, &u, &ps);
 398:csidh.c       **** 
 399:csidh.c       **** #else
 400:csidh.c       **** 
 401:csidh.c       ****         if (memcmp(&A.x, &fp_0, sizeof(fp)))
 402:csidh.c       ****         {
 403:csidh.c       ****             elligator(&P, &Pd, &A.x);
 404:csidh.c       ****         }
 405:csidh.c       ****         else
 406:csidh.c       ****         {
 407:csidh.c       ****             fp_enc(&P.x, &p_order); // point of full order on E_a with a=0
 408:csidh.c       ****             fp_sub3(&Pd.x, &fp_0, &P.x);
 409:csidh.c       ****             P.z  = fp_1;
 410:csidh.c       ****             Pd.z = fp_1;
 411:csidh.c       ****         }
 412:csidh.c       **** #ifdef DBG
 413:csidh.c       ****     sprintf(str, 
 414:csidh.c       ****     "[DBG] Sampled the point P.x=%lu P.z=%lu Pd.x=%lu Pd.z=%lu\n",
 415:csidh.c       ****     (long unsigned int)P.x.c[0],
 416:csidh.c       ****     (long unsigned int)P.z.c[0],
 417:csidh.c       ****     (long unsigned int)Pd.x.c[0],
 418:csidh.c       ****     (long unsigned int)Pd.z.c[0]
 419:csidh.c       ****     );
 420:csidh.c       ****     uart_puts(str);
 421:csidh.c       **** #endif
 422:csidh.c       **** #endif
 423:csidh.c       **** 
 424:csidh.c       ****         xMUL(&P, &A, &P, &k[m]);
 425:csidh.c       **** 
 426:csidh.c       ****         xMUL(&Pd, &A, &Pd, &k[m]);
 427:csidh.c       **** 
 428:csidh.c       **** #ifdef DBG
 429:csidh.c       ****     sprintf(str, 
 430:csidh.c       ****     "[DBG] Multiplied P, Q by factor k=%lu, P.x=%lu P.z=%lu Pd.x=%lu Pd.z=%lu\n",
 431:csidh.c       ****     (long unsigned int)k[m].c[0],
 432:csidh.c       ****     (long unsigned int)P.x.c[0],
 433:csidh.c       ****     (long unsigned int)P.z.c[0],
 434:csidh.c       ****     (long unsigned int)Pd.x.c[0],
 435:csidh.c       ****     (long unsigned int)Pd.z.c[0]
 436:csidh.c       ****     );
 437:csidh.c       ****     uart_puts(str);
 438:csidh.c       **** #endif
 439:csidh.c       **** #ifndef CM
 440:csidh.c       ****         ps = 1; //initialized in elligator
 441:csidh.c       **** #endif
 442:csidh.c       **** 
 443:csidh.c       **** #ifdef DBG
 444:csidh.c       ****     sprintf(str, 
 445:csidh.c       ****     "[DBG] Entered the for loop\n"
 446:csidh.c       ****     );
 447:csidh.c       ****     uart_puts(str);
 448:csidh.c       **** #endif
 449:csidh.c       ****         for (uint8_t i = m; i < NUM_PRIMES; i = i + num_batches)
 450:csidh.c       ****         {
 451:csidh.c       **** #ifdef DBG
 452:csidh.c       ****     sprintf(str, 
 453:csidh.c       ****     "[DBG][for i=%d] ========================================\n",
 454:csidh.c       ****     i
 455:csidh.c       ****     );
 456:csidh.c       ****     uart_puts(str);
 457:csidh.c       **** #endif
 458:csidh.c       **** #ifdef CM
 459:csidh.c       ****             uint_set(&lastOrder, primes[i]);
 460:csidh.c       **** 
 461:csidh.c       **** #endif
 462:csidh.c       ****             if (finished[i] == true)
 463:csidh.c       ****             { //depends only on randomness
 464:csidh.c       **** #ifdef DBG
 465:csidh.c       ****     sprintf(str, 
 466:csidh.c       ****     "[DBG] finished[%d] == true\n", i);
 467:csidh.c       **** #endif
 468:csidh.c       ****                 continue;
 469:csidh.c       ****             }
 470:csidh.c       ****             else
 471:csidh.c       ****             {
 472:csidh.c       ****                 cof = uint_1;
 473:csidh.c       ****                 for (uint8_t j = i + num_batches; j < NUM_PRIMES; j = j + num_batches)
 474:csidh.c       ****                 {
 475:csidh.c       ****                     if (finished[j] == false) //depends only on randomness
 476:csidh.c       ****                         uint_mul3_64(&cof, &cof, primes[j]);
 477:csidh.c       ****                 }
 478:csidh.c       **** 
 479:csidh.c       ****                 ec = lookup(i, e); //check in constant-time if normal or dummy isogeny must be comp
 480:csidh.c       **** 
 481:csidh.c       ****                 bc = isequal(ec, 0);
 482:csidh.c       **** 
 483:csidh.c       ****                 s = (uint8_t)ec >> 7;
 484:csidh.c       ****                 ss = !isequal(s, ps);
 485:csidh.c       **** 
 486:csidh.c       **** #ifdef CM
 487:csidh.c       ****                 error |= (ec ^ e[i]);
 488:csidh.c       **** 
 489:csidh.c       ****                 error |= (bc ^ isequal(ec, 0));
 490:csidh.c       **** 
 491:csidh.c       ****                 error |= (s ^ ((uint8_t)ec >> 7));
 492:csidh.c       **** 
 493:csidh.c       ****                 error |= (ss ^ (s ^ ps));
 494:csidh.c       **** #endif
 495:csidh.c       **** 
 496:csidh.c       ****                 ps = s;
 497:csidh.c       **** 
 498:csidh.c       **** #ifdef CM
 499:csidh.c       ****                 error |= (ps ^ s);
 500:csidh.c       **** #endif
 501:csidh.c       **** 
 502:csidh.c       **** #ifdef DBG
 503:csidh.c       ****     sprintf(str, 
 504:csidh.c       ****     "[DBG] Conditional swap of P and Pd %d\n",
 505:csidh.c       ****      ss
 506:csidh.c       ****     );
 507:csidh.c       ****     uart_puts(str);
 508:csidh.c       **** #endif
 509:csidh.c       ****                 fp_cswap(&P.x, &Pd.x, ss);
 510:csidh.c       **** 
 511:csidh.c       ****                 fp_cswap(&P.z, &Pd.z, ss);
 512:csidh.c       **** 
 513:csidh.c       ****                 xMUL(&K, &A, &P, &cof);
 514:csidh.c       **** 
 515:csidh.c       ****                 uint_set(&l, primes[i]);
 516:csidh.c       ****                 xMUL(&Pd, &A, &Pd, &l);
 517:csidh.c       **** 
 518:csidh.c       **** #ifdef CM
 519:csidh.c       ****                 fp_add3(&lastA.x, &A.x, &fp_0);
 520:csidh.c       ****                 fp_add3(&lastA.z, &A.z, &fp_0);
 521:csidh.c       **** #endif
 522:csidh.c       **** 
 523:csidh.c       ****                 if (memcmp(&K.z, &fp_0, sizeof(fp)))
 524:csidh.c       ****                 { //depends only on randomness
 525:csidh.c       **** #ifdef TWIST_ATTACK_CM
 526:csidh.c       ****                     fp XZ, AC, XZ2, Z2, C2, C2XZ, ACXZ2, X2, C2X3Z, C2XZ3, check;
 527:csidh.c       **** 
 528:csidh.c       ****                     // 1M
 529:csidh.c       ****                     fp_mul3(&XZ, &K.x, &K.z);           // XZ
 530:csidh.c       ****                     // 4S
 531:csidh.c       ****                     fp_sq2(&XZ2, &XZ);                  // XZ^2
 532:csidh.c       ****                     fp_sq2(&X2, &K.x);                  // X^2
 533:csidh.c       ****                     fp_sq2(&Z2, &K.z);                  // Z^2
 534:csidh.c       ****                     fp_sq2(&C2, &A.z);                  // C^2
 535:csidh.c       ****                     // 3M
 536:csidh.c       ****                     fp_mul3(&C2XZ, &C2, &XZ);           // C^2XZ
 537:csidh.c       ****                     fp_mul3(&AC, &A.x, &A.z);           // AC
 538:csidh.c       ****                     fp_mul3(&ACXZ2, &AC, &XZ2);         // ACXZ2
 539:csidh.c       ****                     // 2M
 540:csidh.c       ****                     fp_mul3(&C2X3Z, &C2XZ, &X2);        // C^2X^3Z
 541:csidh.c       ****                     fp_mul3(&C2XZ3, &C2XZ, &Z2);        // C^2XZ^3
 542:csidh.c       ****                     // 2a
 543:csidh.c       ****                     fp_add3(&check, &C2X3Z, &ACXZ2);    // C^2X^3Z + ACXZ2
 544:csidh.c       ****                     fp_add3(&check, &check, &C2XZ3);    // C^2X^3Z + ACXZ2 + C^2XZ^3
 545:csidh.c       ****                     // Legendre
 546:csidh.c       ****                     error |= (s) != (fp_issquare(&check));
 547:csidh.c       **** 
 548:csidh.c       **** #endif
 549:csidh.c       ****                     if (i == last_iso[m])
 550:csidh.c       ****                     {
 551:csidh.c       **** #ifdef CM
 552:csidh.c       ****                         error |= lastxISOG(&A, &K, primes[i], bc); // doesn't compute the images of
 553:csidh.c       **** #else
 554:csidh.c       **** #ifdef DBG
 555:csidh.c       ****     sprintf(str, 
 556:csidh.c       ****     "[DBG] Computing lastxISOG A.x=%lu A.z=%lu l=%lu K.x=%lu K.z=%lu\n",
 557:csidh.c       ****     (long unsigned int)A.x.c[0],
 558:csidh.c       ****     (long unsigned int)A.z.c[0],
 559:csidh.c       ****     (long unsigned int)primes[i],
 560:csidh.c       ****     (long unsigned int)K.x.c[0],
 561:csidh.c       ****     (long unsigned int)K.z.c[0]
 562:csidh.c       ****     );
 563:csidh.c       ****     uart_puts(str);
 564:csidh.c       **** #endif
 565:csidh.c       ****                         lastxISOG(&A, &K, primes[i], bc); // doesn't compute the images of points
 566:csidh.c       **** #ifdef DBG
 567:csidh.c       ****     sprintf(str, 
 568:csidh.c       ****     "[DBG] Result lastxISOG A.x=%lu A.z=%lu\n",
 569:csidh.c       ****     (long unsigned int)A.x.c[0],
 570:csidh.c       ****     (long unsigned int)A.z.c[0]
 571:csidh.c       ****     );
 572:csidh.c       ****     uart_puts(str);
 573:csidh.c       **** #endif
 574:csidh.c       **** #endif
 575:csidh.c       ****                     }
 576:csidh.c       ****                     else
 577:csidh.c       ****                     {
 578:csidh.c       **** 
 579:csidh.c       **** #ifdef CM
 580:csidh.c       ****                         error |= xISOG(&A, &P, &Pd, &K, primes[i], bc);
 581:csidh.c       **** #else
 582:csidh.c       **** #ifdef DBG
 583:csidh.c       ****     sprintf(str, 
 584:csidh.c       ****     "[DBG] Computing xISOG A.x=%lu A.z=%lu l=%lu K.x=%lu K.z=%lu P.x=%lu P.z=%lu Pd.x=%lu Pd.z=%lu\
 585:csidh.c       ****     (long unsigned int)A.x.c[0],
 586:csidh.c       ****     (long unsigned int)A.z.c[0],
 587:csidh.c       ****     (long unsigned int)primes[i],
 588:csidh.c       ****     (long unsigned int)K.x.c[0],
 589:csidh.c       ****     (long unsigned int)K.z.c[0],
 590:csidh.c       ****     (long unsigned int)P.x.c[0],
 591:csidh.c       ****     (long unsigned int)P.z.c[0],
 592:csidh.c       ****     (long unsigned int)Pd.x.c[0],
 593:csidh.c       ****     (long unsigned int)Pd.z.c[0]
 594:csidh.c       ****     );
 595:csidh.c       ****     uart_puts(str);
 596:csidh.c       **** #endif
 597:csidh.c       ****                         xISOG(&A, &P, &Pd, &K, primes[i], bc);
 598:csidh.c       **** #ifdef DBG
 599:csidh.c       ****     sprintf(str, 
 600:csidh.c       ****     "[DBG] Result xISOG A.x=%lu A.z=%lu\n",
 601:csidh.c       ****     (long unsigned int)A.x.c[0],
 602:csidh.c       ****     (long unsigned int)A.z.c[0]
 603:csidh.c       ****     );
 604:csidh.c       ****     uart_puts(str);
 605:csidh.c       **** #endif
 606:csidh.c       **** #endif
 607:csidh.c       **** 
 608:csidh.c       ****                     }
 609:csidh.c       **** 
 610:csidh.c       ****                     e[i] = ec - (1 ^ bc) + (s << 1);
 611:csidh.c       **** #ifdef CM
 612:csidh.c       ****                     error |= (e[i] ^ (ec - (1 ^ bc) + (s << 1)));
 613:csidh.c       **** #endif
 614:csidh.c       **** 
 615:csidh.c       ****                     counter[i] = counter[i] - 1;
 616:csidh.c       ****                     isog_counter = isog_counter + 1;
 617:csidh.c       ****                 }
 618:csidh.c       ****             }
 619:csidh.c       **** 
 620:csidh.c       ****             if (counter[i] == 0)
 621:csidh.c       ****             { //depends only on randomness
 622:csidh.c       ****                 finished[i] = true;
 623:csidh.c       ****                 uint_mul3_64(&k[m], &k[m], primes[i]);
 624:csidh.c       ****             }
 625:csidh.c       ****         }
 626:csidh.c       **** 
 627:csidh.c       **** #ifdef CM
 628:csidh.c       ****         // check P = 0 and Pd = 0 at the end of a batch run
 629:csidh.c       ****         xMUL(&P, &lastA, &P, &lastOrder);
 630:csidh.c       ****         error |= fp_cmp_ct(&P.z, &fp_0);
 631:csidh.c       ****         error |= fp_cmp_ct(&Pd.z, &fp_0);
 632:csidh.c       **** #endif
 633:csidh.c       **** 
 634:csidh.c       **** #ifndef CM
 635:csidh.c       ****         fp_inv(&A.z);
 636:csidh.c       ****         fp_mul2(&A.x, &A.z);
 637:csidh.c       ****         A.z = fp_1;
 638:csidh.c       **** #endif
 639:csidh.c       ****         count = count + 1;
 640:csidh.c       ****     }
 641:csidh.c       **** #ifdef CM
 642:csidh.c       ****     fp_inv(&A.z);
 643:csidh.c       ****     fp_mul2(&A.x, &A.z);
 644:csidh.c       **** #endif
 645:csidh.c       ****     out->A = A.x;
 1140              		.loc 1 645 5 view .LVU283
 1141              		.loc 1 645 12 is_stmt 0 view .LVU284
 1142 00b0 D6AC     		add	r4, sp, #856
 1143 00b2 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1144 00b4 089D     		ldr	r5, [sp, #32]
 1145              	.LVL115:
 1146              		.loc 1 645 12 view .LVU285
 1147 00b6 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1148 00b8 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1149 00ba 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1150 00bc 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1151 00be 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1152 00c0 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 1153 00c4 85E80F00 		stm	r5, {r0, r1, r2, r3}
 646:csidh.c       **** #ifdef DBG
 647:csidh.c       ****     sprintf(str, 
 648:csidh.c       ****     "[DBG] END A.x=%lu\n",
 649:csidh.c       ****     (long unsigned int)A.x.c[0]
 650:csidh.c       ****     );
 651:csidh.c       ****     uart_puts(str);
 652:csidh.c       **** #endif
 653:csidh.c       **** 
 654:csidh.c       **** #ifdef CM
 655:csidh.c       ****     error |= (isog_counter ^ 404);
 656:csidh.c       ****     for (int8_t i = 0; i < num_primes; i++)
 657:csidh.c       ****         error |= (counter[i] ^ 0);
 658:csidh.c       ****     error |= validate_cheaper(out);
 659:csidh.c       ****     return error;
 660:csidh.c       **** #else
 661:csidh.c       ****     return 0;
 1154              		.loc 1 661 5 is_stmt 1 view .LVU286
 662:csidh.c       **** #endif
 663:csidh.c       **** 
 664:csidh.c       **** }
 1155              		.loc 1 664 1 is_stmt 0 view .LVU287
 1156 00c8 0020     		movs	r0, #0
 1157 00ca 0DF29C4D 		addw	sp, sp, #1180
 1158              	.LCFI21:
 1159              		.cfi_remember_state
 1160              		.cfi_def_cfa_offset 36
 1161              		@ sp needed
 1162 00ce BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1163              	.LVL116:
 1164              	.L62:
 1165              	.LCFI22:
 1166              		.cfi_restore_state
 358:csidh.c       **** 
 1167              		.loc 1 358 9 is_stmt 1 view .LVU288
 360:csidh.c       ****         { //merge the batches after my rounds
 1168              		.loc 1 360 25 is_stmt 0 view .LVU289
 1169 00d2 099A     		ldr	r2, [sp, #36]
 358:csidh.c       **** 
 1170              		.loc 1 358 16 view .LVU290
 1171 00d4 0135     		adds	r5, r5, #1
 1172              	.LVL117:
 360:csidh.c       ****         { //merge the batches after my rounds
 1173              		.loc 1 360 25 view .LVU291
 1174 00d6 16FB02F2 		smulbb	r2, r6, r2
 358:csidh.c       **** 
 1175              		.loc 1 358 21 view .LVU292
 1176 00da 95FBF6F3 		sdiv	r3, r5, r6
 1177              	.LVL118:
 358:csidh.c       **** 
 1178              		.loc 1 358 21 view .LVU293
 1179 00de 06FB1355 		mls	r5, r6, r3, r5
 360:csidh.c       ****         { //merge the batches after my rounds
 1180              		.loc 1 360 19 view .LVU294
 1181 00e2 5FFA89F3 		uxtb	r3, r9
 360:csidh.c       ****         { //merge the batches after my rounds
 1182              		.loc 1 360 12 view .LVU295
 1183 00e6 9342     		cmp	r3, r2
 358:csidh.c       **** 
 1184              		.loc 1 358 11 view .LVU296
 1185 00e8 6DB2     		sxtb	r5, r5
 1186              	.LVL119:
 360:csidh.c       ****         { //merge the batches after my rounds
 1187              		.loc 1 360 9 is_stmt 1 view .LVU297
 360:csidh.c       ****         { //merge the batches after my rounds
 1188              		.loc 1 360 12 is_stmt 0 view .LVU298
 1189 00ea 18D1     		bne	.L47
 362:csidh.c       **** #ifdef F419
 1190              		.loc 1 362 13 is_stmt 1 view .LVU299
 1191              	.LVL120:
 366:csidh.c       **** #endif
 1192              		.loc 1 366 13 view .LVU300
 366:csidh.c       **** #endif
 1193              		.loc 1 366 25 is_stmt 0 view .LVU301
 1194 00ec 4923     		movs	r3, #73
 1195 00ee 8DF82C30 		strb	r3, [sp, #44]
 368:csidh.c       ****             num_batches = 1;
 1196              		.loc 1 368 13 is_stmt 1 view .LVU302
 1197 00f2 0422     		movs	r2, #4
 1198 00f4 0023     		movs	r3, #0
 1199 00f6 F6A8     		add	r0, sp, #984
 1200 00f8 FFF7FEFF 		bl	uint_set
 1201              	.LVL121:
 369:csidh.c       **** 
 1202              		.loc 1 369 13 view .LVU303
 372:csidh.c       ****             {
 1203              		.loc 1 372 13 view .LVU304
 1204              	.LBB25:
 372:csidh.c       ****             {
 1205              		.loc 1 372 18 view .LVU305
 372:csidh.c       ****             {
 1206              		.loc 1 372 35 view .LVU306
 376:csidh.c       ****                 }
 1207              		.loc 1 376 54 is_stmt 0 view .LVU307
 1208 00fc 7D4E     		ldr	r6, .L67+12
 1209 00fe 63AD     		add	r5, sp, #396
 1210              	.LBE25:
 368:csidh.c       ****             num_batches = 1;
 1211              		.loc 1 368 13 view .LVU308
 1212 0100 0024     		movs	r4, #0
 1213              	.LVL122:
 1214              	.L49:
 1215              	.LBB26:
 374:csidh.c       ****                 {
 1216              		.loc 1 374 17 is_stmt 1 view .LVU309
 374:csidh.c       ****                 {
 1217              		.loc 1 374 28 is_stmt 0 view .LVU310
 1218 0102 15F9013B 		ldrsb	r3, [r5], #1
 374:csidh.c       ****                 {
 1219              		.loc 1 374 20 view .LVU311
 1220 0106 2BB9     		cbnz	r3, .L48
 376:csidh.c       ****                 }
 1221              		.loc 1 376 21 is_stmt 1 view .LVU312
 1222 0108 F6A9     		add	r1, sp, #984
 1223 010a 56F82420 		ldr	r2, [r6, r4, lsl #2]
 1224 010e 0846     		mov	r0, r1
 1225 0110 FFF7FEFF 		bl	uint_mul3_64
 1226              	.LVL123:
 1227              	.L48:
 372:csidh.c       ****             {
 1228              		.loc 1 372 50 discriminator 2 view .LVU313
 372:csidh.c       ****             {
 1229              		.loc 1 372 35 discriminator 2 view .LVU314
 1230 0114 0134     		adds	r4, r4, #1
 1231              	.LVL124:
 372:csidh.c       ****             {
 1232              		.loc 1 372 35 is_stmt 0 discriminator 2 view .LVU315
 1233 0116 4A2C     		cmp	r4, #74
 1234 0118 F3D1     		bne	.L49
 1235              	.LBE26:
 362:csidh.c       **** #ifdef F419
 1236              		.loc 1 362 15 view .LVU316
 1237 011a 0025     		movs	r5, #0
 369:csidh.c       **** 
 1238              		.loc 1 369 25 view .LVU317
 1239 011c 0126     		movs	r6, #1
 1240              	.LVL125:
 1241              	.L47:
 401:csidh.c       ****         {
 1242              		.loc 1 401 9 is_stmt 1 view .LVU318
 401:csidh.c       ****         {
 1243              		.loc 1 401 13 is_stmt 0 view .LVU319
 1244 011e 7649     		ldr	r1, .L67+16
 1245 0120 4022     		movs	r2, #64
 1246 0122 D6A8     		add	r0, sp, #856
 1247 0124 FFF7FEFF 		bl	memcmp
 1248              	.LVL126:
 401:csidh.c       ****         {
 1249              		.loc 1 401 12 view .LVU320
 1250 0128 10B3     		cbz	r0, .L50
 403:csidh.c       ****         }
 1251              		.loc 1 403 13 is_stmt 1 view .LVU321
 1252 012a D6AA     		add	r2, sp, #856
 1253 012c 96A9     		add	r1, sp, #600
 1254 012e 76A8     		add	r0, sp, #472
 1255 0130 FFF7FEFF 		bl	elligator
 1256              	.LVL127:
 1257              	.L51:
 424:csidh.c       **** 
 1258              		.loc 1 424 9 view .LVU322
 424:csidh.c       **** 
 1259              		.loc 1 424 26 is_stmt 0 view .LVU323
 1260 0134 F6AB     		add	r3, sp, #984
 424:csidh.c       **** 
 1261              		.loc 1 424 9 view .LVU324
 1262 0136 76AA     		add	r2, sp, #472
 424:csidh.c       **** 
 1263              		.loc 1 424 26 view .LVU325
 1264 0138 03EB8517 		add	r7, r3, r5, lsl #6
 424:csidh.c       **** 
 1265              		.loc 1 424 9 view .LVU326
 1266 013c 1046     		mov	r0, r2
 1267 013e 3B46     		mov	r3, r7
 1268 0140 D6A9     		add	r1, sp, #856
 1269 0142 FFF7FEFF 		bl	xMUL
 1270              	.LVL128:
 426:csidh.c       **** 
 1271              		.loc 1 426 9 is_stmt 1 view .LVU327
 1272 0146 96AA     		add	r2, sp, #600
 1273 0148 3B46     		mov	r3, r7
 1274 014a D6A9     		add	r1, sp, #856
 1275 014c 1046     		mov	r0, r2
 1276 014e FFF7FEFF 		bl	xMUL
 1277              	.LVL129:
 440:csidh.c       **** #endif
 1278              		.loc 1 440 9 view .LVU328
 449:csidh.c       ****         {
 1279              		.loc 1 449 9 view .LVU329
 1280              	.LBB27:
 449:csidh.c       ****         {
 1281              		.loc 1 449 14 view .LVU330
 449:csidh.c       ****         {
 1282              		.loc 1 449 22 is_stmt 0 view .LVU331
 1283 0152 ECB2     		uxtb	r4, r5
 1284              	.LVL130:
 449:csidh.c       ****         {
 1285              		.loc 1 449 22 view .LVU332
 1286              	.LBE27:
 440:csidh.c       **** #endif
 1287              		.loc 1 440 12 view .LVU333
 1288 0154 4FF0010A 		mov	r10, #1
 1289              	.LVL131:
 1290              	.L52:
 1291              	.LBB32:
 449:csidh.c       ****         {
 1292              		.loc 1 449 31 is_stmt 1 discriminator 1 view .LVU334
 1293 0158 492C     		cmp	r4, #73
 1294 015a 37D9     		bls	.L61
 449:csidh.c       ****         {
 1295              		.loc 1 449 31 is_stmt 0 discriminator 1 view .LVU335
 1296              	.LBE32:
 635:csidh.c       ****         fp_mul2(&A.x, &A.z);
 1297              		.loc 1 635 9 is_stmt 1 view .LVU336
 1298 015c E6A8     		add	r0, sp, #920
 1299 015e FFF7FEFF 		bl	fp_inv
 1300              	.LVL132:
 636:csidh.c       ****         A.z = fp_1;
 1301              		.loc 1 636 9 view .LVU337
 1302 0162 E6A9     		add	r1, sp, #920
 1303 0164 D6A8     		add	r0, sp, #856
 1304 0166 FFF7FEFF 		bl	fp_mul2
 1305              	.LVL133:
 637:csidh.c       **** #endif
 1306              		.loc 1 637 9 view .LVU338
 639:csidh.c       ****     }
 1307              		.loc 1 639 9 view .LVU339
 639:csidh.c       ****     }
 1308              		.loc 1 639 9 is_stmt 0 view .LVU340
 1309 016a 09F10109 		add	r9, r9, #1
 1310              	.LVL134:
 639:csidh.c       ****     }
 1311              		.loc 1 639 9 view .LVU341
 1312 016e 8AE7     		b	.L46
 1313              	.LVL135:
 1314              	.L50:
 407:csidh.c       ****             fp_sub3(&Pd.x, &fp_0, &P.x);
 1315              		.loc 1 407 13 is_stmt 1 view .LVU342
 1316 0170 0CA9     		add	r1, sp, #48
 1317 0172 76A8     		add	r0, sp, #472
 409:csidh.c       ****             Pd.z = fp_1;
 1318              		.loc 1 409 18 is_stmt 0 view .LVU343
 1319 0174 5E4C     		ldr	r4, .L67+8
 407:csidh.c       ****             fp_sub3(&Pd.x, &fp_0, &P.x);
 1320              		.loc 1 407 13 view .LVU344
 1321 0176 FFF7FEFF 		bl	fp_enc
 1322              	.LVL136:
 408:csidh.c       ****             P.z  = fp_1;
 1323              		.loc 1 408 13 is_stmt 1 view .LVU345
 1324 017a 5F49     		ldr	r1, .L67+16
 1325 017c 76AA     		add	r2, sp, #472
 1326 017e 96A8     		add	r0, sp, #600
 1327 0180 FFF7FEFF 		bl	fp_sub3
 1328              	.LVL137:
 409:csidh.c       ****             Pd.z = fp_1;
 1329              		.loc 1 409 13 view .LVU346
 409:csidh.c       ****             Pd.z = fp_1;
 1330              		.loc 1 409 18 is_stmt 0 view .LVU347
 1331 0184 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1332 0186 0DF5067C 		add	ip, sp, #536
 1333 018a ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1334 018e 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1335 0190 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1336 0194 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1337 0196 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1338 019a 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 410:csidh.c       ****         }
 1339              		.loc 1 410 18 view .LVU348
 1340 019e A4F1300E 		sub	lr, r4, #48
 409:csidh.c       ****             Pd.z = fp_1;
 1341              		.loc 1 409 18 view .LVU349
 1342 01a2 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 410:csidh.c       ****         }
 1343              		.loc 1 410 13 is_stmt 1 view .LVU350
 410:csidh.c       ****         }
 1344              		.loc 1 410 18 is_stmt 0 view .LVU351
 1345 01a6 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1346 01aa 0DF5267C 		add	ip, sp, #664
 1347 01ae ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1348 01b2 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1349 01b6 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1350 01ba BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1351 01be ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1352 01c2 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 1353 01c6 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 1354 01ca B3E7     		b	.L51
 1355              	.LVL138:
 1356              	.L61:
 1357              	.LBB33:
 462:csidh.c       ****             { //depends only on randomness
 1358              		.loc 1 462 13 is_stmt 1 view .LVU352
 1359              	.LBB28:
 473:csidh.c       ****                 {
 1360              		.loc 1 473 30 is_stmt 0 view .LVU353
 1361 01cc 3319     		adds	r3, r6, r4
 1362              	.LBE28:
 462:csidh.c       ****             { //depends only on randomness
 1363              		.loc 1 462 25 view .LVU354
 1364 01ce 0DF1F40B 		add	fp, sp, #244
 1365              	.LBB29:
 473:csidh.c       ****                 {
 1366              		.loc 1 473 30 view .LVU355
 1367 01d2 DBB2     		uxtb	r3, r3
 1368 01d4 0693     		str	r3, [sp, #24]
 1369              	.LBE29:
 462:csidh.c       ****             { //depends only on randomness
 1370              		.loc 1 462 16 view .LVU356
 1371 01d6 1BF80430 		ldrb	r3, [fp, r4]	@ zero_extendqisi2
 1372 01da 002B     		cmp	r3, #0
 1373 01dc 40F08280 		bne	.L53
 472:csidh.c       ****                 for (uint8_t j = i + num_batches; j < NUM_PRIMES; j = j + num_batches)
 1374              		.loc 1 472 17 is_stmt 1 view .LVU357
 472:csidh.c       ****                 for (uint8_t j = i + num_batches; j < NUM_PRIMES; j = j + num_batches)
 1375              		.loc 1 472 21 is_stmt 0 view .LVU358
 1376 01e0 DFF818E1 		ldr	lr, .L67+20
 1377 01e4 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1378 01e8 0DF1700C 		add	ip, sp, #112
 1379 01ec ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1380 01f0 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1381 01f4 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1382 01f8 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1383 01fc ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1384 0200 9EE80F00 		ldm	lr, {r0, r1, r2, r3}
 1385 0204 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 473:csidh.c       ****                 {
 1386              		.loc 1 473 17 is_stmt 1 view .LVU359
 1387              	.LBB30:
 473:csidh.c       ****                 {
 1388              		.loc 1 473 22 view .LVU360
 473:csidh.c       ****                 {
 1389              		.loc 1 473 30 is_stmt 0 view .LVU361
 1390 0208 DDF81880 		ldr	r8, [sp, #24]
 1391              	.L54:
 1392              	.LVL139:
 473:csidh.c       ****                 {
 1393              		.loc 1 473 53 is_stmt 1 discriminator 1 view .LVU362
 1394 020c B8F1490F 		cmp	r8, #73
 1395 0210 76D9     		bls	.L56
 1396              	.LBE30:
 479:csidh.c       **** 
 1397              		.loc 1 479 17 view .LVU363
 479:csidh.c       **** 
 1398              		.loc 1 479 22 is_stmt 0 view .LVU364
 1399 0212 50A9     		add	r1, sp, #320
 1400 0214 2046     		mov	r0, r4
 1401 0216 FFF7FEFF 		bl	lookup
 1402              	.LVL140:
 483:csidh.c       ****                 ss = !isequal(s, ps);
 1403              		.loc 1 483 21 view .LVU365
 1404 021a C3B2     		uxtb	r3, r0
 1405 021c 0793     		str	r3, [sp, #28]
 483:csidh.c       ****                 ss = !isequal(s, ps);
 1406              		.loc 1 483 19 view .LVU366
 1407 021e C0F3C013 		ubfx	r3, r0, #7, #1
 484:csidh.c       **** 
 1408              		.loc 1 484 23 view .LVU367
 1409 0222 5146     		mov	r1, r10
 479:csidh.c       **** 
 1410              		.loc 1 479 22 view .LVU368
 1411 0224 8046     		mov	r8, r0
 1412              	.LVL141:
 481:csidh.c       **** 
 1413              		.loc 1 481 17 is_stmt 1 view .LVU369
 483:csidh.c       ****                 ss = !isequal(s, ps);
 1414              		.loc 1 483 17 view .LVU370
 484:csidh.c       **** 
 1415              		.loc 1 484 23 is_stmt 0 view .LVU371
 1416 0226 1846     		mov	r0, r3
 1417              	.LVL142:
 483:csidh.c       ****                 ss = !isequal(s, ps);
 1418              		.loc 1 483 19 view .LVU372
 1419 0228 0593     		str	r3, [sp, #20]
 1420              	.LVL143:
 484:csidh.c       **** 
 1421              		.loc 1 484 17 is_stmt 1 view .LVU373
 484:csidh.c       **** 
 1422              		.loc 1 484 23 is_stmt 0 view .LVU374
 1423 022a FFF7FEFF 		bl	isequal
 1424              	.LVL144:
 484:csidh.c       **** 
 1425              		.loc 1 484 22 view .LVU375
 1426 022e B0FA80FA 		clz	r10, r0
 1427              	.LVL145:
 484:csidh.c       **** 
 1428              		.loc 1 484 22 view .LVU376
 1429 0232 4FEA5A1A 		lsr	r10, r10, #5
 1430              	.LVL146:
 496:csidh.c       **** 
 1431              		.loc 1 496 17 is_stmt 1 view .LVU377
 509:csidh.c       **** 
 1432              		.loc 1 509 17 view .LVU378
 1433 0236 5246     		mov	r2, r10
 1434 0238 96A9     		add	r1, sp, #600
 1435 023a 76A8     		add	r0, sp, #472
 1436 023c FFF7FEFF 		bl	fp_cswap
 1437              	.LVL147:
 511:csidh.c       **** 
 1438              		.loc 1 511 17 view .LVU379
 1439 0240 5246     		mov	r2, r10
 1440 0242 A6A9     		add	r1, sp, #664
 1441 0244 86A8     		add	r0, sp, #536
 1442 0246 FFF7FEFF 		bl	fp_cswap
 1443              	.LVL148:
 513:csidh.c       **** 
 1444              		.loc 1 513 17 view .LVU380
 1445 024a D6A9     		add	r1, sp, #856
 1446 024c 1CAB     		add	r3, sp, #112
 1447 024e 76AA     		add	r2, sp, #472
 1448 0250 B6A8     		add	r0, sp, #728
 1449 0252 FFF7FEFF 		bl	xMUL
 1450              	.LVL149:
 515:csidh.c       ****                 xMUL(&Pd, &A, &Pd, &l);
 1451              		.loc 1 515 17 view .LVU381
 1452 0256 274B     		ldr	r3, .L67+12
 1453 0258 53F824A0 		ldr	r10, [r3, r4, lsl #2]
 1454              	.LVL150:
 515:csidh.c       ****                 xMUL(&Pd, &A, &Pd, &l);
 1455              		.loc 1 515 17 is_stmt 0 view .LVU382
 1456 025c 4FF0000B 		mov	fp, #0
 1457 0260 5246     		mov	r2, r10
 1458 0262 5B46     		mov	r3, fp
 1459 0264 2CA8     		add	r0, sp, #176
 1460 0266 FFF7FEFF 		bl	uint_set
 1461              	.LVL151:
 516:csidh.c       **** 
 1462              		.loc 1 516 17 is_stmt 1 view .LVU383
 1463 026a 96AA     		add	r2, sp, #600
 1464 026c 1046     		mov	r0, r2
 1465 026e D6A9     		add	r1, sp, #856
 1466 0270 2CAB     		add	r3, sp, #176
 1467 0272 FFF7FEFF 		bl	xMUL
 1468              	.LVL152:
 523:csidh.c       ****                 { //depends only on randomness
 1469              		.loc 1 523 17 view .LVU384
 523:csidh.c       ****                 { //depends only on randomness
 1470              		.loc 1 523 21 is_stmt 0 view .LVU385
 1471 0276 2049     		ldr	r1, .L67+16
 1472 0278 4022     		movs	r2, #64
 1473 027a C6A8     		add	r0, sp, #792
 1474 027c FFF7FEFF 		bl	memcmp
 1475              	.LVL153:
 523:csidh.c       ****                 { //depends only on randomness
 1476              		.loc 1 523 20 view .LVU386
 1477 0280 18B3     		cbz	r0, .L57
 481:csidh.c       **** 
 1478              		.loc 1 481 22 view .LVU387
 1479 0282 4FFA88F0 		sxtb	r0, r8
 1480 0286 5946     		mov	r1, fp
 1481 0288 FFF7FEFF 		bl	isequal
 1482              	.LVL154:
 549:csidh.c       ****                     {
 1483              		.loc 1 549 38 view .LVU388
 1484 028c 0BAA     		add	r2, sp, #44
 481:csidh.c       **** 
 1485              		.loc 1 481 22 view .LVU389
 1486 028e 8046     		mov	r8, r0
 549:csidh.c       ****                     {
 1487              		.loc 1 549 21 is_stmt 1 view .LVU390
 549:csidh.c       ****                     {
 1488              		.loc 1 549 24 is_stmt 0 view .LVU391
 1489 0290 525D     		ldrb	r2, [r2, r5]	@ zero_extendqisi2
 1490 0292 A242     		cmp	r2, r4
 565:csidh.c       **** #ifdef DBG
 1491              		.loc 1 565 25 view .LVU392
 1492 0294 C3B2     		uxtb	r3, r0
 549:csidh.c       ****                     {
 1493              		.loc 1 549 24 view .LVU393
 1494 0296 41D1     		bne	.L58
 565:csidh.c       **** #ifdef DBG
 1495              		.loc 1 565 25 is_stmt 1 view .LVU394
 1496 0298 0093     		str	r3, [sp]
 1497 029a 5246     		mov	r2, r10
 1498 029c 5B46     		mov	r3, fp
 1499 029e B6A9     		add	r1, sp, #728
 1500 02a0 D6A8     		add	r0, sp, #856
 1501 02a2 FFF7FEFF 		bl	lastxISOG
 1502              	.LVL155:
 1503              	.L59:
 610:csidh.c       **** #ifdef CM
 1504              		.loc 1 610 21 view .LVU395
 610:csidh.c       **** #ifdef CM
 1505              		.loc 1 610 42 is_stmt 0 view .LVU396
 1506 02a6 059A     		ldr	r2, [sp, #20]
 1507 02a8 079B     		ldr	r3, [sp, #28]
 610:csidh.c       **** #ifdef CM
 1508              		.loc 1 610 31 view .LVU397
 1509 02aa 88F00108 		eor	r8, r8, #1
 610:csidh.c       **** #ifdef CM
 1510              		.loc 1 610 42 view .LVU398
 1511 02ae 03EB4203 		add	r3, r3, r2, lsl #1
 1512 02b2 A3EB0808 		sub	r8, r3, r8
 615:csidh.c       ****                     isog_counter = isog_counter + 1;
 1513              		.loc 1 615 32 view .LVU399
 1514 02b6 63AA     		add	r2, sp, #396
 610:csidh.c       **** #ifdef CM
 1515              		.loc 1 610 26 view .LVU400
 1516 02b8 50AB     		add	r3, sp, #320
 1517 02ba 03F80480 		strb	r8, [r3, r4]
 615:csidh.c       ****                     isog_counter = isog_counter + 1;
 1518              		.loc 1 615 21 is_stmt 1 view .LVU401
 615:csidh.c       ****                     isog_counter = isog_counter + 1;
 1519              		.loc 1 615 45 is_stmt 0 view .LVU402
 1520 02be 135D     		ldrb	r3, [r2, r4]	@ zero_extendqisi2
 1521 02c0 013B     		subs	r3, r3, #1
 615:csidh.c       ****                     isog_counter = isog_counter + 1;
 1522              		.loc 1 615 32 view .LVU403
 1523 02c2 1355     		strb	r3, [r2, r4]
 616:csidh.c       ****                 }
 1524              		.loc 1 616 21 is_stmt 1 view .LVU404
 616:csidh.c       ****                 }
 1525              		.loc 1 616 34 is_stmt 0 view .LVU405
 1526 02c4 049B     		ldr	r3, [sp, #16]
 1527 02c6 0133     		adds	r3, r3, #1
 1528 02c8 0493     		str	r3, [sp, #16]
 1529              	.LVL156:
 1530              	.L57:
 620:csidh.c       ****             { //depends only on randomness
 1531              		.loc 1 620 13 is_stmt 1 view .LVU406
 620:csidh.c       ****             { //depends only on randomness
 1532              		.loc 1 620 24 is_stmt 0 view .LVU407
 1533 02ca 63AB     		add	r3, sp, #396
 620:csidh.c       ****             { //depends only on randomness
 1534              		.loc 1 620 16 view .LVU408
 1535 02cc 1B57     		ldrsb	r3, [r3, r4]
 1536 02ce 3BB9     		cbnz	r3, .L60
 622:csidh.c       ****                 uint_mul3_64(&k[m], &k[m], primes[i]);
 1537              		.loc 1 622 17 is_stmt 1 view .LVU409
 622:csidh.c       ****                 uint_mul3_64(&k[m], &k[m], primes[i]);
 1538              		.loc 1 622 29 is_stmt 0 view .LVU410
 1539 02d0 3DAA     		add	r2, sp, #244
 1540 02d2 0121     		movs	r1, #1
 1541 02d4 1155     		strb	r1, [r2, r4]
 623:csidh.c       ****             }
 1542              		.loc 1 623 17 is_stmt 1 view .LVU411
 1543 02d6 3846     		mov	r0, r7
 1544 02d8 5246     		mov	r2, r10
 1545 02da 3946     		mov	r1, r7
 1546 02dc FFF7FEFF 		bl	uint_mul3_64
 1547              	.LVL157:
 1548              	.L60:
 483:csidh.c       ****                 ss = !isequal(s, ps);
 1549              		.loc 1 483 19 is_stmt 0 view .LVU412
 1550 02e0 9DF914A0 		ldrsb	r10, [sp, #20]
 1551              	.LVL158:
 1552              	.L53:
 449:csidh.c       ****         {
 1553              		.loc 1 449 47 is_stmt 1 discriminator 2 view .LVU413
 449:csidh.c       ****         {
 1554              		.loc 1 449 47 is_stmt 0 discriminator 2 view .LVU414
 1555              	.LBE33:
 440:csidh.c       **** #endif
 1556              		.loc 1 440 12 discriminator 2 view .LVU415
 1557 02e4 069C     		ldr	r4, [sp, #24]
 1558 02e6 37E7     		b	.L52
 1559              	.L68:
 1560              		.align	2
 1561              	.L67:
 1562 02e8 D8000000 		.word	.LANCHOR0+216
 1563 02ec 18000000 		.word	.LANCHOR0+24
 1564 02f0 00000000 		.word	fp_1
 1565 02f4 00000000 		.word	primes
 1566 02f8 00000000 		.word	fp_0
 1567 02fc 00000000 		.word	uint_1
 1568              	.LVL159:
 1569              	.L56:
 1570              	.LBB34:
 1571              	.LBB31:
 475:csidh.c       ****                         uint_mul3_64(&cof, &cof, primes[j]);
 1572              		.loc 1 475 21 is_stmt 1 view .LVU416
 475:csidh.c       ****                         uint_mul3_64(&cof, &cof, primes[j]);
 1573              		.loc 1 475 24 is_stmt 0 view .LVU417
 1574 0300 1BF80830 		ldrb	r3, [fp, r8]	@ zero_extendqisi2
 1575 0304 33B9     		cbnz	r3, .L55
 476:csidh.c       ****                 }
 1576              		.loc 1 476 25 is_stmt 1 view .LVU418
 1577 0306 0A4A     		ldr	r2, .L69
 1578 0308 1CA9     		add	r1, sp, #112
 1579 030a 52F82820 		ldr	r2, [r2, r8, lsl #2]
 1580 030e 0846     		mov	r0, r1
 1581 0310 FFF7FEFF 		bl	uint_mul3_64
 1582              	.LVL160:
 1583              	.L55:
 473:csidh.c       ****                 {
 1584              		.loc 1 473 69 discriminator 2 view .LVU419
 1585 0314 B044     		add	r8, r8, r6
 1586              	.LVL161:
 473:csidh.c       ****                 {
 1587              		.loc 1 473 69 is_stmt 0 discriminator 2 view .LVU420
 1588 0316 5FFA88F8 		uxtb	r8, r8
 1589              	.LVL162:
 473:csidh.c       ****                 {
 1590              		.loc 1 473 69 discriminator 2 view .LVU421
 1591 031a 77E7     		b	.L54
 1592              	.LVL163:
 1593              	.L58:
 473:csidh.c       ****                 {
 1594              		.loc 1 473 69 discriminator 2 view .LVU422
 1595              	.LBE31:
 597:csidh.c       **** #ifdef DBG
 1596              		.loc 1 597 25 is_stmt 1 view .LVU423
 1597 031c 0293     		str	r3, [sp, #8]
 1598 031e CDE900AB 		strd	r10, fp, [sp]
 1599 0322 B6AB     		add	r3, sp, #728
 1600 0324 96AA     		add	r2, sp, #600
 1601 0326 76A9     		add	r1, sp, #472
 1602 0328 D6A8     		add	r0, sp, #856
 1603 032a FFF7FEFF 		bl	xISOG
 1604              	.LVL164:
 1605 032e BAE7     		b	.L59
 1606              	.L70:
 1607              		.align	2
 1608              	.L69:
 1609 0330 00000000 		.word	primes
 1610              	.LBE34:
 1611              		.cfi_endproc
 1612              	.LFE11:
 1614              		.section	.text.csidh,"ax",%progbits
 1615              		.align	1
 1616              		.global	csidh
 1617              		.syntax unified
 1618              		.thumb
 1619              		.thumb_func
 1621              	csidh:
 1622              	.LVL165:
 1623              	.LFB12:
 665:csidh.c       **** 
 666:csidh.c       **** #ifdef CM
 667:csidh.c       **** bool validate_cheaper(const public_key *in)
 668:csidh.c       **** {
 669:csidh.c       ****     const proj A = {in->A, fp_1};
 670:csidh.c       ****     #if defined(DETERMINISTIC)
 671:csidh.c       ****     proj P = {{{0x9b9499cf4466e265, 0x1890b03f447fc2c2, 0x59200afefa8db817, 0x9d45d54e769e45a7, 0x9
 672:csidh.c       ****     #else
 673:csidh.c       ****      proj P;
 674:csidh.c       ****      fp_random(&P.x);
 675:csidh.c       ****      P.z = fp_1;
 676:csidh.c       ****     #endif
 677:csidh.c       **** 
 678:csidh.c       ****     xMUL(&P, &A, &P, &p_plus_one);
 679:csidh.c       ****     return fp_cmp_ct(&P.z, &fp_0);
 680:csidh.c       **** }
 681:csidh.c       **** #endif
 682:csidh.c       **** 
 683:csidh.c       **** /* includes public-key validation. */
 684:csidh.c       **** bool csidh(public_key *out, public_key const *in, private_key const *priv,
 685:csidh.c       ****            uint8_t const num_batches, int8_t const *max_exponent, unsigned int const num_isogenies,
 686:csidh.c       **** {
 1624              		.loc 1 686 1 view -0
 1625              		.cfi_startproc
 1626              		@ args = 12, pretend = 0, frame = 0
 1627              		@ frame_needed = 0, uses_anonymous_args = 0
 1628              		@ link register save eliminated.
 687:csidh.c       ****     int8_t error;
 1629              		.loc 1 687 5 view .LVU425
 688:csidh.c       ****     /*
 689:csidh.c       **** 	if (!validate(in)) {
 690:csidh.c       **** 		fp_random(&out->A);
 691:csidh.c       **** 		return false;
 692:csidh.c       **** 	}
 693:csidh.c       ****     */
 694:csidh.c       ****     error = action(out, in, priv, num_batches, max_exponent, num_isogenies, my);
 1630              		.loc 1 694 5 view .LVU426
 686:csidh.c       ****     int8_t error;
 1631              		.loc 1 686 1 is_stmt 0 view .LVU427
 1632 0000 10B4     		push	{r4}
 1633              	.LCFI23:
 1634              		.cfi_def_cfa_offset 4
 1635              		.cfi_offset 4, -4
 686:csidh.c       ****     int8_t error;
 1636              		.loc 1 686 1 view .LVU428
 1637 0002 9DF80C40 		ldrb	r4, [sp, #12]	@ zero_extendqisi2
 1638              		.loc 1 694 13 view .LVU429
 1639 0006 0394     		str	r4, [sp, #12]
 1640              	.LVL166:
 695:csidh.c       **** #ifdef CM
 696:csidh.c       ****     fpcmov(&out->A, &fp_0, error);
 697:csidh.c       **** #endif
 698:csidh.c       **** 
 699:csidh.c       ****     return error;
 700:csidh.c       **** }
 1641              		.loc 1 700 1 view .LVU430
 1642 0008 10BC     		pop	{r4}
 1643              	.LCFI24:
 1644              		.cfi_restore 4
 1645              		.cfi_def_cfa_offset 0
 1646              	.LVL167:
 694:csidh.c       **** #ifdef CM
 1647              		.loc 1 694 13 view .LVU431
 1648 000a FFF7FEBF 		b	action
 1649              	.LVL168:
 694:csidh.c       **** #ifdef CM
 1650              		.loc 1 694 13 view .LVU432
 1651              		.cfi_endproc
 1652              	.LFE12:
 1654              		.global	base
 1655              		.section	.rodata
 1656              		.align	3
 1657              		.set	.LANCHOR0,. + 0
 1660              	__func__.0:
 1661 0000 636F6661 		.ascii	"cofactor_multiples\000"
 1661      63746F72 
 1661      5F6D756C 
 1661      7469706C 
 1661      657300
 1662 0013 00000000 		.space	5
 1662      00
 1663              	.LC0:
 1664 0018 5C008D62 		.word	1653407836
 1665 001c AF33591B 		.word	458830767
 1666 0020 567F7B1D 		.word	494632790
 1667 0024 2BF04A9D 		.word	-1656033237
 1668 0028 2A269250 		.word	1351755306
 1669 002c 43A87789 		.word	-1988646845
 1670 0030 A27CA354 		.word	1420000418
 1671 0034 FF0263B8 		.word	-1201470721
 1672 0038 95D004AF 		.word	-1358638955
 1673 003c B29DE0D6 		.word	-689922638
 1674 0040 3FC70500 		.word	378687
 1675 0044 00000000 		.word	0
 1676 0048 00000000 		.word	0
 1677 004c 00000000 		.word	0
 1678 0050 00000000 		.word	0
 1679 0054 00000000 		.word	0
 1680 0058 1CBEF6C6 		.word	-956908004
 1681 005c 6B8B7BD9 		.word	-646214805
 1682 0060 48E4A64E 		.word	1319560264
 1683 0064 C4725831 		.word	827880132
 1684 0068 860C38FD 		.word	-46658426
 1685 006c 547CAE1A 		.word	447642708
 1686 0070 A254A42D 		.word	765744290
 1687 0074 CFC47E23 		.word	595510479
 1688 0078 B4A1FED9 		.word	-637623884
 1689 007c E3F93337 		.word	926153187
 1690 0080 0EDC1F00 		.word	2087950
 1691 0084 00000000 		.word	0
 1692 0088 00000000 		.word	0
 1693 008c 00000000 		.word	0
 1694 0090 00000000 		.word	0
 1695 0094 00000000 		.word	0
 1696 0098 849A1602 		.word	35035780
 1697 009c 7BA99E62 		.word	1654565243
 1698 00a0 228DD412 		.word	315919650
 1699 00a4 6A61B9C4 		.word	-994483862
 1700 00a8 5AB4D78A 		.word	-1965575078
 1701 00ac 27102A49 		.word	1227493415
 1702 00b0 F8875BE5 		.word	-446986248
 1703 00b4 DCC44AC4 		.word	-1001732900
 1704 00b8 6E2D6386 		.word	-2040320658
 1705 00bc 6887129E 		.word	-1642952856
 1706 00c0 C5C0E000 		.word	14729413
 1707 00c4 00000000 		.word	0
 1708 00c8 00000000 		.word	0
 1709 00cc 00000000 		.word	0
 1710 00d0 00000000 		.word	0
 1711 00d4 00000000 		.word	0
 1712              	.LC1:
 1713 00d8 23936B19 		.word	426480419
 1714 00dc 2C3B4024 		.word	608189228
 1715 00e0 08C22317 		.word	388219400
 1716 00e4 A359878A 		.word	-1970841181
 1717 00e8 2B993739 		.word	959945003
 1718 00ec 543AA9B4 		.word	-1263977900
 1719 00f0 73B77EDC 		.word	-595675277
 1720 00f4 91F7D1CD 		.word	-841877615
 1721 00f8 3B82D76F 		.word	1876394555
 1722 00fc D30B47FF 		.word	-12121133
 1723 0100 0934559D 		.word	-1655360503
 1724 0104 C31FCFFB 		.word	-70311997
 1725 0108 5CBE97D6 		.word	-694698404
 1726 010c 8DA77894 		.word	-1804032115
 1727 0110 1618250F 		.word	254089238
 1728 0114 FBB5D90E 		.word	249148923
 1731              	base:
 1732 0118 00000000 		.space	64
 1732      00000000 
 1732      00000000 
 1732      00000000 
 1732      00000000 
 1733              		.text
 1734              	.Letext0:
 1735              		.file 2 "/nix/store/ys6f5rkagvk7j6mawa5fiakglv1568hl-gcc-arm-embedded-12.2.rel1/lib/gcc/arm-none-e
 1736              		.file 3 "/nix/store/ys6f5rkagvk7j6mawa5fiakglv1568hl-gcc-arm-embedded-12.2.rel1/arm-none-eabi/incl
 1737              		.file 4 "/nix/store/ys6f5rkagvk7j6mawa5fiakglv1568hl-gcc-arm-embedded-12.2.rel1/arm-none-eabi/incl
 1738              		.file 5 "parametrization.h"
 1739              		.file 6 "uint.h"
 1740              		.file 7 "csidh.h"
 1741              		.file 8 "mont.h"
 1742              		.file 9 "fp.h"
 1743              		.file 10 "/nix/store/ys6f5rkagvk7j6mawa5fiakglv1568hl-gcc-arm-embedded-12.2.rel1/arm-none-eabi/inc
 1744              		.file 11 "/nix/store/ys6f5rkagvk7j6mawa5fiakglv1568hl-gcc-arm-embedded-12.2.rel1/arm-none-eabi/inc
 1745              		.file 12 "randombytes.h"
 1746              		.file 13 "./hal/stm32f3/stm32f3_hal.h"
 1747              		.file 14 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 csidh.c
     /tmp/ccNX0NpW.s:24     .text.cofactor_multiples:0000000000000000 $t
     /tmp/ccNX0NpW.s:29     .text.cofactor_multiples:0000000000000000 cofactor_multiples
     /tmp/ccNX0NpW.s:225    .text.cofactor_multiples:00000000000000d4 $d
     /tmp/ccNX0NpW.s:235    .text.uart_puts:0000000000000000 $t
     /tmp/ccNX0NpW.s:241    .text.uart_puts:0000000000000000 uart_puts
     /tmp/ccNX0NpW.s:276    .text.isequal:0000000000000000 $t
     /tmp/ccNX0NpW.s:282    .text.isequal:0000000000000000 isequal
     /tmp/ccNX0NpW.s:328    .text.cmov:0000000000000000 $t
     /tmp/ccNX0NpW.s:334    .text.cmov:0000000000000000 cmov
     /tmp/ccNX0NpW.s:376    .text.lookup:0000000000000000 $t
     /tmp/ccNX0NpW.s:382    .text.lookup:0000000000000000 lookup
     /tmp/ccNX0NpW.s:455    .text.csidh_private:0000000000000000 $t
     /tmp/ccNX0NpW.s:461    .text.csidh_private:0000000000000000 csidh_private
     /tmp/ccNX0NpW.s:572    .text.validate:0000000000000000 $t
     /tmp/ccNX0NpW.s:578    .text.validate:0000000000000000 validate
     /tmp/ccNX0NpW.s:803    .text.validate:0000000000000104 $d
     /tmp/ccNX0NpW.s:814    .text.elligator:0000000000000000 $t
     /tmp/ccNX0NpW.s:820    .text.elligator:0000000000000000 elligator
     /tmp/ccNX0NpW.s:984    .text.elligator:00000000000000d0 $d
     /tmp/ccNX0NpW.s:989    .text.action:0000000000000000 $t
     /tmp/ccNX0NpW.s:995    .text.action:0000000000000000 action
     /tmp/ccNX0NpW.s:1562   .text.action:00000000000002e8 $d
     /tmp/ccNX0NpW.s:1574   .text.action:0000000000000300 $t
     /tmp/ccNX0NpW.s:1609   .text.action:0000000000000330 $d
     /tmp/ccNX0NpW.s:1615   .text.csidh:0000000000000000 $t
     /tmp/ccNX0NpW.s:1621   .text.csidh:0000000000000000 csidh
     /tmp/ccNX0NpW.s:1731   .rodata:0000000000000118 base
     /tmp/ccNX0NpW.s:1656   .rodata:0000000000000000 $d
     /tmp/ccNX0NpW.s:1660   .rodata:0000000000000000 __func__.0

UNDEFINED SYMBOLS
__assert_func
xMUL
uint_mul3_64
uint_1
primes
putch
memset
randombytes
fp_random
xDBL
memcmp
uint_set
uint_sub3
fp_1
fp_0
four_sqrt_p
fp_sq1
fp_sub3
fp_sq2
fp_mul2
fp_add2
fp_set
fp_sub2
fp_issquare
fp_cswap
memcpy
fp_inv
fp_enc
lastxISOG
xISOG
