   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"fp.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "fp.c"
  18              		.section	.text.reduce_once,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	reduce_once:
  25              	.LVL0:
  26              	.LFB1:
   1:fp.c          **** 
   2:fp.c          **** #include <stddef.h>
   3:fp.c          **** #include <string.h>
   4:fp.c          **** 
   5:fp.c          **** #include "parametrization.h"
   6:fp.c          **** #include "uint.h"
   7:fp.c          **** #include "fp.h"
   8:fp.c          **** #include "randombytes.h"
   9:fp.c          **** 
  10:fp.c          **** #ifdef CM
  11:fp.c          **** void fpcmov(fp *dst, const fp *src, uint8_t b)
  12:fp.c          **** {
  13:fp.c          ****     b = -b;
  14:fp.c          ****     uint8_t *s = (uint8_t *)src;
  15:fp.c          ****     uint8_t *d = (uint8_t *)dst;
  16:fp.c          ****     for (size_t ii = 0; ii < sizeof(fp); ii++)
  17:fp.c          ****     {
  18:fp.c          ****         d[ii] ^= b & (d[ii] ^ s[ii]);
  19:fp.c          ****     }
  20:fp.c          **** }
  21:fp.c          **** 
  22:fp.c          **** bool fp_cmp_ct(const fp *n1, const fp *n2)
  23:fp.c          **** {
  24:fp.c          **** 
  25:fp.c          ****     const uint8_t *s1 = (const uint8_t *)n1;
  26:fp.c          ****     const uint8_t *s2 = (const uint8_t *)n2;
  27:fp.c          **** 
  28:fp.c          ****     uint8_t ret = 0;
  29:fp.c          ****     for (size_t i = 0; i < sizeof(fp); i++)
  30:fp.c          ****     {
  31:fp.c          ****         ret |= s1[i] ^ s2[i];
  32:fp.c          ****     }
  33:fp.c          ****     return (bool)ret;
  34:fp.c          **** }
  35:fp.c          **** 
  36:fp.c          **** // conditional set if(m>0) x = z else x = 0
  37:fp.c          **** void fp_cset(fp *x, const fp *z, uint64_t m)
  38:fp.c          **** {
  39:fp.c          ****     m = -m; /* Now m is either 0 or 0xffffffff */
  40:fp.c          ****     for (int i = 0; i < 8; ++i)
  41:fp.c          ****     {
  42:fp.c          ****         x->c[i] = z->c[i] & m;
  43:fp.c          ****     }
  44:fp.c          **** }
  45:fp.c          **** 
  46:fp.c          **** // conditional add 2C <- add(b .C, b. C)
  47:fp.c          **** void fp_cadd2(fp *x, const fp *y, const fp *z, uint64_t m)
  48:fp.c          **** {
  49:fp.c          ****     fp tmp0, tmp1;
  50:fp.c          ****     fp_cset(&tmp0, z, m);
  51:fp.c          ****     fp_cset(&tmp1, y, m);
  52:fp.c          ****     fp_add3(x, &tmp0, &tmp1);
  53:fp.c          **** }
  54:fp.c          **** 
  55:fp.c          **** // conditional add x = y + b . Z
  56:fp.c          **** void fp_cadd(fp *x, const fp *y, const fp *z, uint64_t m)
  57:fp.c          **** {
  58:fp.c          ****     fp tmp0;
  59:fp.c          ****     fp_cset(&tmp0, z, m);
  60:fp.c          ****     fp_add3(x, y, &tmp0);
  61:fp.c          **** }
  62:fp.c          **** 
  63:fp.c          **** // conditional sub x = y - b . Z
  64:fp.c          **** void fp_csub(fp *x, const fp *y, const fp *z, uint64_t m)
  65:fp.c          **** {
  66:fp.c          ****     fp tmp0;
  67:fp.c          ****     fp_cset(&tmp0, z, m);
  68:fp.c          ****     fp_sub3(x, y, &tmp0);
  69:fp.c          **** }
  70:fp.c          **** 
  71:fp.c          **** #endif
  72:fp.c          **** 
  73:fp.c          **** void fp_set(fp *x, uint64_t y)
  74:fp.c          **** {
  75:fp.c          ****     uint_set((uint_c *)x, y);
  76:fp.c          ****     fp_enc(x, (uint_c *)x);
  77:fp.c          **** }
  78:fp.c          **** 
  79:fp.c          **** static void reduce_once(uint_c *x)
  80:fp.c          **** {
  27              		.loc 1 80 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 64
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  81:fp.c          ****     uint_c t;
  31              		.loc 1 81 5 view .LVU1
  82:fp.c          ****     if (!uint_sub3(&t, x, &p))
  32              		.loc 1 82 5 view .LVU2
  80:fp.c          ****     uint_c t;
  33              		.loc 1 80 1 is_stmt 0 view .LVU3
  34 0000 30B5     		push	{r4, r5, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 12
  37              		.cfi_offset 4, -12
  38              		.cfi_offset 5, -8
  39              		.cfi_offset 14, -4
  40 0002 91B0     		sub	sp, sp, #68
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 80
  80:fp.c          ****     uint_c t;
  43              		.loc 1 80 1 view .LVU4
  44 0004 0446     		mov	r4, r0
  45              		.loc 1 82 10 view .LVU5
  46 0006 0146     		mov	r1, r0
  47 0008 084A     		ldr	r2, .L3
  48 000a 6846     		mov	r0, sp
  49              	.LVL1:
  50              		.loc 1 82 10 view .LVU6
  51 000c FFF7FEFF 		bl	uint_sub3
  52              	.LVL2:
  53              		.loc 1 82 8 view .LVU7
  54 0010 50B9     		cbnz	r0, .L1
  83:fp.c          ****         *x = t;
  55              		.loc 1 83 9 is_stmt 1 view .LVU8
  56              		.loc 1 83 12 is_stmt 0 view .LVU9
  57 0012 6D46     		mov	r5, sp
  58 0014 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
  59 0016 0FC4     		stmia	r4!, {r0, r1, r2, r3}
  60              	.LVL3:
  61              		.loc 1 83 12 view .LVU10
  62 0018 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
  63 001a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
  64              	.LVL4:
  65              		.loc 1 83 12 view .LVU11
  66 001c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
  67 001e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
  68              	.LVL5:
  69              		.loc 1 83 12 view .LVU12
  70 0020 95E80F00 		ldm	r5, {r0, r1, r2, r3}
  71 0024 84E80F00 		stm	r4, {r0, r1, r2, r3}
  72              	.LVL6:
  73              	.L1:
  84:fp.c          **** }
  74              		.loc 1 84 1 view .LVU13
  75 0028 11B0     		add	sp, sp, #68
  76              	.LCFI2:
  77              		.cfi_def_cfa_offset 12
  78              		@ sp needed
  79 002a 30BD     		pop	{r4, r5, pc}
  80              	.L4:
  81              		.align	2
  82              	.L3:
  83 002c 00000000 		.word	p
  84              		.cfi_endproc
  85              	.LFE1:
  87              		.section	.text.fp_add3,"ax",%progbits
  88              		.align	1
  89              		.global	fp_add3
  90              		.syntax unified
  91              		.thumb
  92              		.thumb_func
  94              	fp_add3:
  95              	.LVL7:
  96              	.LFB2:
  85:fp.c          **** 
  86:fp.c          **** void fp_add3(fp *x, fp const *y, fp const *z)
  87:fp.c          **** {
  97              		.loc 1 87 1 is_stmt 1 view -0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
  88:fp.c          ****     uint_add3((uint_c *)x, (uint_c *)y, (uint_c *)z);
 101              		.loc 1 88 5 view .LVU15
  87:fp.c          ****     uint_add3((uint_c *)x, (uint_c *)y, (uint_c *)z);
 102              		.loc 1 87 1 is_stmt 0 view .LVU16
 103 0000 10B5     		push	{r4, lr}
 104              	.LCFI3:
 105              		.cfi_def_cfa_offset 8
 106              		.cfi_offset 4, -8
 107              		.cfi_offset 14, -4
  87:fp.c          ****     uint_add3((uint_c *)x, (uint_c *)y, (uint_c *)z);
 108              		.loc 1 87 1 view .LVU17
 109 0002 0446     		mov	r4, r0
 110              		.loc 1 88 5 view .LVU18
 111 0004 FFF7FEFF 		bl	uint_add3
 112              	.LVL8:
  89:fp.c          ****     reduce_once((uint_c *)x);
 113              		.loc 1 89 5 is_stmt 1 view .LVU19
 114 0008 2046     		mov	r0, r4
  90:fp.c          **** }
 115              		.loc 1 90 1 is_stmt 0 view .LVU20
 116 000a BDE81040 		pop	{r4, lr}
 117              	.LCFI4:
 118              		.cfi_restore 14
 119              		.cfi_restore 4
 120              		.cfi_def_cfa_offset 0
 121              	.LVL9:
  89:fp.c          ****     reduce_once((uint_c *)x);
 122              		.loc 1 89 5 view .LVU21
 123 000e FFF7FEBF 		b	reduce_once
 124              	.LVL10:
  89:fp.c          ****     reduce_once((uint_c *)x);
 125              		.loc 1 89 5 view .LVU22
 126              		.cfi_endproc
 127              	.LFE2:
 129              		.section	.text.fp_add2,"ax",%progbits
 130              		.align	1
 131              		.global	fp_add2
 132              		.syntax unified
 133              		.thumb
 134              		.thumb_func
 136              	fp_add2:
 137              	.LVL11:
 138              	.LFB3:
  91:fp.c          **** 
  92:fp.c          **** void fp_add2(fp *x, fp const *y)
  93:fp.c          **** {
 139              		.loc 1 93 1 is_stmt 1 view -0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 0
 142              		@ frame_needed = 0, uses_anonymous_args = 0
 143              		@ link register save eliminated.
  94:fp.c          ****     fp_add3(x, x, y);
 144              		.loc 1 94 5 view .LVU24
  93:fp.c          ****     fp_add3(x, x, y);
 145              		.loc 1 93 1 is_stmt 0 view .LVU25
 146 0000 0A46     		mov	r2, r1
 147              		.loc 1 94 5 view .LVU26
 148 0002 0146     		mov	r1, r0
 149              	.LVL12:
 150              		.loc 1 94 5 view .LVU27
 151 0004 FFF7FEBF 		b	fp_add3
 152              	.LVL13:
 153              		.loc 1 94 5 view .LVU28
 154              		.cfi_endproc
 155              	.LFE3:
 157              		.section	.text.fp_sub3,"ax",%progbits
 158              		.align	1
 159              		.global	fp_sub3
 160              		.syntax unified
 161              		.thumb
 162              		.thumb_func
 164              	fp_sub3:
 165              	.LVL14:
 166              	.LFB4:
  95:fp.c          **** }
  96:fp.c          **** 
  97:fp.c          **** void fp_sub3(fp *x, fp const *y, fp const *z)
  98:fp.c          **** {
 167              		.loc 1 98 1 is_stmt 1 view -0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171              		.loc 1 98 1 is_stmt 0 view .LVU30
 172 0000 10B5     		push	{r4, lr}
 173              	.LCFI5:
 174              		.cfi_def_cfa_offset 8
 175              		.cfi_offset 4, -8
 176              		.cfi_offset 14, -4
 177              		.loc 1 98 1 view .LVU31
 178 0002 0446     		mov	r4, r0
  99:fp.c          ****     if (uint_sub3((uint_c *)x, (uint_c *)y, (uint_c *)z))
 179              		.loc 1 99 5 is_stmt 1 view .LVU32
 180              		.loc 1 99 9 is_stmt 0 view .LVU33
 181 0004 FFF7FEFF 		bl	uint_sub3
 182              	.LVL15:
 183              		.loc 1 99 8 view .LVU34
 184 0008 30B1     		cbz	r0, .L7
 185              	.LVL16:
 186              	.LBB4:
 187              	.LBI4:
  97:fp.c          **** {
 188              		.loc 1 97 6 is_stmt 1 view .LVU35
 189              	.LBB5:
 100:fp.c          ****         uint_add3((uint_c *)x, (uint_c *)x, &p);
 190              		.loc 1 100 9 view .LVU36
 191 000a 2146     		mov	r1, r4
 192 000c 2046     		mov	r0, r4
 193 000e 034A     		ldr	r2, .L9
 194              	.LBE5:
 195              	.LBE4:
 101:fp.c          **** }
 196              		.loc 1 101 1 is_stmt 0 view .LVU37
 197 0010 BDE81040 		pop	{r4, lr}
 198              	.LCFI6:
 199              		.cfi_remember_state
 200              		.cfi_restore 14
 201              		.cfi_restore 4
 202              		.cfi_def_cfa_offset 0
 203              	.LVL17:
 204              	.LBB7:
 205              	.LBB6:
 100:fp.c          ****         uint_add3((uint_c *)x, (uint_c *)x, &p);
 206              		.loc 1 100 9 view .LVU38
 207 0014 FFF7FEBF 		b	uint_add3
 208              	.LVL18:
 209              	.L7:
 210              	.LCFI7:
 211              		.cfi_restore_state
 100:fp.c          ****         uint_add3((uint_c *)x, (uint_c *)x, &p);
 212              		.loc 1 100 9 view .LVU39
 213              	.LBE6:
 214              	.LBE7:
 215              		.loc 1 101 1 view .LVU40
 216 0018 10BD     		pop	{r4, pc}
 217              	.LVL19:
 218              	.L10:
 219              		.loc 1 101 1 view .LVU41
 220 001a 00BF     		.align	2
 221              	.L9:
 222 001c 00000000 		.word	p
 223              		.cfi_endproc
 224              	.LFE4:
 226              		.section	.text.fp_sub2,"ax",%progbits
 227              		.align	1
 228              		.global	fp_sub2
 229              		.syntax unified
 230              		.thumb
 231              		.thumb_func
 233              	fp_sub2:
 234              	.LVL20:
 235              	.LFB5:
 102:fp.c          **** 
 103:fp.c          **** void fp_sub2(fp *x, fp const *y)
 104:fp.c          **** {
 236              		.loc 1 104 1 is_stmt 1 view -0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 0
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240              		@ link register save eliminated.
 105:fp.c          ****     fp_sub3(x, x, y);
 241              		.loc 1 105 5 view .LVU43
 104:fp.c          ****     fp_sub3(x, x, y);
 242              		.loc 1 104 1 is_stmt 0 view .LVU44
 243 0000 0A46     		mov	r2, r1
 244              		.loc 1 105 5 view .LVU45
 245 0002 0146     		mov	r1, r0
 246              	.LVL21:
 247              		.loc 1 105 5 view .LVU46
 248 0004 FFF7FEBF 		b	fp_sub3
 249              	.LVL22:
 250              		.loc 1 105 5 view .LVU47
 251              		.cfi_endproc
 252              	.LFE5:
 254              		.section	.text.fp_mul3,"ax",%progbits
 255              		.align	1
 256              		.global	fp_mul3
 257              		.syntax unified
 258              		.thumb
 259              		.thumb_func
 261              	fp_mul3:
 262              	.LVL23:
 263              	.LFB8:
 106:fp.c          **** }
 107:fp.c          **** 
 108:fp.c          **** /* Montgomery arithmetic */
 109:fp.c          **** 
 110:fp.c          **** void fp_enc(fp *x, uint_c const *y)
 111:fp.c          **** {
 112:fp.c          ****     fp_mul3(x, (fp *)y, &r_squared_mod_p);
 113:fp.c          **** }
 114:fp.c          **** 
 115:fp.c          **** void fp_dec(uint_c *x, fp const *y)
 116:fp.c          **** {
 117:fp.c          ****     fp_mul3((fp *)x, y, (fp *)&uint_1);
 118:fp.c          **** }
 119:fp.c          **** 
 120:fp.c          **** void fp_mul3(fp *x, fp const *y, fp const *z)
 121:fp.c          **** {
 264              		.loc 1 121 1 is_stmt 1 view -0
 265              		.cfi_startproc
 266              		@ args = 0, pretend = 0, frame = 104
 267              		@ frame_needed = 0, uses_anonymous_args = 0
 122:fp.c          ****     uint64_t t[LIMBS + 1] = {0};
 268              		.loc 1 122 5 view .LVU49
 121:fp.c          ****     uint64_t t[LIMBS + 1] = {0};
 269              		.loc 1 121 1 is_stmt 0 view .LVU50
 270 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 271              	.LCFI8:
 272              		.cfi_def_cfa_offset 36
 273              		.cfi_offset 4, -36
 274              		.cfi_offset 5, -32
 275              		.cfi_offset 6, -28
 276              		.cfi_offset 7, -24
 277              		.cfi_offset 8, -20
 278              		.cfi_offset 9, -16
 279              		.cfi_offset 10, -12
 280              		.cfi_offset 11, -8
 281              		.cfi_offset 14, -4
 282 0004 9DB0     		sub	sp, sp, #116
 283              	.LCFI9:
 284              		.cfi_def_cfa_offset 152
 121:fp.c          ****     uint64_t t[LIMBS + 1] = {0};
 285              		.loc 1 121 1 view .LVU51
 286 0006 0E46     		mov	r6, r1
 287 0008 0490     		str	r0, [sp, #16]
 288 000a 9346     		mov	fp, r2
 289              		.loc 1 122 14 view .LVU52
 290 000c 0021     		movs	r1, #0
 291              	.LVL24:
 292              		.loc 1 122 14 view .LVU53
 293 000e 4822     		movs	r2, #72
 294              	.LVL25:
 295              		.loc 1 122 14 view .LVU54
 296 0010 0AA8     		add	r0, sp, #40
 297              	.LVL26:
 298              		.loc 1 122 14 view .LVU55
 299 0012 FFF7FEFF 		bl	memset
 300              	.LVL27:
 123:fp.c          ****     for (size_t k = 0; k < LIMBS; ++k)
 301              		.loc 1 123 5 is_stmt 1 view .LVU56
 302              	.LBB8:
 303              		.loc 1 123 10 view .LVU57
 304              		.loc 1 123 26 view .LVU58
 305 0016 0AAB     		add	r3, sp, #40
 306 0018 083E     		subs	r6, r6, #8
 307              	.LVL28:
 308              		.loc 1 123 26 is_stmt 0 view .LVU59
 309 001a 0293     		str	r3, [sp, #8]
 310              	.LBE8:
 122:fp.c          ****     uint64_t t[LIMBS + 1] = {0};
 311              		.loc 1 122 14 view .LVU60
 312 001c 0825     		movs	r5, #8
 313              	.LVL29:
 314              	.L31:
 315              	.LBB15:
 316              	.LBB9:
 124:fp.c          ****     {
 125:fp.c          **** #define r(i) t[(k + (i)) % (LIMBS + 1)]
 126:fp.c          **** 
 127:fp.c          ****         uint64_t m = inv_min_p_mod_r * (y->c[k] * z->c[0] + r(0));
 317              		.loc 1 127 61 view .LVU61
 318 001e 029B     		ldr	r3, [sp, #8]
 319              		.loc 1 127 49 view .LVU62
 320 0020 D6F80CC0 		ldr	ip, [r6, #12]
 321              		.loc 1 127 61 view .LVU63
 322 0024 D3E90041 		ldrd	r4, r1, [r3]
 323              		.loc 1 127 49 view .LVU64
 324 0028 DBE90002 		ldrd	r0, r2, [fp]
 325 002c 0833     		adds	r3, r3, #8
 326 002e 0293     		str	r3, [sp, #8]
 327 0030 B368     		ldr	r3, [r6, #8]
 328 0032 5A43     		muls	r2, r3, r2
 329 0034 00FB0C22 		mla	r2, r0, ip, r2
 330 0038 A3FB003C 		umull	r3, ip, r3, r0
 331              		.loc 1 127 59 view .LVU65
 332 003c 1B19     		adds	r3, r3, r4
 333              		.loc 1 127 49 view .LVU66
 334 003e 6244     		add	r2, r2, ip
 335              		.loc 1 127 59 view .LVU67
 336 0040 42EB0102 		adc	r2, r2, r1
 337              		.loc 1 127 38 view .LVU68
 338 0044 8449     		ldr	r1, .L37
 339              		.loc 1 127 18 view .LVU69
 340 0046 D1E90001 		ldrd	r0, r1, [r1]
 341 004a 5943     		muls	r1, r3, r1
 342 004c A0FB0338 		umull	r3, r8, r0, r3
 343 0050 02FB0011 		mla	r1, r2, r0, r1
 344 0054 0593     		str	r3, [sp, #20]
 128:fp.c          ****         bool c = 0, o = 0;
 345              		.loc 1 128 21 view .LVU70
 346 0056 0024     		movs	r4, #0
 347 0058 804B     		ldr	r3, .L37+4
 348 005a 0393     		str	r3, [sp, #12]
 127:fp.c          ****         bool c = 0, o = 0;
 349              		.loc 1 127 45 view .LVU71
 350 005c 0836     		adds	r6, r6, #8
 351 005e A5F10807 		sub	r7, r5, #8
 352              	.LVL30:
 127:fp.c          ****         bool c = 0, o = 0;
 353              		.loc 1 127 9 is_stmt 1 view .LVU72
 127:fp.c          ****         bool c = 0, o = 0;
 354              		.loc 1 127 18 is_stmt 0 view .LVU73
 355 0062 8844     		add	r8, r8, r1
 356              	.LVL31:
 357              		.loc 1 128 9 is_stmt 1 view .LVU74
 129:fp.c          ****         uint128 u;
 358              		.loc 1 129 9 view .LVU75
 130:fp.c          ****         for (size_t i = 0; i < LIMBS; ++i)
 359              		.loc 1 130 9 view .LVU76
 360              	.LBB10:
 361              		.loc 1 130 14 view .LVU77
 362              		.loc 1 130 30 view .LVU78
 363              	.LBE10:
 128:fp.c          ****         uint128 u;
 364              		.loc 1 128 14 is_stmt 0 view .LVU79
 365 0064 A146     		mov	r9, r4
 366              	.LVL32:
 367              	.L21:
 368              	.LBB11:
 131:fp.c          ****         {
 132:fp.c          ****             //__uint128_t u = (__uint128_t) m * p.c[i];
 133:fp.c          ****             mult64to128(m, p.c[i], &u);
 369              		.loc 1 133 13 is_stmt 1 discriminator 3 view .LVU80
 370 0066 0399     		ldr	r1, [sp, #12]
 371 0068 0598     		ldr	r0, [sp, #20]
 372 006a 06AB     		add	r3, sp, #24
 373 006c 0093     		str	r3, [sp]
 374 006e F1E80223 		ldrd	r2, [r1], #8
 375 0072 0391     		str	r1, [sp, #12]
 376 0074 4146     		mov	r1, r8
 377 0076 FFF7FEFF 		bl	mult64to128
 378              	.LVL33:
 134:fp.c          **** 
 135:fp.c          ****             o = __builtin_add_overflow(r(i), o, &r(i));
 379              		.loc 1 135 13 discriminator 3 view .LVU81
 380              		.loc 1 135 40 is_stmt 0 discriminator 3 view .LVU82
 381 007a 0923     		movs	r3, #9
 382 007c B7FBF3F2 		udiv	r2, r7, r3
 383 0080 02EBC202 		add	r2, r2, r2, lsl #3
 384 0084 BA1A     		subs	r2, r7, r2
 385              		.loc 1 135 17 discriminator 3 view .LVU83
 386 0086 1CAB     		add	r3, sp, #112
 387 0088 D000     		lsls	r0, r2, #3
 388 008a 03EBC202 		add	r2, r3, r2, lsl #3
 389 008e 52E91232 		ldrd	r3, r2, [r2, #-72]
 390 0092 1B19     		adds	r3, r3, r4
 391 0094 52F1000E 		adcs	lr, r2, #0
 136:fp.c          **** 
 137:fp.c          ****             //o |= __builtin_add_overflow(r(i), (uint64_t) u, &r(i));
 138:fp.c          ****             o |= __builtin_add_overflow(r(i), u.Lo, &r(i));
 392              		.loc 1 138 18 discriminator 3 view .LVU84
 393 0098 DDE90812 		ldrd	r1, r2, [sp, #32]
 135:fp.c          **** 
 394              		.loc 1 135 17 discriminator 3 view .LVU85
 395 009c 4FF0000C 		mov	ip, #0
 396 00a0 28BF     		it	cs
 397 00a2 4FF0010C 		movcs	ip, #1
 398              	.LVL34:
 399              		.loc 1 138 13 is_stmt 1 discriminator 3 view .LVU86
 400              		.loc 1 138 18 is_stmt 0 discriminator 3 view .LVU87
 401 00a6 5B18     		adds	r3, r3, r1
 402 00a8 00F17001 		add	r1, r0, #112
 403 00ac 5EEB0202 		adcs	r2, lr, r2
 404 00b0 0DEB0100 		add	r0, sp, r1
 405 00b4 40E91232 		strd	r3, r2, [r0, #-72]
 139:fp.c          **** 
 140:fp.c          ****             c = __builtin_add_overflow(r(i + 1), c, &r(i + 1));
 406              		.loc 1 140 40 discriminator 3 view .LVU88
 407 00b8 07F10107 		add	r7, r7, #1
 408 00bc 4FF00903 		mov	r3, #9
 409 00c0 B7FBF3F2 		udiv	r2, r7, r3
 410 00c4 02EBC202 		add	r2, r2, r2, lsl #3
 138:fp.c          **** 
 411              		.loc 1 138 18 discriminator 3 view .LVU89
 412 00c8 4FF00004 		mov	r4, #0
 413              		.loc 1 140 40 discriminator 3 view .LVU90
 414 00cc A7EB0202 		sub	r2, r7, r2
 138:fp.c          **** 
 415              		.loc 1 138 18 discriminator 3 view .LVU91
 416 00d0 28BF     		it	cs
 417 00d2 0124     		movcs	r4, #1
 418              		.loc 1 140 17 discriminator 3 view .LVU92
 419 00d4 1CAB     		add	r3, sp, #112
 420 00d6 4CEA040E 		orr	lr, ip, r4
 421 00da 4FEAC20C 		lsl	ip, r2, #3
 422              	.LVL35:
 423              		.loc 1 140 17 discriminator 3 view .LVU93
 424 00de 03EBC202 		add	r2, r3, r2, lsl #3
 425 00e2 52E91230 		ldrd	r3, r0, [r2, #-72]
 141:fp.c          **** 
 142:fp.c          ****             //c |= __builtin_add_overflow(r(i+1), (uint64_t) (u >> 64), &r(i+1));
 143:fp.c          ****             c |= __builtin_add_overflow(r(i + 1), u.Hi, &r(i + 1));
 426              		.loc 1 143 18 discriminator 3 view .LVU94
 427 00e6 DDE90612 		ldrd	r1, r2, [sp, #24]
 140:fp.c          **** 
 428              		.loc 1 140 17 discriminator 3 view .LVU95
 429 00ea 13EB0903 		adds	r3, r3, r9
 430 00ee 50F10000 		adcs	r0, r0, #0
 431 00f2 4FF0000A 		mov	r10, #0
 432 00f6 28BF     		it	cs
 433 00f8 4FF0010A 		movcs	r10, #1
 434              		.loc 1 143 18 discriminator 3 view .LVU96
 435 00fc 5B18     		adds	r3, r3, r1
 436 00fe 5041     		adcs	r0, r0, r2
 437 0100 0CF17002 		add	r2, ip, #112
 438 0104 4FF00009 		mov	r9, #0
 439              	.LVL36:
 440              		.loc 1 143 18 discriminator 3 view .LVU97
 441 0108 0DEB020C 		add	ip, sp, r2
 442 010c 28BF     		it	cs
 443 010e 4FF00109 		movcs	r9, #1
 130:fp.c          ****         {
 444              		.loc 1 130 30 discriminator 3 view .LVU98
 445 0112 AF42     		cmp	r7, r5
 446              		.loc 1 143 18 discriminator 3 view .LVU99
 447 0114 4CE91230 		strd	r3, r0, [ip, #-72]
 138:fp.c          **** 
 448              		.loc 1 138 15 discriminator 3 view .LVU100
 449 0118 7446     		mov	r4, lr
 450              	.LVL37:
 140:fp.c          **** 
 451              		.loc 1 140 13 is_stmt 1 discriminator 3 view .LVU101
 452              		.loc 1 143 13 discriminator 3 view .LVU102
 453              		.loc 1 143 15 is_stmt 0 discriminator 3 view .LVU103
 454 011a 4AEA0909 		orr	r9, r10, r9
 455              	.LVL38:
 130:fp.c          ****         {
 456              		.loc 1 130 39 is_stmt 1 discriminator 3 view .LVU104
 130:fp.c          ****         {
 457              		.loc 1 130 30 discriminator 3 view .LVU105
 458 011e A2D1     		bne	.L21
 459              	.LBE11:
 144:fp.c          ****         }
 145:fp.c          ****         r(LIMBS) += o;
 460              		.loc 1 145 9 view .LVU106
 461 0120 0923     		movs	r3, #9
 462 0122 B5FBF3F4 		udiv	r4, r5, r3
 463 0126 04EBC404 		add	r4, r4, r4, lsl #3
 464              		.loc 1 145 18 is_stmt 0 view .LVU107
 465 012a 1CAB     		add	r3, sp, #112
 466              		.loc 1 145 9 view .LVU108
 467 012c 2C1B     		subs	r4, r5, r4
 468              		.loc 1 145 18 view .LVU109
 469 012e 03EBC401 		add	r1, r3, r4, lsl #3
 470 0132 51E91232 		ldrd	r3, r2, [r1, #-72]
 471 0136 13EB0E03 		adds	r3, r3, lr
 472 013a 42F10002 		adc	r2, r2, #0
 473 013e 41E91232 		strd	r3, r2, [r1, #-72]
 146:fp.c          **** 
 147:fp.c          ****         c = o = 0;
 474              		.loc 1 147 9 is_stmt 1 view .LVU110
 475              	.LVL39:
 148:fp.c          ****         for (size_t i = 0; i < LIMBS; ++i)
 476              		.loc 1 148 9 view .LVU111
 477              	.LBB12:
 478              		.loc 1 148 14 view .LVU112
 479              		.loc 1 148 30 view .LVU113
 480              	.LBE12:
 147:fp.c          ****         for (size_t i = 0; i < LIMBS; ++i)
 481              		.loc 1 147 15 is_stmt 0 view .LVU114
 482 0142 0027     		movs	r7, #0
 483 0144 ABF10809 		sub	r9, fp, #8
 484 0148 A5F10708 		sub	r8, r5, #7
 485              	.LVL40:
 147:fp.c          ****         for (size_t i = 0; i < LIMBS; ++i)
 486              		.loc 1 147 11 view .LVU115
 487 014c BA46     		mov	r10, r7
 488              	.LVL41:
 489              	.L30:
 490              	.LBB13:
 149:fp.c          ****         {
 150:fp.c          ****             //__uint128_t u = (__uint128_t) y->c[k] * z->c[i];
 151:fp.c          ****             mult64to128(y->c[k], z->c[i], &u);
 491              		.loc 1 151 13 is_stmt 1 discriminator 3 view .LVU116
 492 014e 06AB     		add	r3, sp, #24
 493 0150 0093     		str	r3, [sp]
 494 0152 F9E90223 		ldrd	r2, [r9, #8]!
 495 0156 D6E90001 		ldrd	r0, [r6]
 496 015a FFF7FEFF 		bl	mult64to128
 497              	.LVL42:
 152:fp.c          **** 
 153:fp.c          ****             o = __builtin_add_overflow(r(i), o, &r(i));
 498              		.loc 1 153 13 discriminator 3 view .LVU117
 499              		.loc 1 153 40 is_stmt 0 discriminator 3 view .LVU118
 500 015e 08F1FF31 		add	r1, r8, #-1
 501 0162 0923     		movs	r3, #9
 502 0164 B1FBF3F3 		udiv	r3, r1, r3
 503 0168 03EBC303 		add	r3, r3, r3, lsl #3
 504 016c C91A     		subs	r1, r1, r3
 505              		.loc 1 153 17 discriminator 3 view .LVU119
 506 016e 1CAB     		add	r3, sp, #112
 507 0170 CA00     		lsls	r2, r1, #3
 508 0172 03EBC101 		add	r1, r3, r1, lsl #3
 509 0176 51E91231 		ldrd	r3, r1, [r1, #-72]
 510 017a DB19     		adds	r3, r3, r7
 511 017c 51F1000E 		adcs	lr, r1, #0
 154:fp.c          **** 
 155:fp.c          ****             //o |= __builtin_add_overflow(r(i), (uint64_t) u, &r(i));
 156:fp.c          ****             o |= __builtin_add_overflow(r(i), u.Lo, &r(i));
 512              		.loc 1 156 18 discriminator 3 view .LVU120
 513 0180 DDE90801 		ldrd	r0, r1, [sp, #32]
 153:fp.c          **** 
 514              		.loc 1 153 17 discriminator 3 view .LVU121
 515 0184 4FF0000C 		mov	ip, #0
 516              		.loc 1 156 18 discriminator 3 view .LVU122
 517 0188 02F17002 		add	r2, r2, #112
 153:fp.c          **** 
 518              		.loc 1 153 17 discriminator 3 view .LVU123
 519 018c 28BF     		it	cs
 520 018e 4FF0010C 		movcs	ip, #1
 521              	.LVL43:
 522              		.loc 1 156 13 is_stmt 1 discriminator 3 view .LVU124
 523              		.loc 1 156 18 is_stmt 0 discriminator 3 view .LVU125
 524 0192 1B18     		adds	r3, r3, r0
 525 0194 5EEB0101 		adcs	r1, lr, r1
 526 0198 6A44     		add	r2, sp, r2
 527 019a 42E91231 		strd	r3, r1, [r2, #-72]
 157:fp.c          **** 
 158:fp.c          ****             c = __builtin_add_overflow(r(i + 1), c, &r(i + 1));
 528              		.loc 1 158 40 discriminator 3 view .LVU126
 529 019e 4FF00903 		mov	r3, #9
 530 01a2 B8FBF3F2 		udiv	r2, r8, r3
 531 01a6 02EBC202 		add	r2, r2, r2, lsl #3
 156:fp.c          **** 
 532              		.loc 1 156 18 discriminator 3 view .LVU127
 533 01aa 4FF00007 		mov	r7, #0
 534              		.loc 1 158 40 discriminator 3 view .LVU128
 535 01ae A8EB0202 		sub	r2, r8, r2
 156:fp.c          **** 
 536              		.loc 1 156 18 discriminator 3 view .LVU129
 537 01b2 28BF     		it	cs
 538 01b4 0127     		movcs	r7, #1
 539              		.loc 1 158 17 discriminator 3 view .LVU130
 540 01b6 1CAB     		add	r3, sp, #112
 541 01b8 4CEA070E 		orr	lr, ip, r7
 542 01bc 4FEAC20C 		lsl	ip, r2, #3
 543              	.LVL44:
 544              		.loc 1 158 17 discriminator 3 view .LVU131
 545 01c0 03EBC202 		add	r2, r3, r2, lsl #3
 546 01c4 52E91232 		ldrd	r3, r2, [r2, #-72]
 159:fp.c          **** 
 160:fp.c          ****             //c |= __builtin_add_overflow(r(i+1), (uint64_t) (u >> 64), &r(i+1));
 161:fp.c          ****             c |= __builtin_add_overflow(r(i + 1), u.Hi, &r(i + 1));
 547              		.loc 1 161 18 discriminator 3 view .LVU132
 548 01c8 0698     		ldr	r0, [sp, #24]
 158:fp.c          **** 
 549              		.loc 1 158 17 discriminator 3 view .LVU133
 550 01ca 13EB0A03 		adds	r3, r3, r10
 551 01ce 52F10002 		adcs	r2, r2, #0
 552 01d2 4FF00001 		mov	r1, #0
 553 01d6 28BF     		it	cs
 554 01d8 0121     		movcs	r1, #1
 555              		.loc 1 161 18 discriminator 3 view .LVU134
 556 01da 1B18     		adds	r3, r3, r0
 557 01dc 0798     		ldr	r0, [sp, #28]
 558 01de 4241     		adcs	r2, r2, r0
 559 01e0 0CF17000 		add	r0, ip, #112
 560 01e4 4FF0000A 		mov	r10, #0
 561              	.LVL45:
 562              		.loc 1 161 18 discriminator 3 view .LVU135
 563 01e8 0DEB000C 		add	ip, sp, r0
 564 01ec 28BF     		it	cs
 565 01ee 4FF0010A 		movcs	r10, #1
 148:fp.c          ****         {
 566              		.loc 1 148 30 discriminator 3 view .LVU136
 567 01f2 A845     		cmp	r8, r5
 568              		.loc 1 161 18 discriminator 3 view .LVU137
 569 01f4 4CE91232 		strd	r3, r2, [ip, #-72]
 156:fp.c          **** 
 570              		.loc 1 156 15 discriminator 3 view .LVU138
 571 01f8 7746     		mov	r7, lr
 572              	.LVL46:
 158:fp.c          **** 
 573              		.loc 1 158 13 is_stmt 1 discriminator 3 view .LVU139
 574              		.loc 1 161 13 discriminator 3 view .LVU140
 575              		.loc 1 161 15 is_stmt 0 discriminator 3 view .LVU141
 576 01fa 41EA0A0A 		orr	r10, r1, r10
 577              	.LVL47:
 148:fp.c          ****         {
 578              		.loc 1 148 39 is_stmt 1 discriminator 3 view .LVU142
 148:fp.c          ****         {
 579              		.loc 1 148 30 discriminator 3 view .LVU143
 580 01fe 08F10108 		add	r8, r8, #1
 148:fp.c          ****         {
 581              		.loc 1 148 30 is_stmt 0 discriminator 3 view .LVU144
 582 0202 A4D1     		bne	.L30
 583              	.LBE13:
 162:fp.c          ****         }
 163:fp.c          ****         r(LIMBS) += o;
 584              		.loc 1 163 18 discriminator 2 view .LVU145
 585 0204 1CAB     		add	r3, sp, #112
 586 0206 03EBC404 		add	r4, r3, r4, lsl #3
 587 020a 54E91232 		ldrd	r3, r2, [r4, #-72]
 588 020e 0135     		adds	r5, r5, #1
 589              		.loc 1 163 9 is_stmt 1 discriminator 2 view .LVU146
 590              		.loc 1 163 18 is_stmt 0 discriminator 2 view .LVU147
 591 0210 13EB0E03 		adds	r3, r3, lr
 592 0214 42F10002 		adc	r2, r2, #0
 593              	.LBE9:
 123:fp.c          ****     {
 594              		.loc 1 123 26 discriminator 2 view .LVU148
 595 0218 102D     		cmp	r5, #16
 596              	.LBB14:
 597              		.loc 1 163 18 discriminator 2 view .LVU149
 598 021a 44E91232 		strd	r3, r2, [r4, #-72]
 599              	.LBE14:
 123:fp.c          ****     {
 600              		.loc 1 123 35 is_stmt 1 discriminator 2 view .LVU150
 601              	.LVL48:
 123:fp.c          ****     {
 602              		.loc 1 123 26 discriminator 2 view .LVU151
 603 021e 7FF4FEAE 		bne	.L31
 604 0222 049B     		ldr	r3, [sp, #16]
 123:fp.c          ****     {
 605              		.loc 1 123 26 is_stmt 0 view .LVU152
 606 0224 0822     		movs	r2, #8
 607 0226 A3F10801 		sub	r1, r3, #8
 608              	.LBE15:
 609              	.LBB16:
 164:fp.c          **** #undef r
 165:fp.c          ****     }
 166:fp.c          **** 
 167:fp.c          ****     for (size_t i = 0; i < LIMBS; ++i)
 168:fp.c          ****         x->c[i] = t[(LIMBS + i) % (LIMBS + 1)];
 610              		.loc 1 168 33 view .LVU153
 611 022a 0920     		movs	r0, #9
 612              	.L32:
 613              	.LVL49:
 614              		.loc 1 168 9 is_stmt 1 discriminator 3 view .LVU154
 615              		.loc 1 168 33 is_stmt 0 discriminator 3 view .LVU155
 616 022c B2FBF0F3 		udiv	r3, r2, r0
 617 0230 03EBC303 		add	r3, r3, r3, lsl #3
 618 0234 D31A     		subs	r3, r2, r3
 619              		.loc 1 168 20 discriminator 3 view .LVU156
 620 0236 1CAC     		add	r4, sp, #112
 621 0238 04EBC303 		add	r3, r4, r3, lsl #3
 622              		.loc 1 168 17 discriminator 3 view .LVU157
 623 023c 53E91245 		ldrd	r4, [r3, #-72]
 167:fp.c          ****         x->c[i] = t[(LIMBS + i) % (LIMBS + 1)];
 624              		.loc 1 167 26 discriminator 3 view .LVU158
 625 0240 0132     		adds	r2, r2, #1
 626              	.LVL50:
 167:fp.c          ****         x->c[i] = t[(LIMBS + i) % (LIMBS + 1)];
 627              		.loc 1 167 26 discriminator 3 view .LVU159
 628 0242 102A     		cmp	r2, #16
 629              		.loc 1 168 17 discriminator 3 view .LVU160
 630 0244 E1E90245 		strd	r4, [r1, #8]!
 167:fp.c          ****         x->c[i] = t[(LIMBS + i) % (LIMBS + 1)];
 631              		.loc 1 167 35 is_stmt 1 discriminator 3 view .LVU161
 632              	.LVL51:
 167:fp.c          ****         x->c[i] = t[(LIMBS + i) % (LIMBS + 1)];
 633              		.loc 1 167 26 discriminator 3 view .LVU162
 634 0248 F0D1     		bne	.L32
 635              	.LBE16:
 169:fp.c          **** 
 170:fp.c          ****     reduce_once((uint_c *)x);
 636              		.loc 1 170 5 view .LVU163
 637 024a 0498     		ldr	r0, [sp, #16]
 171:fp.c          **** }
 638              		.loc 1 171 1 is_stmt 0 view .LVU164
 639 024c 1DB0     		add	sp, sp, #116
 640              	.LCFI10:
 641              		.cfi_def_cfa_offset 36
 642              		@ sp needed
 643 024e BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 644              	.LCFI11:
 645              		.cfi_restore 14
 646              		.cfi_restore 11
 647              		.cfi_restore 10
 648              		.cfi_restore 9
 649              		.cfi_restore 8
 650              		.cfi_restore 7
 651              		.cfi_restore 6
 652              		.cfi_restore 5
 653              		.cfi_restore 4
 654              		.cfi_def_cfa_offset 0
 655              	.LVL52:
 170:fp.c          **** }
 656              		.loc 1 170 5 view .LVU165
 657 0252 FFF7FEBF 		b	reduce_once
 658              	.LVL53:
 659              	.L38:
 660 0256 00BF     		.align	2
 661              	.L37:
 662 0258 00000000 		.word	inv_min_p_mod_r
 663 025c 00000000 		.word	p
 664              		.cfi_endproc
 665              	.LFE8:
 667              		.section	.text.fp_enc,"ax",%progbits
 668              		.align	1
 669              		.global	fp_enc
 670              		.syntax unified
 671              		.thumb
 672              		.thumb_func
 674              	fp_enc:
 675              	.LVL54:
 676              	.LFB6:
 111:fp.c          ****     fp_mul3(x, (fp *)y, &r_squared_mod_p);
 677              		.loc 1 111 1 is_stmt 1 view -0
 678              		.cfi_startproc
 679              		@ args = 0, pretend = 0, frame = 0
 680              		@ frame_needed = 0, uses_anonymous_args = 0
 681              		@ link register save eliminated.
 112:fp.c          **** }
 682              		.loc 1 112 5 view .LVU167
 683 0000 014A     		ldr	r2, .L40
 684 0002 FFF7FEBF 		b	fp_mul3
 685              	.LVL55:
 686              	.L41:
 112:fp.c          **** }
 687              		.loc 1 112 5 is_stmt 0 view .LVU168
 688 0006 00BF     		.align	2
 689              	.L40:
 690 0008 00000000 		.word	r_squared_mod_p
 691              		.cfi_endproc
 692              	.LFE6:
 694              		.section	.text.fp_set,"ax",%progbits
 695              		.align	1
 696              		.global	fp_set
 697              		.syntax unified
 698              		.thumb
 699              		.thumb_func
 701              	fp_set:
 702              	.LVL56:
 703              	.LFB0:
  74:fp.c          ****     uint_set((uint_c *)x, y);
 704              		.loc 1 74 1 is_stmt 1 view -0
 705              		.cfi_startproc
 706              		@ args = 0, pretend = 0, frame = 0
 707              		@ frame_needed = 0, uses_anonymous_args = 0
  75:fp.c          ****     fp_enc(x, (uint_c *)x);
 708              		.loc 1 75 5 view .LVU170
  74:fp.c          ****     uint_set((uint_c *)x, y);
 709              		.loc 1 74 1 is_stmt 0 view .LVU171
 710 0000 10B5     		push	{r4, lr}
 711              	.LCFI12:
 712              		.cfi_def_cfa_offset 8
 713              		.cfi_offset 4, -8
 714              		.cfi_offset 14, -4
  74:fp.c          ****     uint_set((uint_c *)x, y);
 715              		.loc 1 74 1 view .LVU172
 716 0002 0446     		mov	r4, r0
  75:fp.c          ****     fp_enc(x, (uint_c *)x);
 717              		.loc 1 75 5 view .LVU173
 718 0004 FFF7FEFF 		bl	uint_set
 719              	.LVL57:
  76:fp.c          **** }
 720              		.loc 1 76 5 is_stmt 1 view .LVU174
 721 0008 2146     		mov	r1, r4
 722 000a 2046     		mov	r0, r4
  77:fp.c          **** 
 723              		.loc 1 77 1 is_stmt 0 view .LVU175
 724 000c BDE81040 		pop	{r4, lr}
 725              	.LCFI13:
 726              		.cfi_restore 14
 727              		.cfi_restore 4
 728              		.cfi_def_cfa_offset 0
 729              	.LVL58:
  76:fp.c          **** }
 730              		.loc 1 76 5 view .LVU176
 731 0010 FFF7FEBF 		b	fp_enc
 732              	.LVL59:
  76:fp.c          **** }
 733              		.loc 1 76 5 view .LVU177
 734              		.cfi_endproc
 735              	.LFE0:
 737              		.section	.text.fp_dec,"ax",%progbits
 738              		.align	1
 739              		.global	fp_dec
 740              		.syntax unified
 741              		.thumb
 742              		.thumb_func
 744              	fp_dec:
 745              	.LVL60:
 746              	.LFB7:
 116:fp.c          ****     fp_mul3((fp *)x, y, (fp *)&uint_1);
 747              		.loc 1 116 1 is_stmt 1 view -0
 748              		.cfi_startproc
 749              		@ args = 0, pretend = 0, frame = 0
 750              		@ frame_needed = 0, uses_anonymous_args = 0
 751              		@ link register save eliminated.
 117:fp.c          **** }
 752              		.loc 1 117 5 view .LVU179
 753 0000 014A     		ldr	r2, .L44
 754 0002 FFF7FEBF 		b	fp_mul3
 755              	.LVL61:
 756              	.L45:
 117:fp.c          **** }
 757              		.loc 1 117 5 is_stmt 0 view .LVU180
 758 0006 00BF     		.align	2
 759              	.L44:
 760 0008 00000000 		.word	uint_1
 761              		.cfi_endproc
 762              	.LFE7:
 764              		.section	.text.fp_cswap,"ax",%progbits
 765              		.align	1
 766              		.global	fp_cswap
 767              		.syntax unified
 768              		.thumb
 769              		.thumb_func
 771              	fp_cswap:
 772              	.LVL62:
 773              	.LFB9:
 172:fp.c          **** 
 173:fp.c          **** void fp_cswap(fp *x, fp *y, bool c)
 174:fp.c          **** {
 774              		.loc 1 174 1 is_stmt 1 view -0
 775              		.cfi_startproc
 776              		@ args = 0, pretend = 0, frame = 0
 777              		@ frame_needed = 0, uses_anonymous_args = 0
 175:fp.c          ****     if (c)
 778              		.loc 1 175 5 view .LVU182
 174:fp.c          ****     if (c)
 779              		.loc 1 174 1 is_stmt 0 view .LVU183
 780 0000 38B5     		push	{r3, r4, r5, lr}
 781              	.LCFI14:
 782              		.cfi_def_cfa_offset 16
 783              		.cfi_offset 3, -16
 784              		.cfi_offset 4, -12
 785              		.cfi_offset 5, -8
 786              		.cfi_offset 14, -4
 174:fp.c          ****     if (c)
 787              		.loc 1 174 1 view .LVU184
 788 0002 0546     		mov	r5, r0
 789 0004 0C46     		mov	r4, r1
 790              		.loc 1 175 8 view .LVU185
 791 0006 7AB1     		cbz	r2, .L46
 176:fp.c          ****     {
 177:fp.c          ****         fp_add3(x, x, y);
 792              		.loc 1 177 9 is_stmt 1 view .LVU186
 793 0008 0A46     		mov	r2, r1
 794              	.LVL63:
 795              		.loc 1 177 9 is_stmt 0 view .LVU187
 796 000a 0146     		mov	r1, r0
 797              	.LVL64:
 798              		.loc 1 177 9 view .LVU188
 799 000c FFF7FEFF 		bl	fp_add3
 800              	.LVL65:
 178:fp.c          ****         fp_sub3(y, x, y);
 801              		.loc 1 178 9 is_stmt 1 view .LVU189
 802 0010 2246     		mov	r2, r4
 803 0012 2946     		mov	r1, r5
 804 0014 2046     		mov	r0, r4
 805 0016 FFF7FEFF 		bl	fp_sub3
 806              	.LVL66:
 179:fp.c          ****         fp_sub3(x, x, y);
 807              		.loc 1 179 9 view .LVU190
 808 001a 2246     		mov	r2, r4
 809 001c 2946     		mov	r1, r5
 810 001e 2846     		mov	r0, r5
 180:fp.c          ****     }
 181:fp.c          **** }
 811              		.loc 1 181 1 is_stmt 0 view .LVU191
 812 0020 BDE83840 		pop	{r3, r4, r5, lr}
 813              	.LCFI15:
 814              		.cfi_remember_state
 815              		.cfi_restore 14
 816              		.cfi_restore 5
 817              		.cfi_restore 4
 818              		.cfi_restore 3
 819              		.cfi_def_cfa_offset 0
 820              	.LVL67:
 179:fp.c          ****         fp_sub3(x, x, y);
 821              		.loc 1 179 9 view .LVU192
 822 0024 FFF7FEBF 		b	fp_sub3
 823              	.LVL68:
 824              	.L46:
 825              	.LCFI16:
 826              		.cfi_restore_state
 827              		.loc 1 181 1 view .LVU193
 828 0028 38BD     		pop	{r3, r4, r5, pc}
 829              		.cfi_endproc
 830              	.LFE9:
 832              		.section	.text.fp_mul2,"ax",%progbits
 833              		.align	1
 834              		.global	fp_mul2
 835              		.syntax unified
 836              		.thumb
 837              		.thumb_func
 839              	fp_mul2:
 840              	.LVL69:
 841              	.LFB10:
 182:fp.c          **** 
 183:fp.c          **** void fp_mul2(fp *x, fp const *y)
 184:fp.c          **** {
 842              		.loc 1 184 1 is_stmt 1 view -0
 843              		.cfi_startproc
 844              		@ args = 0, pretend = 0, frame = 0
 845              		@ frame_needed = 0, uses_anonymous_args = 0
 846              		@ link register save eliminated.
 185:fp.c          ****     fp_mul3(x, x, y);
 847              		.loc 1 185 5 view .LVU195
 184:fp.c          ****     fp_mul3(x, x, y);
 848              		.loc 1 184 1 is_stmt 0 view .LVU196
 849 0000 0A46     		mov	r2, r1
 850              		.loc 1 185 5 view .LVU197
 851 0002 0146     		mov	r1, r0
 852              	.LVL70:
 853              		.loc 1 185 5 view .LVU198
 854 0004 FFF7FEBF 		b	fp_mul3
 855              	.LVL71:
 856              		.loc 1 185 5 view .LVU199
 857              		.cfi_endproc
 858              	.LFE10:
 860              		.section	.text.fp_sq2,"ax",%progbits
 861              		.align	1
 862              		.global	fp_sq2
 863              		.syntax unified
 864              		.thumb
 865              		.thumb_func
 867              	fp_sq2:
 868              	.LVL72:
 869              	.LFB11:
 186:fp.c          **** }
 187:fp.c          **** 
 188:fp.c          **** void fp_sq2(fp *x, fp const *y)
 189:fp.c          **** {
 870              		.loc 1 189 1 is_stmt 1 view -0
 871              		.cfi_startproc
 872              		@ args = 0, pretend = 0, frame = 0
 873              		@ frame_needed = 0, uses_anonymous_args = 0
 874              		@ link register save eliminated.
 190:fp.c          ****     fp_mul3(x, y, y);
 875              		.loc 1 190 5 view .LVU201
 189:fp.c          ****     fp_mul3(x, y, y);
 876              		.loc 1 189 1 is_stmt 0 view .LVU202
 877 0000 0A46     		mov	r2, r1
 878              		.loc 1 190 5 view .LVU203
 879 0002 FFF7FEBF 		b	fp_mul3
 880              	.LVL73:
 881              		.loc 1 190 5 view .LVU204
 882              		.cfi_endproc
 883              	.LFE11:
 885              		.section	.text.fp_sq1,"ax",%progbits
 886              		.align	1
 887              		.global	fp_sq1
 888              		.syntax unified
 889              		.thumb
 890              		.thumb_func
 892              	fp_sq1:
 893              	.LVL74:
 894              	.LFB12:
 191:fp.c          **** }
 192:fp.c          **** 
 193:fp.c          **** void fp_sq1(fp *x)
 194:fp.c          **** {
 895              		.loc 1 194 1 is_stmt 1 view -0
 896              		.cfi_startproc
 897              		@ args = 0, pretend = 0, frame = 0
 898              		@ frame_needed = 0, uses_anonymous_args = 0
 899              		@ link register save eliminated.
 195:fp.c          ****     fp_sq2(x, x);
 900              		.loc 1 195 5 view .LVU206
 194:fp.c          ****     fp_sq2(x, x);
 901              		.loc 1 194 1 is_stmt 0 view .LVU207
 902 0000 0146     		mov	r1, r0
 903              		.loc 1 195 5 view .LVU208
 904 0002 FFF7FEBF 		b	fp_sq2
 905              	.LVL75:
 906              		.loc 1 195 5 view .LVU209
 907              		.cfi_endproc
 908              	.LFE12:
 910              		.section	.text.fp_pow,"ax",%progbits
 911              		.align	1
 912              		.syntax unified
 913              		.thumb
 914              		.thumb_func
 916              	fp_pow:
 917              	.LVL76:
 918              	.LFB13:
 196:fp.c          **** }
 197:fp.c          **** 
 198:fp.c          **** /* (obviously) not constant time in the exponent */
 199:fp.c          **** static void fp_pow(fp *x, uint_c const *e)
 200:fp.c          **** {
 919              		.loc 1 200 1 is_stmt 1 view -0
 920              		.cfi_startproc
 921              		@ args = 0, pretend = 0, frame = 64
 922              		@ frame_needed = 0, uses_anonymous_args = 0
 201:fp.c          ****     fp y = *x;
 923              		.loc 1 201 5 view .LVU211
 200:fp.c          ****     fp y = *x;
 924              		.loc 1 200 1 is_stmt 0 view .LVU212
 925 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 926              	.LCFI17:
 927              		.cfi_def_cfa_offset 28
 928              		.cfi_offset 4, -28
 929              		.cfi_offset 5, -24
 930              		.cfi_offset 6, -20
 931              		.cfi_offset 7, -16
 932              		.cfi_offset 8, -12
 933              		.cfi_offset 9, -8
 934              		.cfi_offset 14, -4
 935              		.loc 1 201 8 view .LVU213
 936 0004 0446     		mov	r4, r0
 200:fp.c          ****     fp y = *x;
 937              		.loc 1 200 1 view .LVU214
 938 0006 0F46     		mov	r7, r1
 939 0008 8046     		mov	r8, r0
 940              		.loc 1 201 8 view .LVU215
 941 000a 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 942              	.LVL77:
 200:fp.c          ****     fp y = *x;
 943              		.loc 1 200 1 view .LVU216
 944 000c 91B0     		sub	sp, sp, #68
 945              	.LCFI18:
 946              		.cfi_def_cfa_offset 96
 947              		.loc 1 201 8 view .LVU217
 948 000e 6D46     		mov	r5, sp
 949 0010 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 950 0012 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 951 0014 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 952 0016 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 953 0018 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 954 001a 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 955 001e 85E80F00 		stm	r5, {r0, r1, r2, r3}
 202:fp.c          ****     *x = fp_1;
 956              		.loc 1 202 5 is_stmt 1 view .LVU218
 957              		.loc 1 202 8 is_stmt 0 view .LVU219
 958 0022 144D     		ldr	r5, .L57
 959 0024 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 960 0026 4646     		mov	r6, r8
 961 0028 0FC6     		stmia	r6!, {r0, r1, r2, r3}
 962 002a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 963 002c 0FC6     		stmia	r6!, {r0, r1, r2, r3}
 964 002e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 965 0030 0FC6     		stmia	r6!, {r0, r1, r2, r3}
 966 0032 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 967 0036 84E80F00 		stm	r4, {r0, r1, r2, r3}
 203:fp.c          ****     for (size_t k = 0; k < LIMBS; ++k)
 968              		.loc 1 203 5 is_stmt 1 view .LVU220
 969              	.LBB17:
 970              		.loc 1 203 10 view .LVU221
 971              	.LVL78:
 972              		.loc 1 203 26 view .LVU222
 973 003a A7F10805 		sub	r5, r7, #8
 974 003e 3837     		adds	r7, r7, #56
 975              	.LVL79:
 976              	.L54:
 977              	.LBB18:
 204:fp.c          ****     {
 205:fp.c          ****         uint64_t t = e->c[k];
 978              		.loc 1 205 9 view .LVU223
 979              		.loc 1 205 18 is_stmt 0 view .LVU224
 980 0040 55F8084F 		ldr	r4, [r5, #8]!
 981 0044 D5F80490 		ldr	r9, [r5, #4]
 982              	.LVL80:
 206:fp.c          ****         for (size_t i = 0; i < 64; ++i, t >>= 1)
 983              		.loc 1 206 9 is_stmt 1 view .LVU225
 984              	.LBB19:
 985              		.loc 1 206 14 view .LVU226
 986              		.loc 1 206 30 view .LVU227
 987              	.LBE19:
 205:fp.c          ****         for (size_t i = 0; i < 64; ++i, t >>= 1)
 988              		.loc 1 205 18 is_stmt 0 view .LVU228
 989 0048 4026     		movs	r6, #64
 990              	.LVL81:
 991              	.L53:
 992              	.LBB20:
 207:fp.c          ****         {
 208:fp.c          ****             if (t & 1)
 993              		.loc 1 208 13 is_stmt 1 view .LVU229
 994              		.loc 1 208 16 is_stmt 0 view .LVU230
 995 004a E307     		lsls	r3, r4, #31
 996 004c 03D5     		bpl	.L52
 209:fp.c          ****                 fp_mul2(x, &y);
 997              		.loc 1 209 17 is_stmt 1 view .LVU231
 998 004e 6946     		mov	r1, sp
 999 0050 4046     		mov	r0, r8
 1000 0052 FFF7FEFF 		bl	fp_mul2
 1001              	.LVL82:
 1002              	.L52:
 210:fp.c          ****             fp_sq1(&y);
 1003              		.loc 1 210 13 discriminator 2 view .LVU232
 1004 0056 6846     		mov	r0, sp
 1005 0058 FFF7FEFF 		bl	fp_sq1
 1006              	.LVL83:
 206:fp.c          ****         {
 1007              		.loc 1 206 39 discriminator 2 view .LVU233
 206:fp.c          ****         {
 1008              		.loc 1 206 43 is_stmt 0 discriminator 2 view .LVU234
 1009 005c 6408     		lsrs	r4, r4, #1
 1010              	.LVL84:
 206:fp.c          ****         {
 1011              		.loc 1 206 30 discriminator 2 view .LVU235
 1012 005e 013E     		subs	r6, r6, #1
 1013              	.LVL85:
 206:fp.c          ****         {
 1014              		.loc 1 206 43 discriminator 2 view .LVU236
 1015 0060 44EAC974 		orr	r4, r4, r9, lsl #31
 1016 0064 4FEA5909 		lsr	r9, r9, #1
 1017              	.LVL86:
 206:fp.c          ****         {
 1018              		.loc 1 206 30 is_stmt 1 discriminator 2 view .LVU237
 1019 0068 EFD1     		bne	.L53
 1020              	.LBE20:
 1021              	.LBE18:
 203:fp.c          ****     {
 1022              		.loc 1 203 35 discriminator 2 view .LVU238
 203:fp.c          ****     {
 1023              		.loc 1 203 26 discriminator 2 view .LVU239
 1024 006a BD42     		cmp	r5, r7
 1025 006c E8D1     		bne	.L54
 1026              	.LBE17:
 211:fp.c          ****         }
 212:fp.c          ****     }
 213:fp.c          **** }
 1027              		.loc 1 213 1 is_stmt 0 view .LVU240
 1028 006e 11B0     		add	sp, sp, #68
 1029              	.LCFI19:
 1030              		.cfi_def_cfa_offset 28
 1031              		@ sp needed
 1032 0070 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1033              	.LVL87:
 1034              	.L58:
 1035              		.loc 1 213 1 view .LVU241
 1036              		.align	2
 1037              	.L57:
 1038 0074 00000000 		.word	fp_1
 1039              		.cfi_endproc
 1040              	.LFE13:
 1042              		.section	.text.fp_inv,"ax",%progbits
 1043              		.align	1
 1044              		.global	fp_inv
 1045              		.syntax unified
 1046              		.thumb
 1047              		.thumb_func
 1049              	fp_inv:
 1050              	.LVL88:
 1051              	.LFB14:
 214:fp.c          **** 
 215:fp.c          **** void fp_inv(fp *x)
 216:fp.c          **** {
 1052              		.loc 1 216 1 is_stmt 1 view -0
 1053              		.cfi_startproc
 1054              		@ args = 0, pretend = 0, frame = 0
 1055              		@ frame_needed = 0, uses_anonymous_args = 0
 1056              		@ link register save eliminated.
 217:fp.c          ****     fp_pow(x, &p_minus_2);
 1057              		.loc 1 217 5 view .LVU243
 1058 0000 0149     		ldr	r1, .L60
 1059 0002 FFF7FEBF 		b	fp_pow
 1060              	.LVL89:
 1061              	.L61:
 1062              		.loc 1 217 5 is_stmt 0 view .LVU244
 1063 0006 00BF     		.align	2
 1064              	.L60:
 1065 0008 00000000 		.word	p_minus_2
 1066              		.cfi_endproc
 1067              	.LFE14:
 1069              		.section	.text.fp_issquare,"ax",%progbits
 1070              		.align	1
 1071              		.global	fp_issquare
 1072              		.syntax unified
 1073              		.thumb
 1074              		.thumb_func
 1076              	fp_issquare:
 1077              	.LVL90:
 1078              	.LFB15:
 218:fp.c          **** }
 219:fp.c          **** 
 220:fp.c          **** bool fp_issquare(fp *x)
 221:fp.c          **** {
 1079              		.loc 1 221 1 is_stmt 1 view -0
 1080              		.cfi_startproc
 1081              		@ args = 0, pretend = 0, frame = 0
 1082              		@ frame_needed = 0, uses_anonymous_args = 0
 222:fp.c          ****     fp_pow(x, &p_minus_1_halves);
 1083              		.loc 1 222 5 view .LVU246
 221:fp.c          ****     fp_pow(x, &p_minus_1_halves);
 1084              		.loc 1 221 1 is_stmt 0 view .LVU247
 1085 0000 10B5     		push	{r4, lr}
 1086              	.LCFI20:
 1087              		.cfi_def_cfa_offset 8
 1088              		.cfi_offset 4, -8
 1089              		.cfi_offset 14, -4
 1090              		.loc 1 222 5 view .LVU248
 1091 0002 0649     		ldr	r1, .L63
 221:fp.c          ****     fp_pow(x, &p_minus_1_halves);
 1092              		.loc 1 221 1 view .LVU249
 1093 0004 0446     		mov	r4, r0
 1094              		.loc 1 222 5 view .LVU250
 1095 0006 FFF7FEFF 		bl	fp_pow
 1096              	.LVL91:
 223:fp.c          ****     return !memcmp(x, &fp_1, sizeof(fp));
 1097              		.loc 1 223 5 is_stmt 1 view .LVU251
 1098              		.loc 1 223 13 is_stmt 0 view .LVU252
 1099 000a 0549     		ldr	r1, .L63+4
 1100 000c 4022     		movs	r2, #64
 1101 000e 2046     		mov	r0, r4
 1102 0010 FFF7FEFF 		bl	memcmp
 1103              	.LVL92:
 224:fp.c          **** }
 1104              		.loc 1 224 1 view .LVU253
 1105 0014 B0FA80F0 		clz	r0, r0
 1106 0018 4009     		lsrs	r0, r0, #5
 1107 001a 10BD     		pop	{r4, pc}
 1108              	.LVL93:
 1109              	.L64:
 1110              		.loc 1 224 1 view .LVU254
 1111              		.align	2
 1112              	.L63:
 1113 001c 00000000 		.word	p_minus_1_halves
 1114 0020 00000000 		.word	fp_1
 1115              		.cfi_endproc
 1116              	.LFE15:
 1118              		.section	.text.fp_random,"ax",%progbits
 1119              		.align	1
 1120              		.global	fp_random
 1121              		.syntax unified
 1122              		.thumb
 1123              		.thumb_func
 1125              	fp_random:
 1126              	.LVL94:
 1127              	.LFB16:
 225:fp.c          **** 
 226:fp.c          **** void fp_random(fp *x)
 227:fp.c          **** {
 1128              		.loc 1 227 1 is_stmt 1 view -0
 1129              		.cfi_startproc
 1130              		@ args = 0, pretend = 0, frame = 0
 1131              		@ frame_needed = 0, uses_anonymous_args = 0
 1132              		.loc 1 227 1 is_stmt 0 view .LVU256
 1133 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1134              	.LCFI21:
 1135              		.cfi_def_cfa_offset 24
 1136              		.cfi_offset 3, -24
 1137              		.cfi_offset 4, -20
 1138              		.cfi_offset 5, -16
 1139              		.cfi_offset 6, -12
 1140              		.cfi_offset 7, -8
 1141              		.cfi_offset 14, -4
 1142              	.LBB21:
 228:fp.c          ****     while (1)
 229:fp.c          ****     {
 230:fp.c          ****         randombytes((unsigned char *)x, sizeof(fp));
 231:fp.c          ****         uint64_t m = ((uint64_t)1 << pbits % 64) - 1;
 1143              		.loc 1 231 44 view .LVU257
 1144 0002 1A4E     		ldr	r6, .L72
 1145              	.LBE21:
 227:fp.c          ****     while (1)
 1146              		.loc 1 227 1 view .LVU258
 1147 0004 0446     		mov	r4, r0
 1148              	.LBB23:
 232:fp.c          ****         x->c[LIMBS - 1] &= m;
 1149              		.loc 1 232 25 view .LVU259
 1150 0006 4FF0FF35 		mov	r5, #-1
 1151              	.LVL95:
 1152              	.L70:
 1153              		.loc 1 232 25 view .LVU260
 1154              	.LBE23:
 228:fp.c          ****     while (1)
 1155              		.loc 1 228 5 is_stmt 1 view .LVU261
 1156              	.LBB24:
 230:fp.c          ****         uint64_t m = ((uint64_t)1 << pbits % 64) - 1;
 1157              		.loc 1 230 9 view .LVU262
 1158 000a 4021     		movs	r1, #64
 1159 000c 2046     		mov	r0, r4
 1160 000e FFF7FEFF 		bl	randombytes
 1161              	.LVL96:
 231:fp.c          ****         x->c[LIMBS - 1] &= m;
 1162              		.loc 1 231 9 view .LVU263
 1163              		.loc 1 232 9 view .LVU264
 231:fp.c          ****         x->c[LIMBS - 1] &= m;
 1164              		.loc 1 231 44 is_stmt 0 view .LVU265
 1165 0012 3368     		ldr	r3, [r6]
 1166 0014 03F03F03 		and	r3, r3, #63
 1167              		.loc 1 232 25 view .LVU266
 1168 0018 A3F12000 		sub	r0, r3, #32
 1169 001c C3F12001 		rsb	r1, r3, #32
 1170 0020 05FA03F2 		lsl	r2, r5, r3
 1171 0024 05FA00F0 		lsl	r0, r5, r0
 1172 0028 0243     		orrs	r2, r2, r0
 1173 002a 25FA01F1 		lsr	r1, r5, r1
 1174 002e 0A43     		orrs	r2, r2, r1
 1175 0030 D4E90E01 		ldrd	r0, r1, [r4, #56]
 1176 0034 05FA03F3 		lsl	r3, r5, r3
 1177 0038 20EA0300 		bic	r0, r0, r3
 1178 003c 21EA0201 		bic	r1, r1, r2
 1179 0040 C4E90E01 		strd	r0, r1, [r4, #56]
 233:fp.c          **** 
 234:fp.c          ****         for (size_t i = LIMBS - 1; i < LIMBS; --i)
 1180              		.loc 1 234 9 is_stmt 1 view .LVU267
 1181              	.LBB22:
 1182              		.loc 1 234 14 view .LVU268
 1183              	.LVL97:
 1184              		.loc 1 234 38 view .LVU269
 1185 0044 0A4A     		ldr	r2, .L72+4
 1186 0046 04F14003 		add	r3, r4, #64
 1187              	.LVL98:
 1188              	.L68:
 235:fp.c          ****             if (x->c[i] < p.c[i])
 1189              		.loc 1 235 13 view .LVU270
 1190              		.loc 1 235 21 is_stmt 0 view .LVU271
 1191 004a 53F8087D 		ldr	r7, [r3, #-8]!
 1192              		.loc 1 235 30 view .LVU272
 1193 004e 52F808CD 		ldr	ip, [r2, #-8]!
 1194              		.loc 1 235 21 view .LVU273
 1195 0052 5868     		ldr	r0, [r3, #4]
 1196              		.loc 1 235 30 view .LVU274
 1197 0054 5168     		ldr	r1, [r2, #4]
 1198              		.loc 1 235 16 view .LVU275
 1199 0056 6745     		cmp	r7, ip
 1200 0058 70EB010E 		sbcs	lr, r0, r1
 1201 005c 05D3     		bcc	.L71
 236:fp.c          ****                 return;
 237:fp.c          ****             else if (x->c[i] > p.c[i])
 1202              		.loc 1 237 18 is_stmt 1 view .LVU276
 1203              		.loc 1 237 21 is_stmt 0 view .LVU277
 1204 005e BC45     		cmp	ip, r7
 1205 0060 8141     		sbcs	r1, r1, r0
 1206 0062 D2D3     		bcc	.L70
 234:fp.c          ****             if (x->c[i] < p.c[i])
 1207              		.loc 1 234 47 is_stmt 1 discriminator 2 view .LVU278
 234:fp.c          ****             if (x->c[i] < p.c[i])
 1208              		.loc 1 234 38 discriminator 2 view .LVU279
 1209 0064 A342     		cmp	r3, r4
 1210 0066 F0D1     		bne	.L68
 1211 0068 CFE7     		b	.L70
 1212              	.L71:
 234:fp.c          ****             if (x->c[i] < p.c[i])
 1213              		.loc 1 234 38 is_stmt 0 discriminator 2 view .LVU280
 1214              	.LBE22:
 1215              	.LBE24:
 238:fp.c          ****                 break;
 239:fp.c          ****     }
 240:fp.c          **** }
 1216              		.loc 1 240 1 view .LVU281
 1217 006a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1218              	.LVL99:
 1219              	.L73:
 1220              		.loc 1 240 1 view .LVU282
 1221              		.align	2
 1222              	.L72:
 1223 006c 00000000 		.word	pbits
 1224 0070 40000000 		.word	p+64
 1225              		.cfi_endproc
 1226              	.LFE16:
 1228              		.text
 1229              	.Letext0:
 1230              		.file 2 "/nix/store/ys6f5rkagvk7j6mawa5fiakglv1568hl-gcc-arm-embedded-12.2.rel1/lib/gcc/arm-none-e
 1231              		.file 3 "/nix/store/ys6f5rkagvk7j6mawa5fiakglv1568hl-gcc-arm-embedded-12.2.rel1/arm-none-eabi/incl
 1232              		.file 4 "/nix/store/ys6f5rkagvk7j6mawa5fiakglv1568hl-gcc-arm-embedded-12.2.rel1/arm-none-eabi/incl
 1233              		.file 5 "parametrization.h"
 1234              		.file 6 "uint.h"
 1235              		.file 7 "randombytes.h"
 1236              		.file 8 "/nix/store/ys6f5rkagvk7j6mawa5fiakglv1568hl-gcc-arm-embedded-12.2.rel1/arm-none-eabi/incl
 1237              		.file 9 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 fp.c
     /tmp/ccs0LewG.s:19     .text.reduce_once:0000000000000000 $t
     /tmp/ccs0LewG.s:24     .text.reduce_once:0000000000000000 reduce_once
     /tmp/ccs0LewG.s:83     .text.reduce_once:000000000000002c $d
     /tmp/ccs0LewG.s:88     .text.fp_add3:0000000000000000 $t
     /tmp/ccs0LewG.s:94     .text.fp_add3:0000000000000000 fp_add3
     /tmp/ccs0LewG.s:130    .text.fp_add2:0000000000000000 $t
     /tmp/ccs0LewG.s:136    .text.fp_add2:0000000000000000 fp_add2
     /tmp/ccs0LewG.s:158    .text.fp_sub3:0000000000000000 $t
     /tmp/ccs0LewG.s:164    .text.fp_sub3:0000000000000000 fp_sub3
     /tmp/ccs0LewG.s:222    .text.fp_sub3:000000000000001c $d
     /tmp/ccs0LewG.s:227    .text.fp_sub2:0000000000000000 $t
     /tmp/ccs0LewG.s:233    .text.fp_sub2:0000000000000000 fp_sub2
     /tmp/ccs0LewG.s:255    .text.fp_mul3:0000000000000000 $t
     /tmp/ccs0LewG.s:261    .text.fp_mul3:0000000000000000 fp_mul3
     /tmp/ccs0LewG.s:662    .text.fp_mul3:0000000000000258 $d
     /tmp/ccs0LewG.s:668    .text.fp_enc:0000000000000000 $t
     /tmp/ccs0LewG.s:674    .text.fp_enc:0000000000000000 fp_enc
     /tmp/ccs0LewG.s:690    .text.fp_enc:0000000000000008 $d
     /tmp/ccs0LewG.s:695    .text.fp_set:0000000000000000 $t
     /tmp/ccs0LewG.s:701    .text.fp_set:0000000000000000 fp_set
     /tmp/ccs0LewG.s:738    .text.fp_dec:0000000000000000 $t
     /tmp/ccs0LewG.s:744    .text.fp_dec:0000000000000000 fp_dec
     /tmp/ccs0LewG.s:760    .text.fp_dec:0000000000000008 $d
     /tmp/ccs0LewG.s:765    .text.fp_cswap:0000000000000000 $t
     /tmp/ccs0LewG.s:771    .text.fp_cswap:0000000000000000 fp_cswap
     /tmp/ccs0LewG.s:833    .text.fp_mul2:0000000000000000 $t
     /tmp/ccs0LewG.s:839    .text.fp_mul2:0000000000000000 fp_mul2
     /tmp/ccs0LewG.s:861    .text.fp_sq2:0000000000000000 $t
     /tmp/ccs0LewG.s:867    .text.fp_sq2:0000000000000000 fp_sq2
     /tmp/ccs0LewG.s:886    .text.fp_sq1:0000000000000000 $t
     /tmp/ccs0LewG.s:892    .text.fp_sq1:0000000000000000 fp_sq1
     /tmp/ccs0LewG.s:911    .text.fp_pow:0000000000000000 $t
     /tmp/ccs0LewG.s:916    .text.fp_pow:0000000000000000 fp_pow
     /tmp/ccs0LewG.s:1038   .text.fp_pow:0000000000000074 $d
     /tmp/ccs0LewG.s:1043   .text.fp_inv:0000000000000000 $t
     /tmp/ccs0LewG.s:1049   .text.fp_inv:0000000000000000 fp_inv
     /tmp/ccs0LewG.s:1065   .text.fp_inv:0000000000000008 $d
     /tmp/ccs0LewG.s:1070   .text.fp_issquare:0000000000000000 $t
     /tmp/ccs0LewG.s:1076   .text.fp_issquare:0000000000000000 fp_issquare
     /tmp/ccs0LewG.s:1113   .text.fp_issquare:000000000000001c $d
     /tmp/ccs0LewG.s:1119   .text.fp_random:0000000000000000 $t
     /tmp/ccs0LewG.s:1125   .text.fp_random:0000000000000000 fp_random
     /tmp/ccs0LewG.s:1223   .text.fp_random:000000000000006c $d

UNDEFINED SYMBOLS
uint_sub3
p
uint_add3
memset
mult64to128
inv_min_p_mod_r
r_squared_mod_p
uint_set
uint_1
fp_1
p_minus_2
memcmp
p_minus_1_halves
randombytes
pbits
