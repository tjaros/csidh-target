
main-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  08003d08  08003d08  00013d08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042f0  080042f0  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  080042f0  080042f0  000142f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042f8  080042f8  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042f8  080042f8  000142f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042fc  080042fc  000142fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08004300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  200000b0  080043b0  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000400  20000480  080043b0  00020480  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008de7  00000000  00000000  000200da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017ee  00000000  00000000  00028ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00005042  00000000  00000000  0002a6af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003c8  00000000  00000000  0002f6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000828  00000000  00000000  0002fab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000046c3  00000000  00000000  000302e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00001706  00000000  00000000  000349a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000045  00000000  00000000  000360aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015d8  00000000  00000000  000360f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  000376c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000031  00000000  00000000  0003780c  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_line_str 000001a2  00000000  00000000  0003783d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001a4:	f000 b80c 	b.w	80001c0 <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f002 fc48 	bl	8002a44 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__aeabi_idiv0>:
 80001c0:	4770      	bx	lr
 80001c2:	bf00      	nop
 80001c4:	0000      	movs	r0, r0
 80001c6:	0000      	movs	r0, r0
 80001c8:	0000      	movs	r0, r0
 80001ca:	0000      	movs	r0, r0
 80001cc:	0000      	movs	r0, r0
 80001ce:	0000      	movs	r0, r0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <deregister_tm_clones>:
 8000270:	4803      	ldr	r0, [pc, #12]	; (8000280 <deregister_tm_clones+0x10>)
 8000272:	4b04      	ldr	r3, [pc, #16]	; (8000284 <deregister_tm_clones+0x14>)
 8000274:	4283      	cmp	r3, r0
 8000276:	d002      	beq.n	800027e <deregister_tm_clones+0xe>
 8000278:	4b03      	ldr	r3, [pc, #12]	; (8000288 <deregister_tm_clones+0x18>)
 800027a:	b103      	cbz	r3, 800027e <deregister_tm_clones+0xe>
 800027c:	4718      	bx	r3
 800027e:	4770      	bx	lr
 8000280:	200000b0 	.word	0x200000b0
 8000284:	200000b0 	.word	0x200000b0
 8000288:	00000000 	.word	0x00000000

0800028c <register_tm_clones>:
 800028c:	4805      	ldr	r0, [pc, #20]	; (80002a4 <register_tm_clones+0x18>)
 800028e:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <register_tm_clones+0x1c>)
 8000290:	1a1b      	subs	r3, r3, r0
 8000292:	0fd9      	lsrs	r1, r3, #31
 8000294:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 8000298:	1049      	asrs	r1, r1, #1
 800029a:	d002      	beq.n	80002a2 <register_tm_clones+0x16>
 800029c:	4b03      	ldr	r3, [pc, #12]	; (80002ac <register_tm_clones+0x20>)
 800029e:	b103      	cbz	r3, 80002a2 <register_tm_clones+0x16>
 80002a0:	4718      	bx	r3
 80002a2:	4770      	bx	lr
 80002a4:	200000b0 	.word	0x200000b0
 80002a8:	200000b0 	.word	0x200000b0
 80002ac:	00000000 	.word	0x00000000

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c06      	ldr	r4, [pc, #24]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b943      	cbnz	r3, 80002ca <__do_global_dtors_aux+0x1a>
 80002b8:	f7ff ffda 	bl	8000270 <deregister_tm_clones>
 80002bc:	4b04      	ldr	r3, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	b113      	cbz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002c0:	4804      	ldr	r0, [pc, #16]	; (80002d4 <__do_global_dtors_aux+0x24>)
 80002c2:	f3af 8000 	nop.w
 80002c6:	2301      	movs	r3, #1
 80002c8:	7023      	strb	r3, [r4, #0]
 80002ca:	bd10      	pop	{r4, pc}
 80002cc:	20000318 	.word	0x20000318
 80002d0:	00000000 	.word	0x00000000
 80002d4:	08003cec 	.word	0x08003cec

080002d8 <frame_dummy>:
 80002d8:	b508      	push	{r3, lr}
 80002da:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <frame_dummy+0x18>)
 80002dc:	b11b      	cbz	r3, 80002e6 <frame_dummy+0xe>
 80002de:	4905      	ldr	r1, [pc, #20]	; (80002f4 <frame_dummy+0x1c>)
 80002e0:	4805      	ldr	r0, [pc, #20]	; (80002f8 <frame_dummy+0x20>)
 80002e2:	f3af 8000 	nop.w
 80002e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80002ea:	f7ff bfcf 	b.w	800028c <register_tm_clones>
 80002ee:	bf00      	nop
 80002f0:	00000000 	.word	0x00000000
 80002f4:	2000031c 	.word	0x2000031c
 80002f8:	08003cec 	.word	0x08003cec

080002fc <set_secret>:
    simpleserial_put('r', (uint8_t) sizeof(pk.A.c), (void *) pk.A.c);
    return 0;
}

uint8_t set_secret(uint8_t cmd, uint8_t scmd, uint8_t dlen, uint8_t* data)
{
 80002fc:	b508      	push	{r3, lr}
    memcpy(sk.e, (void *) data, NUM_PRIMES);
 80002fe:	224a      	movs	r2, #74	; 0x4a
 8000300:	4619      	mov	r1, r3
 8000302:	4802      	ldr	r0, [pc, #8]	; (800030c <set_secret+0x10>)
 8000304:	f002 fd20 	bl	8002d48 <memcpy>
    return 0;
}
 8000308:	2000      	movs	r0, #0
 800030a:	bd08      	pop	{r3, pc}
 800030c:	200000b0 	.word	0x200000b0

08000310 <get_public>:
{
 8000310:	b508      	push	{r3, lr}
    simpleserial_put('r', (uint8_t) sizeof(pk.A.c), (void *) pk.A.c);
 8000312:	4a03      	ldr	r2, [pc, #12]	; (8000320 <get_public+0x10>)
 8000314:	2140      	movs	r1, #64	; 0x40
 8000316:	2072      	movs	r0, #114	; 0x72
 8000318:	f001 fc06 	bl	8001b28 <simpleserial_put>
}
 800031c:	2000      	movs	r0, #0
 800031e:	bd08      	pop	{r3, pc}
 8000320:	20000100 	.word	0x20000100

08000324 <get_secret>:

uint8_t get_secret(uint8_t cmd, uint8_t scmd, uint8_t dlen, uint8_t* data)
{
 8000324:	b508      	push	{r3, lr}
    simpleserial_put('r', (uint8_t) sizeof(sk.e), (void *) sk.e);
 8000326:	4a03      	ldr	r2, [pc, #12]	; (8000334 <get_secret+0x10>)
 8000328:	214a      	movs	r1, #74	; 0x4a
 800032a:	2072      	movs	r0, #114	; 0x72
 800032c:	f001 fbfc 	bl	8001b28 <simpleserial_put>
    return 0;
}
 8000330:	2000      	movs	r0, #0
 8000332:	bd08      	pop	{r3, pc}
 8000334:	200000b0 	.word	0x200000b0

08000338 <run_csidh>:

// Runs a group action on current public key and the secret
uint8_t run_csidh(uint8_t cmd, uint8_t scmd, uint8_t dlen, uint8_t* data)
{
 8000338:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t error = csidh(&result, &pk, &sk, num_batches, max_exponent, num_isogenies, my);
 800033a:	4c13      	ldr	r4, [pc, #76]	; (8000388 <run_csidh+0x50>)
 800033c:	4b13      	ldr	r3, [pc, #76]	; (800038c <run_csidh+0x54>)
 800033e:	f894 20d0 	ldrb.w	r2, [r4, #208]	; 0xd0
 8000342:	9202      	str	r2, [sp, #8]
 8000344:	685a      	ldr	r2, [r3, #4]
 8000346:	9201      	str	r2, [sp, #4]
 8000348:	f103 0208 	add.w	r2, r3, #8
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	f104 0150 	add.w	r1, r4, #80	; 0x50
 8000352:	4622      	mov	r2, r4
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	f104 0090 	add.w	r0, r4, #144	; 0x90
 800035a:	f000 fab3 	bl	80008c4 <csidh>
    pk = result;
 800035e:	f104 0550 	add.w	r5, r4, #80	; 0x50
 8000362:	3490      	adds	r4, #144	; 0x90
    uint8_t error = csidh(&result, &pk, &sk, num_batches, max_exponent, num_isogenies, my);
 8000364:	4606      	mov	r6, r0
    pk = result;
 8000366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000368:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800036a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800036c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800036e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000370:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000372:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}


    if (error != 0)
        return 0x10+error;
    return 0;
 8000376:	2e00      	cmp	r6, #0
    pk = result;
 8000378:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800037c:	bf14      	ite	ne
 800037e:	2011      	movne	r0, #17
 8000380:	2000      	moveq	r0, #0
 8000382:	b004      	add	sp, #16
 8000384:	bd70      	pop	{r4, r5, r6, pc}
 8000386:	bf00      	nop
 8000388:	200000b0 	.word	0x200000b0
 800038c:	20000000 	.word	0x20000000

08000390 <set_public>:
    if (scmd == 0x01)
 8000390:	2901      	cmp	r1, #1
{
 8000392:	b530      	push	{r4, r5, lr}
        pk = base;
 8000394:	4c0c      	ldr	r4, [pc, #48]	; (80003c8 <set_public+0x38>)
    if (scmd == 0x01)
 8000396:	d10c      	bne.n	80003b2 <set_public+0x22>
        pk = base;
 8000398:	4d0c      	ldr	r5, [pc, #48]	; (80003cc <set_public+0x3c>)
 800039a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800039c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800039e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80003aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80003ae:	2000      	movs	r0, #0
 80003b0:	bd30      	pop	{r4, r5, pc}
        memcpy(pk.A.c, (void *) data, LIMBS * 8);
 80003b2:	f103 0540 	add.w	r5, r3, #64	; 0x40
 80003b6:	6818      	ldr	r0, [r3, #0]
 80003b8:	6859      	ldr	r1, [r3, #4]
 80003ba:	4622      	mov	r2, r4
 80003bc:	c203      	stmia	r2!, {r0, r1}
 80003be:	3308      	adds	r3, #8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	4614      	mov	r4, r2
 80003c4:	d1f7      	bne.n	80003b6 <set_public+0x26>
 80003c6:	e7f2      	b.n	80003ae <set_public+0x1e>
 80003c8:	20000100 	.word	0x20000100
 80003cc:	08003e20 	.word	0x08003e20

080003d0 <api>:
}

#endif

void api(void)
{
 80003d0:	b508      	push	{r3, lr}
    // Set/Get public
    simpleserial_addcmd('1', LIMBS * 8, set_public);
 80003d2:	4a0e      	ldr	r2, [pc, #56]	; (800040c <api+0x3c>)
 80003d4:	2140      	movs	r1, #64	; 0x40
 80003d6:	2031      	movs	r0, #49	; 0x31
 80003d8:	f001 fb7a 	bl	8001ad0 <simpleserial_addcmd>
    simpleserial_addcmd('2', 0, get_public);
 80003dc:	4a0c      	ldr	r2, [pc, #48]	; (8000410 <api+0x40>)
 80003de:	2100      	movs	r1, #0
 80003e0:	2032      	movs	r0, #50	; 0x32
 80003e2:	f001 fb75 	bl	8001ad0 <simpleserial_addcmd>
    // Set/Get private
    simpleserial_addcmd('3', NUM_PRIMES, set_secret);
 80003e6:	4a0b      	ldr	r2, [pc, #44]	; (8000414 <api+0x44>)
 80003e8:	214a      	movs	r1, #74	; 0x4a
 80003ea:	2033      	movs	r0, #51	; 0x33
 80003ec:	f001 fb70 	bl	8001ad0 <simpleserial_addcmd>
    simpleserial_addcmd('4', 0, get_secret);
 80003f0:	4a09      	ldr	r2, [pc, #36]	; (8000418 <api+0x48>)
 80003f2:	2100      	movs	r1, #0
 80003f4:	2034      	movs	r0, #52	; 0x34
 80003f6:	f001 fb6b 	bl	8001ad0 <simpleserial_addcmd>
    // csidh does not need arguments
    simpleserial_addcmd('5', 0, run_csidh);
 80003fa:	4a08      	ldr	r2, [pc, #32]	; (800041c <api+0x4c>)
 80003fc:	2100      	movs	r1, #0
 80003fe:	2035      	movs	r0, #53	; 0x35
 8000400:	f001 fb66 	bl	8001ad0 <simpleserial_addcmd>
    simpleserial_addcmd('6', 0, tests);
    #endif

    while (1)
    {
        simpleserial_get();
 8000404:	f001 fbe8 	bl	8001bd8 <simpleserial_get>
    while (1)
 8000408:	e7fc      	b.n	8000404 <api+0x34>
 800040a:	bf00      	nop
 800040c:	08000391 	.word	0x08000391
 8000410:	08000311 	.word	0x08000311
 8000414:	080002fd 	.word	0x080002fd
 8000418:	08000325 	.word	0x08000325
 800041c:	08000339 	.word	0x08000339

08000420 <main>:
    }
}

int main(void)
{
 8000420:	b508      	push	{r3, lr}
    platform_init();
 8000422:	f001 fc45 	bl	8001cb0 <platform_init>
    init_uart();
 8000426:	f001 fc83 	bl	8001d30 <init_uart>

    putch('r');
 800042a:	2072      	movs	r0, #114	; 0x72
 800042c:	f001 fcd8 	bl	8001de0 <putch>
    putch('e');
 8000430:	2065      	movs	r0, #101	; 0x65
 8000432:	f001 fcd5 	bl	8001de0 <putch>
    putch('s');
 8000436:	2073      	movs	r0, #115	; 0x73
 8000438:	f001 fcd2 	bl	8001de0 <putch>
    putch('e');
 800043c:	2065      	movs	r0, #101	; 0x65
 800043e:	f001 fccf 	bl	8001de0 <putch>
    putch('t');
 8000442:	2074      	movs	r0, #116	; 0x74
 8000444:	f001 fccc 	bl	8001de0 <putch>


    simpleserial_init();
 8000448:	f001 fb5c 	bl	8001b04 <simpleserial_init>
    api();
 800044c:	f7ff ffc0 	bl	80003d0 <api>

08000450 <isequal>:
{
    //size_t i;
    uint32_t r = 0;
    unsigned char *ta = (unsigned char *)&a;
    unsigned char *tb = (unsigned char *)&b;
    r = (ta[0] ^ tb[0]) | (ta[1] ^ tb[1]) | (ta[2] ^ tb[2]) | (ta[3] ^ tb[3]);
 8000450:	ea80 0301 	eor.w	r3, r0, r1
 8000454:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000458:	4313      	orrs	r3, r2
 800045a:	ea81 0200 	eor.w	r2, r1, r0
 800045e:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8000462:	4313      	orrs	r3, r2
 8000464:	4048      	eors	r0, r1
 8000466:	ea43 6010 	orr.w	r0, r3, r0, lsr #24
 800046a:	b2c0      	uxtb	r0, r0
    r = (-r);
 800046c:	4240      	negs	r0, r0
    r = r >> 31;
 800046e:	0fc0      	lsrs	r0, r0, #31
    return (int)(1 - r);
}
 8000470:	f1c0 0001 	rsb	r0, r0, #1
 8000474:	4770      	bx	lr

08000476 <cmov>:
/* decision bit b has to be either 0 or 1 */
void cmov(int8_t *r, const int8_t *a, uint32_t b)
{
    uint32_t t;
    b = -b; /* Now b is either 0 or 0xffffffff */
    t = (*r ^ *a) & b;
 8000476:	780b      	ldrb	r3, [r1, #0]
{
 8000478:	b510      	push	{r4, lr}
    t = (*r ^ *a) & b;
 800047a:	f990 4000 	ldrsb.w	r4, [r0]
 800047e:	4063      	eors	r3, r4
 8000480:	b25b      	sxtb	r3, r3
    b = -b; /* Now b is either 0 or 0xffffffff */
 8000482:	4252      	negs	r2, r2
    t = (*r ^ *a) & b;
 8000484:	4013      	ands	r3, r2
    *r ^= t;
 8000486:	405c      	eors	r4, r3
 8000488:	7004      	strb	r4, [r0, #0]
}
 800048a:	bd10      	pop	{r4, pc}

0800048c <lookup>:
{
 800048c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int8_t r = priv[0];
 800048e:	780b      	ldrb	r3, [r1, #0]
 8000490:	f88d 3007 	strb.w	r3, [sp, #7]
{
 8000494:	4606      	mov	r6, r0
 8000496:	460d      	mov	r5, r1
    for (size_t i = 1; i < NUM_PRIMES; i++)
 8000498:	2401      	movs	r4, #1
        b = isequal(i, pos);
 800049a:	4631      	mov	r1, r6
 800049c:	4620      	mov	r0, r4
 800049e:	f7ff ffd7 	bl	8000450 <isequal>
        cmov(&r, &priv[i], b);
 80004a2:	1929      	adds	r1, r5, r4
        b = isequal(i, pos);
 80004a4:	4602      	mov	r2, r0
    for (size_t i = 1; i < NUM_PRIMES; i++)
 80004a6:	3401      	adds	r4, #1
        cmov(&r, &priv[i], b);
 80004a8:	f10d 0007 	add.w	r0, sp, #7
 80004ac:	f7ff ffe3 	bl	8000476 <cmov>
    for (size_t i = 1; i < NUM_PRIMES; i++)
 80004b0:	2c4a      	cmp	r4, #74	; 0x4a
 80004b2:	d1f2      	bne.n	800049a <lookup+0xe>
}
 80004b4:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 80004b8:	b002      	add	sp, #8
 80004ba:	bd70      	pop	{r4, r5, r6, pc}

080004bc <elligator>:
}
*/

/* generates curve points */
void elligator(proj *P, proj *Pd, const fp *A)
{
 80004bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80004c0:	b0c0      	sub	sp, #256	; 0x100
 80004c2:	4606      	mov	r6, r0

#if defined(DETERMINISTIC)
    fp u2 = {{0xf73849b0ce4e064b, 0x94bbfb03237b4a47, 0x467d743c736b034f, 0xb3fee59267e9b9e8, 0x036bafb7d4af3814, 0x05b62c28c87084ce, 0x620a625431f0111e, 0x03d7f790ac52fd83}};
#else
    fp u2;
    fp_random(&u2);
 80004c4:	a830      	add	r0, sp, #192	; 0xc0
{
 80004c6:	460c      	mov	r4, r1
 80004c8:	4615      	mov	r5, r2
    fp_random(&u2);
 80004ca:	f000 fbf1 	bl	8000cb0 <fp_random>
#endif

    fp_sq1(&u2);                // u^2
 80004ce:	a830      	add	r0, sp, #192	; 0xc0
 80004d0:	f000 fb96 	bl	8000c00 <fp_sq1>
    fp_sub3(&u2m1, &u2, &fp_1); // u^2 - 1
 80004d4:	4a2d      	ldr	r2, [pc, #180]	; (800058c <elligator+0xd0>)
 80004d6:	a930      	add	r1, sp, #192	; 0xc0
 80004d8:	4668      	mov	r0, sp
 80004da:	f000 fa21 	bl	8000920 <fp_sub3>
                                //uart_puts("3\n");
    fp_sq2(&tmp, &u2m1);        // (u^2 - 1)^2
 80004de:	4669      	mov	r1, sp
 80004e0:	a810      	add	r0, sp, #64	; 0x40
 80004e2:	f000 fb8a 	bl	8000bfa <fp_sq2>
    fp_sq2(&rhs, A);            // A^2
 80004e6:	4629      	mov	r1, r5
 80004e8:	a820      	add	r0, sp, #128	; 0x80
 80004ea:	f000 fb86 	bl	8000bfa <fp_sq2>
    fp_mul2(&rhs, &u2);         // A^2u^2
 80004ee:	a930      	add	r1, sp, #192	; 0xc0
 80004f0:	a820      	add	r0, sp, #128	; 0x80
 80004f2:	f000 fb7e 	bl	8000bf2 <fp_mul2>
    fp_add2(&rhs, &tmp);        // A^2u^2 + u(u^2 - 1)^2
 80004f6:	a910      	add	r1, sp, #64	; 0x40
 80004f8:	a820      	add	r0, sp, #128	; 0x80
 80004fa:	f000 fa0c 	bl	8000916 <fp_add2>
    fp_mul2(&rhs, A);           // (A^2u^2 + u(u^2 - 1)^2)A
 80004fe:	4629      	mov	r1, r5
 8000500:	a820      	add	r0, sp, #128	; 0x80
 8000502:	f000 fb76 	bl	8000bf2 <fp_mul2>
    fp_mul2(&rhs, &u2m1);       // (A^2u^2 + u(u^2 - 1)^2)A(u^2 - 1)
 8000506:	4669      	mov	r1, sp
 8000508:	a820      	add	r0, sp, #128	; 0x80
 800050a:	f000 fb72 	bl	8000bf2 <fp_mul2>
                                // uart_puts("4\n");
    fp_set(&P->x, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2300      	movs	r3, #0
 8000512:	4630      	mov	r0, r6
 8000514:	f000 fb4e 	bl	8000bb4 <fp_set>
    fp_add2(&P->x, A);
    fp_set(&P->z, 0);
 8000518:	f106 0740 	add.w	r7, r6, #64	; 0x40
    fp_add2(&P->x, A);
 800051c:	4629      	mov	r1, r5
 800051e:	4630      	mov	r0, r6
 8000520:	f000 f9f9 	bl	8000916 <fp_add2>
    fp_set(&P->z, 0);
 8000524:	2200      	movs	r2, #0
 8000526:	2300      	movs	r3, #0
 8000528:	4638      	mov	r0, r7
 800052a:	f000 fb43 	bl	8000bb4 <fp_set>
    fp_add2(&P->z, &u2m1);
 800052e:	4669      	mov	r1, sp
 8000530:	4638      	mov	r0, r7
 8000532:	f000 f9f0 	bl	8000916 <fp_add2>
    fp_set(&Pd->x, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	2300      	movs	r3, #0
 800053a:	4620      	mov	r0, r4
 800053c:	f000 fb3a 	bl	8000bb4 <fp_set>
    fp_sub2(&Pd->x, A);
 8000540:	4629      	mov	r1, r5
 8000542:	4620      	mov	r0, r4
 8000544:	f000 f9fc 	bl	8000940 <fp_sub2>
    fp_mul2(&Pd->x, &u2);
    fp_set(&Pd->z, 0);
 8000548:	f104 0840 	add.w	r8, r4, #64	; 0x40
    fp_mul2(&Pd->x, &u2);
 800054c:	a930      	add	r1, sp, #192	; 0xc0
 800054e:	4620      	mov	r0, r4
 8000550:	f000 fb4f 	bl	8000bf2 <fp_mul2>
    fp_set(&Pd->z, 0);
 8000554:	2300      	movs	r3, #0
 8000556:	2200      	movs	r2, #0
 8000558:	4640      	mov	r0, r8
 800055a:	f000 fb2b 	bl	8000bb4 <fp_set>
    fp_add2(&Pd->z, &u2m1);
 800055e:	4669      	mov	r1, sp
 8000560:	4640      	mov	r0, r8
 8000562:	f000 f9d8 	bl	8000916 <fp_add2>

    issquare = fp_issquare(&rhs);
 8000566:	a820      	add	r0, sp, #128	; 0x80
 8000568:	f000 fb90 	bl	8000c8c <fp_issquare>
    fp_cswap(&P->x, &Pd->x, !issquare);
 800056c:	f080 0501 	eor.w	r5, r0, #1
 8000570:	b2ed      	uxtb	r5, r5
 8000572:	462a      	mov	r2, r5
 8000574:	4621      	mov	r1, r4
 8000576:	4630      	mov	r0, r6
 8000578:	f000 fb26 	bl	8000bc8 <fp_cswap>
    fp_cswap(&P->z, &Pd->z, !issquare);
 800057c:	462a      	mov	r2, r5
 800057e:	4641      	mov	r1, r8
 8000580:	4638      	mov	r0, r7
 8000582:	f000 fb21 	bl	8000bc8 <fp_cswap>
}
 8000586:	b040      	add	sp, #256	; 0x100
 8000588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800058c:	08004038 	.word	0x08004038

08000590 <action>:
#endif

/* constant-time. */
bool action(public_key *out, public_key const *in, private_key const *priv,
            uint8_t num_batches, int8_t const *max_exponent, unsigned int const num_isogenies, uint8_t const my)
{
 8000590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000594:	f2ad 4d9c 	subw	sp, sp, #1180	; 0x49c
    //factors k for different batches
    uint_c k[3] = {{{0x1b5933af628d005c, 0x9d4af02b1d7b7f56, 0x8977a8435092262a, 0xb86302ff54a37ca2, 0xd6e09db2af04d095, 0x5c73f, 0x0, 0x0}},
                 {{0xd97b8b6bc6f6be1c, 0x315872c44ea6e448, 0x1aae7c54fd380c86, 0x237ec4cf2da454a2, 0x3733f9e3d9fea1b4, 0x1fdc0e, 0x0, 0x0}},
                 {{0x629ea97b02169a84, 0xc4b9616a12d48d22, 0x492a10278ad7b45a, 0xc44ac4dce55b87f8, 0x9e12876886632d6e, 0xe0c0c5, 0x0, 0x0}}};

    uint_c p_order = {{0x24403b2c196b9323, 0x8a8759a31723c208, 0xb4a93a543937992b, 0xcdd1f791dc7eb773, 0xff470bd36fd7823b, 0xfbcf1fc39d553409, 0x9478a78dd697be5c, 0x0ed9b5fb0f251816}};
 8000598:	4fb7      	ldr	r7, [pc, #732]	; (8000878 <action+0x2e8>)
{
 800059a:	9008      	str	r0, [sp, #32]
 800059c:	460c      	mov	r4, r1
 800059e:	4690      	mov	r8, r2
    uint_c k[3] = {{{0x1b5933af628d005c, 0x9d4af02b1d7b7f56, 0x8977a8435092262a, 0xb86302ff54a37ca2, 0xd6e09db2af04d095, 0x5c73f, 0x0, 0x0}},
 80005a0:	49b6      	ldr	r1, [pc, #728]	; (800087c <action+0x2ec>)
 80005a2:	22c0      	movs	r2, #192	; 0xc0
{
 80005a4:	461e      	mov	r6, r3
    uint_c k[3] = {{{0x1b5933af628d005c, 0x9d4af02b1d7b7f56, 0x8977a8435092262a, 0xb86302ff54a37ca2, 0xd6e09db2af04d095, 0x5c73f, 0x0, 0x0}},
 80005a6:	a8f6      	add	r0, sp, #984	; 0x3d8
{
 80005a8:	f89d 34c8 	ldrb.w	r3, [sp, #1224]	; 0x4c8
 80005ac:	9309      	str	r3, [sp, #36]	; 0x24
    uint_c k[3] = {{{0x1b5933af628d005c, 0x9d4af02b1d7b7f56, 0x8977a8435092262a, 0xb86302ff54a37ca2, 0xd6e09db2af04d095, 0x5c73f, 0x0, 0x0}},
 80005ae:	f002 fbcb 	bl	8002d48 <memcpy>
    uint_c p_order = {{0x24403b2c196b9323, 0x8a8759a31723c208, 0xb4a93a543937992b, 0xcdd1f791dc7eb773, 0xff470bd36fd7823b, 0xfbcf1fc39d553409, 0x9478a78dd697be5c, 0x0ed9b5fb0f251816}};
 80005b2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80005b4:	ad0c      	add	r5, sp, #48	; 0x30
 80005b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005b8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80005ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005bc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80005be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005c0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80005c4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    uint8_t count = 0;
    //uint8_t elligator_index = 0;
    uint8_t last_iso[3], bc, ss;
    proj P, Pd, K;
    uint_c cof, l;
    bool finished[NUM_PRIMES] = {0};
 80005c8:	224a      	movs	r2, #74	; 0x4a
 80005ca:	2100      	movs	r1, #0
 80005cc:	a83d      	add	r0, sp, #244	; 0xf4
 80005ce:	f002 fd27 	bl	8003020 <memset>

#ifdef F419
    last_iso[0] = 2;
#else
    //index for skipping point evaluations
    last_iso[0] = 72;
 80005d2:	f644 1348 	movw	r3, #18760	; 0x4948
 80005d6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    last_iso[1] = 73;
    last_iso[2] = 71;
#endif

    memcpy(e, priv->e, sizeof(priv->e));
 80005da:	224a      	movs	r2, #74	; 0x4a
    last_iso[2] = 71;
 80005dc:	2347      	movs	r3, #71	; 0x47
    memcpy(e, priv->e, sizeof(priv->e));
 80005de:	4641      	mov	r1, r8
 80005e0:	a850      	add	r0, sp, #320	; 0x140
    last_iso[2] = 71;
 80005e2:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    memcpy(e, priv->e, sizeof(priv->e));
 80005e6:	f002 fbaf 	bl	8002d48 <memcpy>

    memcpy(counter, max_exponent, sizeof(counter));
 80005ea:	f8dd 14c0 	ldr.w	r1, [sp, #1216]	; 0x4c0
 80005ee:	224a      	movs	r2, #74	; 0x4a
 80005f0:	a863      	add	r0, sp, #396	; 0x18c
 80005f2:	f002 fba9 	bl	8002d48 <memcpy>

    proj A = {in->A, fp_1};
 80005f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005f8:	add6      	add	r5, sp, #856	; 0x358
 80005fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000602:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000604:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    isog_counter,
    num_isogenies
    );
    uart_puts(str);
#endif
    while (isog_counter < num_isogenies)
 8000608:	f04f 0900 	mov.w	r9, #0
    proj A = {in->A, fp_1};
 800060c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    unsigned int isog_counter = 0;
 8000610:	f8cd 9010 	str.w	r9, [sp, #16]
    int8_t ec = 0, m = 0;
 8000614:	464d      	mov	r5, r9
    proj A = {in->A, fp_1};
 8000616:	f8df c268 	ldr.w	ip, [pc, #616]	; 8000880 <action+0x2f0>
 800061a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800061e:	ace6      	add	r4, sp, #920	; 0x398
 8000620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000622:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000628:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800062c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000632:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (isog_counter < num_isogenies)
 8000636:	9b04      	ldr	r3, [sp, #16]
 8000638:	f8dd 24c4 	ldr.w	r2, [sp, #1220]	; 0x4c4
 800063c:	4293      	cmp	r3, r2
 800063e:	d310      	bcc.n	8000662 <action+0xd2>
    }
#ifdef CM
    fp_inv(&A.z);
    fp_mul2(&A.x, &A.z);
#endif
    out->A = A.x;
 8000640:	acd6      	add	r4, sp, #856	; 0x358
 8000642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000644:	9d08      	ldr	r5, [sp, #32]
 8000646:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000648:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800064a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800064c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800064e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000650:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000654:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    return error;
#else
    return 0;
#endif

}
 8000658:	2000      	movs	r0, #0
 800065a:	f20d 4d9c 	addw	sp, sp, #1180	; 0x49c
 800065e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (count == my * num_batches)
 8000662:	9a09      	ldr	r2, [sp, #36]	; 0x24
        m = (m + 1) % num_batches;
 8000664:	3501      	adds	r5, #1
        if (count == my * num_batches)
 8000666:	fb16 f202 	smulbb	r2, r6, r2
        m = (m + 1) % num_batches;
 800066a:	fb95 f3f6 	sdiv	r3, r5, r6
 800066e:	fb06 5513 	mls	r5, r6, r3, r5
        if (count == my * num_batches)
 8000672:	fa5f f389 	uxtb.w	r3, r9
 8000676:	4293      	cmp	r3, r2
        m = (m + 1) % num_batches;
 8000678:	b26d      	sxtb	r5, r5
        if (count == my * num_batches)
 800067a:	d118      	bne.n	80006ae <action+0x11e>
            last_iso[0] = 73;   //doesn't skip point evaluations anymore after merging batches
 800067c:	2349      	movs	r3, #73	; 0x49
 800067e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
            uint_set(&k[m], 4); //recompute factor k
 8000682:	2204      	movs	r2, #4
 8000684:	2300      	movs	r3, #0
 8000686:	a8f6      	add	r0, sp, #984	; 0x3d8
 8000688:	f001 f902 	bl	8001890 <uint_set>
                    uint_mul3_64(&k[m], &k[m], primes[i]);
 800068c:	4e7d      	ldr	r6, [pc, #500]	; (8000884 <action+0x2f4>)
 800068e:	ad63      	add	r5, sp, #396	; 0x18c
            uint_set(&k[m], 4); //recompute factor k
 8000690:	2400      	movs	r4, #0
                if (counter[i] == 0)
 8000692:	f915 3b01 	ldrsb.w	r3, [r5], #1
 8000696:	b92b      	cbnz	r3, 80006a4 <action+0x114>
                    uint_mul3_64(&k[m], &k[m], primes[i]);
 8000698:	a9f6      	add	r1, sp, #984	; 0x3d8
 800069a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800069e:	4608      	mov	r0, r1
 80006a0:	f001 f9a8 	bl	80019f4 <uint_mul3_64>
            for (uint8_t i = 0; i < NUM_PRIMES; i++)
 80006a4:	3401      	adds	r4, #1
 80006a6:	2c4a      	cmp	r4, #74	; 0x4a
 80006a8:	d1f3      	bne.n	8000692 <action+0x102>
            m = 0;
 80006aa:	2500      	movs	r5, #0
            num_batches = 1;
 80006ac:	2601      	movs	r6, #1
        if (memcmp(&A.x, &fp_0, sizeof(fp)))
 80006ae:	4976      	ldr	r1, [pc, #472]	; (8000888 <action+0x2f8>)
 80006b0:	2240      	movs	r2, #64	; 0x40
 80006b2:	a8d6      	add	r0, sp, #856	; 0x358
 80006b4:	f002 fca4 	bl	8003000 <memcmp>
 80006b8:	b310      	cbz	r0, 8000700 <action+0x170>
            elligator(&P, &Pd, &A.x);
 80006ba:	aad6      	add	r2, sp, #856	; 0x358
 80006bc:	a996      	add	r1, sp, #600	; 0x258
 80006be:	a876      	add	r0, sp, #472	; 0x1d8
 80006c0:	f7ff fefc 	bl	80004bc <elligator>
        xMUL(&P, &A, &P, &k[m]);
 80006c4:	abf6      	add	r3, sp, #984	; 0x3d8
 80006c6:	aa76      	add	r2, sp, #472	; 0x1d8
 80006c8:	eb03 1785 	add.w	r7, r3, r5, lsl #6
 80006cc:	4610      	mov	r0, r2
 80006ce:	463b      	mov	r3, r7
 80006d0:	a9d6      	add	r1, sp, #856	; 0x358
 80006d2:	f000 fc21 	bl	8000f18 <xMUL>
        xMUL(&Pd, &A, &Pd, &k[m]);
 80006d6:	aa96      	add	r2, sp, #600	; 0x258
 80006d8:	463b      	mov	r3, r7
 80006da:	a9d6      	add	r1, sp, #856	; 0x358
 80006dc:	4610      	mov	r0, r2
 80006de:	f000 fc1b 	bl	8000f18 <xMUL>
        for (uint8_t i = m; i < NUM_PRIMES; i = i + num_batches)
 80006e2:	b2ec      	uxtb	r4, r5
        ps = 1; //initialized in elligator
 80006e4:	f04f 0a01 	mov.w	sl, #1
        for (uint8_t i = m; i < NUM_PRIMES; i = i + num_batches)
 80006e8:	2c49      	cmp	r4, #73	; 0x49
 80006ea:	d937      	bls.n	800075c <action+0x1cc>
        fp_inv(&A.z);
 80006ec:	a8e6      	add	r0, sp, #920	; 0x398
 80006ee:	f000 fac7 	bl	8000c80 <fp_inv>
        fp_mul2(&A.x, &A.z);
 80006f2:	a9e6      	add	r1, sp, #920	; 0x398
 80006f4:	a8d6      	add	r0, sp, #856	; 0x358
 80006f6:	f000 fa7c 	bl	8000bf2 <fp_mul2>
        count = count + 1;
 80006fa:	f109 0901 	add.w	r9, r9, #1
 80006fe:	e78a      	b.n	8000616 <action+0x86>
            fp_enc(&P.x, &p_order); // point of full order on E_a with a=0
 8000700:	a90c      	add	r1, sp, #48	; 0x30
 8000702:	a876      	add	r0, sp, #472	; 0x1d8
            P.z  = fp_1;
 8000704:	4c5e      	ldr	r4, [pc, #376]	; (8000880 <action+0x2f0>)
            fp_enc(&P.x, &p_order); // point of full order on E_a with a=0
 8000706:	f000 fa4f 	bl	8000ba8 <fp_enc>
            fp_sub3(&Pd.x, &fp_0, &P.x);
 800070a:	495f      	ldr	r1, [pc, #380]	; (8000888 <action+0x2f8>)
 800070c:	aa76      	add	r2, sp, #472	; 0x1d8
 800070e:	a896      	add	r0, sp, #600	; 0x258
 8000710:	f000 f906 	bl	8000920 <fp_sub3>
            P.z  = fp_1;
 8000714:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000716:	f50d 7c06 	add.w	ip, sp, #536	; 0x218
 800071a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800071e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000720:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000726:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800072a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
            Pd.z = fp_1;
 800072e:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
            P.z  = fp_1;
 8000732:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
            Pd.z = fp_1;
 8000736:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800073a:	f50d 7c26 	add.w	ip, sp, #664	; 0x298
 800073e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000742:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000746:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800074a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800074e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000752:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000756:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800075a:	e7b3      	b.n	80006c4 <action+0x134>
                for (uint8_t j = i + num_batches; j < NUM_PRIMES; j = j + num_batches)
 800075c:	1933      	adds	r3, r6, r4
            if (finished[i] == true)
 800075e:	f10d 0bf4 	add.w	fp, sp, #244	; 0xf4
                for (uint8_t j = i + num_batches; j < NUM_PRIMES; j = j + num_batches)
 8000762:	b2db      	uxtb	r3, r3
 8000764:	9306      	str	r3, [sp, #24]
            if (finished[i] == true)
 8000766:	f81b 3004 	ldrb.w	r3, [fp, r4]
 800076a:	2b00      	cmp	r3, #0
 800076c:	f040 8082 	bne.w	8000874 <action+0x2e4>
                cof = uint_1;
 8000770:	f8df e118 	ldr.w	lr, [pc, #280]	; 800088c <action+0x2fc>
 8000774:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000778:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 800077c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000780:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000784:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000788:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800078c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000790:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8000794:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
                for (uint8_t j = i + num_batches; j < NUM_PRIMES; j = j + num_batches)
 8000798:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800079c:	f1b8 0f49 	cmp.w	r8, #73	; 0x49
 80007a0:	d976      	bls.n	8000890 <action+0x300>
                ec = lookup(i, e); //check in constant-time if normal or dummy isogeny must be computed
 80007a2:	a950      	add	r1, sp, #320	; 0x140
 80007a4:	4620      	mov	r0, r4
 80007a6:	f7ff fe71 	bl	800048c <lookup>
                s = (uint8_t)ec >> 7;
 80007aa:	b2c3      	uxtb	r3, r0
 80007ac:	9307      	str	r3, [sp, #28]
 80007ae:	f3c0 13c0 	ubfx	r3, r0, #7, #1
                ss = !isequal(s, ps);
 80007b2:	4651      	mov	r1, sl
                ec = lookup(i, e); //check in constant-time if normal or dummy isogeny must be computed
 80007b4:	4680      	mov	r8, r0
                ss = !isequal(s, ps);
 80007b6:	4618      	mov	r0, r3
                s = (uint8_t)ec >> 7;
 80007b8:	9305      	str	r3, [sp, #20]
                ss = !isequal(s, ps);
 80007ba:	f7ff fe49 	bl	8000450 <isequal>
 80007be:	fab0 fa80 	clz	sl, r0
 80007c2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
                fp_cswap(&P.x, &Pd.x, ss);
 80007c6:	4652      	mov	r2, sl
 80007c8:	a996      	add	r1, sp, #600	; 0x258
 80007ca:	a876      	add	r0, sp, #472	; 0x1d8
 80007cc:	f000 f9fc 	bl	8000bc8 <fp_cswap>
                fp_cswap(&P.z, &Pd.z, ss);
 80007d0:	4652      	mov	r2, sl
 80007d2:	a9a6      	add	r1, sp, #664	; 0x298
 80007d4:	a886      	add	r0, sp, #536	; 0x218
 80007d6:	f000 f9f7 	bl	8000bc8 <fp_cswap>
                xMUL(&K, &A, &P, &cof);
 80007da:	a9d6      	add	r1, sp, #856	; 0x358
 80007dc:	ab1c      	add	r3, sp, #112	; 0x70
 80007de:	aa76      	add	r2, sp, #472	; 0x1d8
 80007e0:	a8b6      	add	r0, sp, #728	; 0x2d8
 80007e2:	f000 fb99 	bl	8000f18 <xMUL>
                uint_set(&l, primes[i]);
 80007e6:	4b27      	ldr	r3, [pc, #156]	; (8000884 <action+0x2f4>)
 80007e8:	f853 a024 	ldr.w	sl, [r3, r4, lsl #2]
 80007ec:	f04f 0b00 	mov.w	fp, #0
 80007f0:	4652      	mov	r2, sl
 80007f2:	465b      	mov	r3, fp
 80007f4:	a82c      	add	r0, sp, #176	; 0xb0
 80007f6:	f001 f84b 	bl	8001890 <uint_set>
                xMUL(&Pd, &A, &Pd, &l);
 80007fa:	aa96      	add	r2, sp, #600	; 0x258
 80007fc:	4610      	mov	r0, r2
 80007fe:	a9d6      	add	r1, sp, #856	; 0x358
 8000800:	ab2c      	add	r3, sp, #176	; 0xb0
 8000802:	f000 fb89 	bl	8000f18 <xMUL>
                if (memcmp(&K.z, &fp_0, sizeof(fp)))
 8000806:	4920      	ldr	r1, [pc, #128]	; (8000888 <action+0x2f8>)
 8000808:	2240      	movs	r2, #64	; 0x40
 800080a:	a8c6      	add	r0, sp, #792	; 0x318
 800080c:	f002 fbf8 	bl	8003000 <memcmp>
 8000810:	b318      	cbz	r0, 800085a <action+0x2ca>
                bc = isequal(ec, 0);
 8000812:	fa4f f088 	sxtb.w	r0, r8
 8000816:	4659      	mov	r1, fp
 8000818:	f7ff fe1a 	bl	8000450 <isequal>
                    if (i == last_iso[m])
 800081c:	aa0b      	add	r2, sp, #44	; 0x2c
                bc = isequal(ec, 0);
 800081e:	4680      	mov	r8, r0
                    if (i == last_iso[m])
 8000820:	5d52      	ldrb	r2, [r2, r5]
 8000822:	42a2      	cmp	r2, r4
                        lastxISOG(&A, &K, primes[i], bc); // doesn't compute the images of points
 8000824:	b2c3      	uxtb	r3, r0
                    if (i == last_iso[m])
 8000826:	d141      	bne.n	80008ac <action+0x31c>
                        lastxISOG(&A, &K, primes[i], bc); // doesn't compute the images of points
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	4652      	mov	r2, sl
 800082c:	465b      	mov	r3, fp
 800082e:	a9b6      	add	r1, sp, #728	; 0x2d8
 8000830:	a8d6      	add	r0, sp, #856	; 0x358
 8000832:	f000 fe59 	bl	80014e8 <lastxISOG>
                    e[i] = ec - (1 ^ bc) + (s << 1);
 8000836:	9a05      	ldr	r2, [sp, #20]
 8000838:	9b07      	ldr	r3, [sp, #28]
 800083a:	f088 0801 	eor.w	r8, r8, #1
 800083e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8000842:	eba3 0808 	sub.w	r8, r3, r8
                    counter[i] = counter[i] - 1;
 8000846:	aa63      	add	r2, sp, #396	; 0x18c
                    e[i] = ec - (1 ^ bc) + (s << 1);
 8000848:	ab50      	add	r3, sp, #320	; 0x140
 800084a:	f803 8004 	strb.w	r8, [r3, r4]
                    counter[i] = counter[i] - 1;
 800084e:	5d13      	ldrb	r3, [r2, r4]
 8000850:	3b01      	subs	r3, #1
 8000852:	5513      	strb	r3, [r2, r4]
                    isog_counter = isog_counter + 1;
 8000854:	9b04      	ldr	r3, [sp, #16]
 8000856:	3301      	adds	r3, #1
 8000858:	9304      	str	r3, [sp, #16]
            if (counter[i] == 0)
 800085a:	ab63      	add	r3, sp, #396	; 0x18c
 800085c:	571b      	ldrsb	r3, [r3, r4]
 800085e:	b93b      	cbnz	r3, 8000870 <action+0x2e0>
                finished[i] = true;
 8000860:	aa3d      	add	r2, sp, #244	; 0xf4
 8000862:	2101      	movs	r1, #1
 8000864:	5511      	strb	r1, [r2, r4]
                uint_mul3_64(&k[m], &k[m], primes[i]);
 8000866:	4638      	mov	r0, r7
 8000868:	4652      	mov	r2, sl
 800086a:	4639      	mov	r1, r7
 800086c:	f001 f8c2 	bl	80019f4 <uint_mul3_64>
                s = (uint8_t)ec >> 7;
 8000870:	f99d a014 	ldrsb.w	sl, [sp, #20]
        ps = 1; //initialized in elligator
 8000874:	9c06      	ldr	r4, [sp, #24]
 8000876:	e737      	b.n	80006e8 <action+0x158>
 8000878:	08003de0 	.word	0x08003de0
 800087c:	08003d20 	.word	0x08003d20
 8000880:	08004038 	.word	0x08004038
 8000884:	08004140 	.word	0x08004140
 8000888:	08004078 	.word	0x08004078
 800088c:	08003ef0 	.word	0x08003ef0
                    if (finished[j] == false) //depends only on randomness
 8000890:	f81b 3008 	ldrb.w	r3, [fp, r8]
 8000894:	b933      	cbnz	r3, 80008a4 <action+0x314>
                        uint_mul3_64(&cof, &cof, primes[j]);
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <action+0x330>)
 8000898:	a91c      	add	r1, sp, #112	; 0x70
 800089a:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 800089e:	4608      	mov	r0, r1
 80008a0:	f001 f8a8 	bl	80019f4 <uint_mul3_64>
                for (uint8_t j = i + num_batches; j < NUM_PRIMES; j = j + num_batches)
 80008a4:	44b0      	add	r8, r6
 80008a6:	fa5f f888 	uxtb.w	r8, r8
 80008aa:	e777      	b.n	800079c <action+0x20c>
                        xISOG(&A, &P, &Pd, &K, primes[i], bc);
 80008ac:	9302      	str	r3, [sp, #8]
 80008ae:	e9cd ab00 	strd	sl, fp, [sp]
 80008b2:	abb6      	add	r3, sp, #728	; 0x2d8
 80008b4:	aa96      	add	r2, sp, #600	; 0x258
 80008b6:	a976      	add	r1, sp, #472	; 0x1d8
 80008b8:	a8d6      	add	r0, sp, #856	; 0x358
 80008ba:	f000 fc01 	bl	80010c0 <xISOG>
 80008be:	e7ba      	b.n	8000836 <action+0x2a6>
 80008c0:	08004140 	.word	0x08004140

080008c4 <csidh>:
#endif

/* includes public-key validation. */
bool csidh(public_key *out, public_key const *in, private_key const *priv,
           uint8_t const num_batches, int8_t const *max_exponent, unsigned int const num_isogenies, uint8_t const my)
{
 80008c4:	b410      	push	{r4}
 80008c6:	f89d 400c 	ldrb.w	r4, [sp, #12]
	if (!validate(in)) {
		fp_random(&out->A);
		return false;
	}
    */
    error = action(out, in, priv, num_batches, max_exponent, num_isogenies, my);
 80008ca:	9403      	str	r4, [sp, #12]
#ifdef CM
    fpcmov(&out->A, &fp_0, error);
#endif

    return error;
}
 80008cc:	bc10      	pop	{r4}
    error = action(out, in, priv, num_batches, max_exponent, num_isogenies, my);
 80008ce:	f7ff be5f 	b.w	8000590 <action>
 80008d2:	0000      	movs	r0, r0

080008d4 <reduce_once>:
    uint_set((uint_c *)x, y);
    fp_enc(x, (uint_c *)x);
}

static void reduce_once(uint_c *x)
{
 80008d4:	b530      	push	{r4, r5, lr}
 80008d6:	b091      	sub	sp, #68	; 0x44
 80008d8:	4604      	mov	r4, r0
    uint_c t;
    if (!uint_sub3(&t, x, &p))
 80008da:	4601      	mov	r1, r0
 80008dc:	4a08      	ldr	r2, [pc, #32]	; (8000900 <reduce_once+0x2c>)
 80008de:	4668      	mov	r0, sp
 80008e0:	f001 f819 	bl	8001916 <uint_sub3>
 80008e4:	b950      	cbnz	r0, 80008fc <reduce_once+0x28>
        *x = t;
 80008e6:	466d      	mov	r5, sp
 80008e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80008fc:	b011      	add	sp, #68	; 0x44
 80008fe:	bd30      	pop	{r4, r5, pc}
 8000900:	080040f8 	.word	0x080040f8

08000904 <fp_add3>:

void fp_add3(fp *x, fp const *y, fp const *z)
{
 8000904:	b510      	push	{r4, lr}
 8000906:	4604      	mov	r4, r0
    uint_add3((uint_c *)x, (uint_c *)y, (uint_c *)z);
 8000908:	f000 ffe1 	bl	80018ce <uint_add3>
    reduce_once((uint_c *)x);
 800090c:	4620      	mov	r0, r4
}
 800090e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    reduce_once((uint_c *)x);
 8000912:	f7ff bfdf 	b.w	80008d4 <reduce_once>

08000916 <fp_add2>:

void fp_add2(fp *x, fp const *y)
{
 8000916:	460a      	mov	r2, r1
    fp_add3(x, x, y);
 8000918:	4601      	mov	r1, r0
 800091a:	f7ff bff3 	b.w	8000904 <fp_add3>
 800091e:	0000      	movs	r0, r0

08000920 <fp_sub3>:
}

void fp_sub3(fp *x, fp const *y, fp const *z)
{
 8000920:	b510      	push	{r4, lr}
 8000922:	4604      	mov	r4, r0
    if (uint_sub3((uint_c *)x, (uint_c *)y, (uint_c *)z))
 8000924:	f000 fff7 	bl	8001916 <uint_sub3>
 8000928:	b130      	cbz	r0, 8000938 <fp_sub3+0x18>
        uint_add3((uint_c *)x, (uint_c *)x, &p);
 800092a:	4621      	mov	r1, r4
 800092c:	4620      	mov	r0, r4
 800092e:	4a03      	ldr	r2, [pc, #12]	; (800093c <fp_sub3+0x1c>)
}
 8000930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        uint_add3((uint_c *)x, (uint_c *)x, &p);
 8000934:	f000 bfcb 	b.w	80018ce <uint_add3>
}
 8000938:	bd10      	pop	{r4, pc}
 800093a:	bf00      	nop
 800093c:	080040f8 	.word	0x080040f8

08000940 <fp_sub2>:

void fp_sub2(fp *x, fp const *y)
{
 8000940:	460a      	mov	r2, r1
    fp_sub3(x, x, y);
 8000942:	4601      	mov	r1, r0
 8000944:	f7ff bfec 	b.w	8000920 <fp_sub3>

08000948 <fp_mul3>:
{
    fp_mul3((fp *)x, y, (fp *)&uint_1);
}

void fp_mul3(fp *x, fp const *y, fp const *z)
{
 8000948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800094c:	b09d      	sub	sp, #116	; 0x74
 800094e:	460e      	mov	r6, r1
 8000950:	9004      	str	r0, [sp, #16]
 8000952:	4693      	mov	fp, r2
    uint64_t t[LIMBS + 1] = {0};
 8000954:	2100      	movs	r1, #0
 8000956:	2248      	movs	r2, #72	; 0x48
 8000958:	a80a      	add	r0, sp, #40	; 0x28
 800095a:	f002 fb61 	bl	8003020 <memset>
    for (size_t k = 0; k < LIMBS; ++k)
 800095e:	ab0a      	add	r3, sp, #40	; 0x28
 8000960:	3e08      	subs	r6, #8
 8000962:	9302      	str	r3, [sp, #8]
    uint64_t t[LIMBS + 1] = {0};
 8000964:	2508      	movs	r5, #8
    {
#define r(i) t[(k + (i)) % (LIMBS + 1)]

        uint64_t m = inv_min_p_mod_r * (y->c[k] * z->c[0] + r(0));
 8000966:	9b02      	ldr	r3, [sp, #8]
 8000968:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 800096c:	e9d3 4100 	ldrd	r4, r1, [r3]
 8000970:	e9db 0200 	ldrd	r0, r2, [fp]
 8000974:	3308      	adds	r3, #8
 8000976:	9302      	str	r3, [sp, #8]
 8000978:	68b3      	ldr	r3, [r6, #8]
 800097a:	435a      	muls	r2, r3
 800097c:	fb00 220c 	mla	r2, r0, ip, r2
 8000980:	fba3 3c00 	umull	r3, ip, r3, r0
 8000984:	191b      	adds	r3, r3, r4
 8000986:	4462      	add	r2, ip
 8000988:	eb42 0201 	adc.w	r2, r2, r1
 800098c:	4984      	ldr	r1, [pc, #528]	; (8000ba0 <fp_mul3+0x258>)
 800098e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000992:	4359      	muls	r1, r3
 8000994:	fba0 3803 	umull	r3, r8, r0, r3
 8000998:	fb02 1100 	mla	r1, r2, r0, r1
 800099c:	9305      	str	r3, [sp, #20]
        bool c = 0, o = 0;
 800099e:	2400      	movs	r4, #0
 80009a0:	4b80      	ldr	r3, [pc, #512]	; (8000ba4 <fp_mul3+0x25c>)
 80009a2:	9303      	str	r3, [sp, #12]
        uint64_t m = inv_min_p_mod_r * (y->c[k] * z->c[0] + r(0));
 80009a4:	3608      	adds	r6, #8
 80009a6:	f1a5 0708 	sub.w	r7, r5, #8
 80009aa:	4488      	add	r8, r1
        bool c = 0, o = 0;
 80009ac:	46a1      	mov	r9, r4
        uint128 u;
        for (size_t i = 0; i < LIMBS; ++i)
        {
            //__uint128_t u = (__uint128_t) m * p.c[i];
            mult64to128(m, p.c[i], &u);
 80009ae:	9903      	ldr	r1, [sp, #12]
 80009b0:	9805      	ldr	r0, [sp, #20]
 80009b2:	ab06      	add	r3, sp, #24
 80009b4:	9300      	str	r3, [sp, #0]
 80009b6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80009ba:	9103      	str	r1, [sp, #12]
 80009bc:	4641      	mov	r1, r8
 80009be:	f000 fffe 	bl	80019be <mult64to128>

            o = __builtin_add_overflow(r(i), o, &r(i));
 80009c2:	2309      	movs	r3, #9
 80009c4:	fbb7 f2f3 	udiv	r2, r7, r3
 80009c8:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80009cc:	1aba      	subs	r2, r7, r2
 80009ce:	ab1c      	add	r3, sp, #112	; 0x70
 80009d0:	00d0      	lsls	r0, r2, #3
 80009d2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80009d6:	e952 3212 	ldrd	r3, r2, [r2, #-72]	; 0x48
 80009da:	191b      	adds	r3, r3, r4
 80009dc:	f152 0e00 	adcs.w	lr, r2, #0

            //o |= __builtin_add_overflow(r(i), (uint64_t) u, &r(i));
            o |= __builtin_add_overflow(r(i), u.Lo, &r(i));
 80009e0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
            o = __builtin_add_overflow(r(i), o, &r(i));
 80009e4:	f04f 0c00 	mov.w	ip, #0
 80009e8:	bf28      	it	cs
 80009ea:	f04f 0c01 	movcs.w	ip, #1
            o |= __builtin_add_overflow(r(i), u.Lo, &r(i));
 80009ee:	185b      	adds	r3, r3, r1
 80009f0:	f100 0170 	add.w	r1, r0, #112	; 0x70
 80009f4:	eb5e 0202 	adcs.w	r2, lr, r2
 80009f8:	eb0d 0001 	add.w	r0, sp, r1
 80009fc:	e940 3212 	strd	r3, r2, [r0, #-72]	; 0x48

            c = __builtin_add_overflow(r(i + 1), c, &r(i + 1));
 8000a00:	f107 0701 	add.w	r7, r7, #1
 8000a04:	f04f 0309 	mov.w	r3, #9
 8000a08:	fbb7 f2f3 	udiv	r2, r7, r3
 8000a0c:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
            o |= __builtin_add_overflow(r(i), u.Lo, &r(i));
 8000a10:	f04f 0400 	mov.w	r4, #0
            c = __builtin_add_overflow(r(i + 1), c, &r(i + 1));
 8000a14:	eba7 0202 	sub.w	r2, r7, r2
            o |= __builtin_add_overflow(r(i), u.Lo, &r(i));
 8000a18:	bf28      	it	cs
 8000a1a:	2401      	movcs	r4, #1
            c = __builtin_add_overflow(r(i + 1), c, &r(i + 1));
 8000a1c:	ab1c      	add	r3, sp, #112	; 0x70
 8000a1e:	ea4c 0e04 	orr.w	lr, ip, r4
 8000a22:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 8000a26:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8000a2a:	e952 3012 	ldrd	r3, r0, [r2, #-72]	; 0x48

            //c |= __builtin_add_overflow(r(i+1), (uint64_t) (u >> 64), &r(i+1));
            c |= __builtin_add_overflow(r(i + 1), u.Hi, &r(i + 1));
 8000a2e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
            c = __builtin_add_overflow(r(i + 1), c, &r(i + 1));
 8000a32:	eb13 0309 	adds.w	r3, r3, r9
 8000a36:	f150 0000 	adcs.w	r0, r0, #0
 8000a3a:	f04f 0a00 	mov.w	sl, #0
 8000a3e:	bf28      	it	cs
 8000a40:	f04f 0a01 	movcs.w	sl, #1
            c |= __builtin_add_overflow(r(i + 1), u.Hi, &r(i + 1));
 8000a44:	185b      	adds	r3, r3, r1
 8000a46:	4150      	adcs	r0, r2
 8000a48:	f10c 0270 	add.w	r2, ip, #112	; 0x70
 8000a4c:	f04f 0900 	mov.w	r9, #0
 8000a50:	eb0d 0c02 	add.w	ip, sp, r2
 8000a54:	bf28      	it	cs
 8000a56:	f04f 0901 	movcs.w	r9, #1
        for (size_t i = 0; i < LIMBS; ++i)
 8000a5a:	42af      	cmp	r7, r5
            c |= __builtin_add_overflow(r(i + 1), u.Hi, &r(i + 1));
 8000a5c:	e94c 3012 	strd	r3, r0, [ip, #-72]	; 0x48
            o |= __builtin_add_overflow(r(i), u.Lo, &r(i));
 8000a60:	4674      	mov	r4, lr
            c |= __builtin_add_overflow(r(i + 1), u.Hi, &r(i + 1));
 8000a62:	ea4a 0909 	orr.w	r9, sl, r9
        for (size_t i = 0; i < LIMBS; ++i)
 8000a66:	d1a2      	bne.n	80009ae <fp_mul3+0x66>
        }
        r(LIMBS) += o;
 8000a68:	2309      	movs	r3, #9
 8000a6a:	fbb5 f4f3 	udiv	r4, r5, r3
 8000a6e:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8000a72:	ab1c      	add	r3, sp, #112	; 0x70
 8000a74:	1b2c      	subs	r4, r5, r4
 8000a76:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
 8000a7a:	e951 3212 	ldrd	r3, r2, [r1, #-72]	; 0x48
 8000a7e:	eb13 030e 	adds.w	r3, r3, lr
 8000a82:	f142 0200 	adc.w	r2, r2, #0
 8000a86:	e941 3212 	strd	r3, r2, [r1, #-72]	; 0x48

        c = o = 0;
 8000a8a:	2700      	movs	r7, #0
 8000a8c:	f1ab 0908 	sub.w	r9, fp, #8
 8000a90:	f1a5 0807 	sub.w	r8, r5, #7
 8000a94:	46ba      	mov	sl, r7
        for (size_t i = 0; i < LIMBS; ++i)
        {
            //__uint128_t u = (__uint128_t) y->c[k] * z->c[i];
            mult64to128(y->c[k], z->c[i], &u);
 8000a96:	ab06      	add	r3, sp, #24
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	e9f9 2302 	ldrd	r2, r3, [r9, #8]!
 8000a9e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8000aa2:	f000 ff8c 	bl	80019be <mult64to128>

            o = __builtin_add_overflow(r(i), o, &r(i));
 8000aa6:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8000aaa:	2309      	movs	r3, #9
 8000aac:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ab0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8000ab4:	1ac9      	subs	r1, r1, r3
 8000ab6:	ab1c      	add	r3, sp, #112	; 0x70
 8000ab8:	00ca      	lsls	r2, r1, #3
 8000aba:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8000abe:	e951 3112 	ldrd	r3, r1, [r1, #-72]	; 0x48
 8000ac2:	19db      	adds	r3, r3, r7
 8000ac4:	f151 0e00 	adcs.w	lr, r1, #0

            //o |= __builtin_add_overflow(r(i), (uint64_t) u, &r(i));
            o |= __builtin_add_overflow(r(i), u.Lo, &r(i));
 8000ac8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
            o = __builtin_add_overflow(r(i), o, &r(i));
 8000acc:	f04f 0c00 	mov.w	ip, #0
            o |= __builtin_add_overflow(r(i), u.Lo, &r(i));
 8000ad0:	f102 0270 	add.w	r2, r2, #112	; 0x70
            o = __builtin_add_overflow(r(i), o, &r(i));
 8000ad4:	bf28      	it	cs
 8000ad6:	f04f 0c01 	movcs.w	ip, #1
            o |= __builtin_add_overflow(r(i), u.Lo, &r(i));
 8000ada:	181b      	adds	r3, r3, r0
 8000adc:	eb5e 0101 	adcs.w	r1, lr, r1
 8000ae0:	446a      	add	r2, sp
 8000ae2:	e942 3112 	strd	r3, r1, [r2, #-72]	; 0x48

            c = __builtin_add_overflow(r(i + 1), c, &r(i + 1));
 8000ae6:	f04f 0309 	mov.w	r3, #9
 8000aea:	fbb8 f2f3 	udiv	r2, r8, r3
 8000aee:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
            o |= __builtin_add_overflow(r(i), u.Lo, &r(i));
 8000af2:	f04f 0700 	mov.w	r7, #0
            c = __builtin_add_overflow(r(i + 1), c, &r(i + 1));
 8000af6:	eba8 0202 	sub.w	r2, r8, r2
            o |= __builtin_add_overflow(r(i), u.Lo, &r(i));
 8000afa:	bf28      	it	cs
 8000afc:	2701      	movcs	r7, #1
            c = __builtin_add_overflow(r(i + 1), c, &r(i + 1));
 8000afe:	ab1c      	add	r3, sp, #112	; 0x70
 8000b00:	ea4c 0e07 	orr.w	lr, ip, r7
 8000b04:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 8000b08:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8000b0c:	e952 3212 	ldrd	r3, r2, [r2, #-72]	; 0x48

            //c |= __builtin_add_overflow(r(i+1), (uint64_t) (u >> 64), &r(i+1));
            c |= __builtin_add_overflow(r(i + 1), u.Hi, &r(i + 1));
 8000b10:	9806      	ldr	r0, [sp, #24]
            c = __builtin_add_overflow(r(i + 1), c, &r(i + 1));
 8000b12:	eb13 030a 	adds.w	r3, r3, sl
 8000b16:	f152 0200 	adcs.w	r2, r2, #0
 8000b1a:	f04f 0100 	mov.w	r1, #0
 8000b1e:	bf28      	it	cs
 8000b20:	2101      	movcs	r1, #1
            c |= __builtin_add_overflow(r(i + 1), u.Hi, &r(i + 1));
 8000b22:	181b      	adds	r3, r3, r0
 8000b24:	9807      	ldr	r0, [sp, #28]
 8000b26:	4142      	adcs	r2, r0
 8000b28:	f10c 0070 	add.w	r0, ip, #112	; 0x70
 8000b2c:	f04f 0a00 	mov.w	sl, #0
 8000b30:	eb0d 0c00 	add.w	ip, sp, r0
 8000b34:	bf28      	it	cs
 8000b36:	f04f 0a01 	movcs.w	sl, #1
        for (size_t i = 0; i < LIMBS; ++i)
 8000b3a:	45a8      	cmp	r8, r5
            c |= __builtin_add_overflow(r(i + 1), u.Hi, &r(i + 1));
 8000b3c:	e94c 3212 	strd	r3, r2, [ip, #-72]	; 0x48
            o |= __builtin_add_overflow(r(i), u.Lo, &r(i));
 8000b40:	4677      	mov	r7, lr
            c |= __builtin_add_overflow(r(i + 1), u.Hi, &r(i + 1));
 8000b42:	ea41 0a0a 	orr.w	sl, r1, sl
        for (size_t i = 0; i < LIMBS; ++i)
 8000b46:	f108 0801 	add.w	r8, r8, #1
 8000b4a:	d1a4      	bne.n	8000a96 <fp_mul3+0x14e>
        }
        r(LIMBS) += o;
 8000b4c:	ab1c      	add	r3, sp, #112	; 0x70
 8000b4e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8000b52:	e954 3212 	ldrd	r3, r2, [r4, #-72]	; 0x48
 8000b56:	3501      	adds	r5, #1
 8000b58:	eb13 030e 	adds.w	r3, r3, lr
 8000b5c:	f142 0200 	adc.w	r2, r2, #0
    for (size_t k = 0; k < LIMBS; ++k)
 8000b60:	2d10      	cmp	r5, #16
        r(LIMBS) += o;
 8000b62:	e944 3212 	strd	r3, r2, [r4, #-72]	; 0x48
    for (size_t k = 0; k < LIMBS; ++k)
 8000b66:	f47f aefe 	bne.w	8000966 <fp_mul3+0x1e>
 8000b6a:	9b04      	ldr	r3, [sp, #16]
 8000b6c:	2208      	movs	r2, #8
 8000b6e:	f1a3 0108 	sub.w	r1, r3, #8
#undef r
    }

    for (size_t i = 0; i < LIMBS; ++i)
        x->c[i] = t[(LIMBS + i) % (LIMBS + 1)];
 8000b72:	2009      	movs	r0, #9
 8000b74:	fbb2 f3f0 	udiv	r3, r2, r0
 8000b78:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	ac1c      	add	r4, sp, #112	; 0x70
 8000b80:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8000b84:	e953 4512 	ldrd	r4, r5, [r3, #-72]	; 0x48
    for (size_t i = 0; i < LIMBS; ++i)
 8000b88:	3201      	adds	r2, #1
 8000b8a:	2a10      	cmp	r2, #16
        x->c[i] = t[(LIMBS + i) % (LIMBS + 1)];
 8000b8c:	e9e1 4502 	strd	r4, r5, [r1, #8]!
    for (size_t i = 0; i < LIMBS; ++i)
 8000b90:	d1f0      	bne.n	8000b74 <fp_mul3+0x22c>

    reduce_once((uint_c *)x);
 8000b92:	9804      	ldr	r0, [sp, #16]
}
 8000b94:	b01d      	add	sp, #116	; 0x74
 8000b96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    reduce_once((uint_c *)x);
 8000b9a:	f7ff be9b 	b.w	80008d4 <reduce_once>
 8000b9e:	bf00      	nop
 8000ba0:	08003ff0 	.word	0x08003ff0
 8000ba4:	080040f8 	.word	0x080040f8

08000ba8 <fp_enc>:
    fp_mul3(x, (fp *)y, &r_squared_mod_p);
 8000ba8:	4a01      	ldr	r2, [pc, #4]	; (8000bb0 <fp_enc+0x8>)
 8000baa:	f7ff becd 	b.w	8000948 <fp_mul3>
 8000bae:	bf00      	nop
 8000bb0:	08003ff8 	.word	0x08003ff8

08000bb4 <fp_set>:
{
 8000bb4:	b510      	push	{r4, lr}
 8000bb6:	4604      	mov	r4, r0
    uint_set((uint_c *)x, y);
 8000bb8:	f000 fe6a 	bl	8001890 <uint_set>
    fp_enc(x, (uint_c *)x);
 8000bbc:	4621      	mov	r1, r4
 8000bbe:	4620      	mov	r0, r4
}
 8000bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fp_enc(x, (uint_c *)x);
 8000bc4:	f7ff bff0 	b.w	8000ba8 <fp_enc>

08000bc8 <fp_cswap>:

void fp_cswap(fp *x, fp *y, bool c)
{
 8000bc8:	b538      	push	{r3, r4, r5, lr}
 8000bca:	4605      	mov	r5, r0
 8000bcc:	460c      	mov	r4, r1
    if (c)
 8000bce:	b17a      	cbz	r2, 8000bf0 <fp_cswap+0x28>
    {
        fp_add3(x, x, y);
 8000bd0:	460a      	mov	r2, r1
 8000bd2:	4601      	mov	r1, r0
 8000bd4:	f7ff fe96 	bl	8000904 <fp_add3>
        fp_sub3(y, x, y);
 8000bd8:	4622      	mov	r2, r4
 8000bda:	4629      	mov	r1, r5
 8000bdc:	4620      	mov	r0, r4
 8000bde:	f7ff fe9f 	bl	8000920 <fp_sub3>
        fp_sub3(x, x, y);
 8000be2:	4622      	mov	r2, r4
 8000be4:	4629      	mov	r1, r5
 8000be6:	4628      	mov	r0, r5
    }
}
 8000be8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        fp_sub3(x, x, y);
 8000bec:	f7ff be98 	b.w	8000920 <fp_sub3>
}
 8000bf0:	bd38      	pop	{r3, r4, r5, pc}

08000bf2 <fp_mul2>:

void fp_mul2(fp *x, fp const *y)
{
 8000bf2:	460a      	mov	r2, r1
    fp_mul3(x, x, y);
 8000bf4:	4601      	mov	r1, r0
 8000bf6:	f7ff bea7 	b.w	8000948 <fp_mul3>

08000bfa <fp_sq2>:
}

void fp_sq2(fp *x, fp const *y)
{
 8000bfa:	460a      	mov	r2, r1
    fp_mul3(x, y, y);
 8000bfc:	f7ff bea4 	b.w	8000948 <fp_mul3>

08000c00 <fp_sq1>:
}

void fp_sq1(fp *x)
{
 8000c00:	4601      	mov	r1, r0
    fp_sq2(x, x);
 8000c02:	f7ff bffa 	b.w	8000bfa <fp_sq2>
 8000c06:	0000      	movs	r0, r0

08000c08 <fp_pow>:
}

/* (obviously) not constant time in the exponent */
static void fp_pow(fp *x, uint_c const *e)
{
 8000c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fp y = *x;
 8000c0c:	4604      	mov	r4, r0
{
 8000c0e:	460f      	mov	r7, r1
 8000c10:	4680      	mov	r8, r0
    fp y = *x;
 8000c12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
{
 8000c14:	b091      	sub	sp, #68	; 0x44
    fp y = *x;
 8000c16:	466d      	mov	r5, sp
 8000c18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c22:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c26:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    *x = fp_1;
 8000c2a:	4d14      	ldr	r5, [pc, #80]	; (8000c7c <fp_pow+0x74>)
 8000c2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c2e:	4646      	mov	r6, r8
 8000c30:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000c32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c34:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000c36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c38:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000c3a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for (size_t k = 0; k < LIMBS; ++k)
 8000c42:	f1a7 0508 	sub.w	r5, r7, #8
 8000c46:	3738      	adds	r7, #56	; 0x38
    {
        uint64_t t = e->c[k];
 8000c48:	f855 4f08 	ldr.w	r4, [r5, #8]!
 8000c4c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8000c50:	2640      	movs	r6, #64	; 0x40
        for (size_t i = 0; i < 64; ++i, t >>= 1)
        {
            if (t & 1)
 8000c52:	07e3      	lsls	r3, r4, #31
 8000c54:	d503      	bpl.n	8000c5e <fp_pow+0x56>
                fp_mul2(x, &y);
 8000c56:	4669      	mov	r1, sp
 8000c58:	4640      	mov	r0, r8
 8000c5a:	f7ff ffca 	bl	8000bf2 <fp_mul2>
            fp_sq1(&y);
 8000c5e:	4668      	mov	r0, sp
 8000c60:	f7ff ffce 	bl	8000c00 <fp_sq1>
        for (size_t i = 0; i < 64; ++i, t >>= 1)
 8000c64:	0864      	lsrs	r4, r4, #1
 8000c66:	3e01      	subs	r6, #1
 8000c68:	ea44 74c9 	orr.w	r4, r4, r9, lsl #31
 8000c6c:	ea4f 0959 	mov.w	r9, r9, lsr #1
 8000c70:	d1ef      	bne.n	8000c52 <fp_pow+0x4a>
    for (size_t k = 0; k < LIMBS; ++k)
 8000c72:	42bd      	cmp	r5, r7
 8000c74:	d1e8      	bne.n	8000c48 <fp_pow+0x40>
        }
    }
}
 8000c76:	b011      	add	sp, #68	; 0x44
 8000c78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c7c:	08004038 	.word	0x08004038

08000c80 <fp_inv>:

void fp_inv(fp *x)
{
    fp_pow(x, &p_minus_2);
 8000c80:	4901      	ldr	r1, [pc, #4]	; (8000c88 <fp_inv+0x8>)
 8000c82:	f7ff bfc1 	b.w	8000c08 <fp_pow>
 8000c86:	bf00      	nop
 8000c88:	08003fb0 	.word	0x08003fb0

08000c8c <fp_issquare>:
}

bool fp_issquare(fp *x)
{
 8000c8c:	b510      	push	{r4, lr}
    fp_pow(x, &p_minus_1_halves);
 8000c8e:	4906      	ldr	r1, [pc, #24]	; (8000ca8 <fp_issquare+0x1c>)
{
 8000c90:	4604      	mov	r4, r0
    fp_pow(x, &p_minus_1_halves);
 8000c92:	f7ff ffb9 	bl	8000c08 <fp_pow>
    return !memcmp(x, &fp_1, sizeof(fp));
 8000c96:	4905      	ldr	r1, [pc, #20]	; (8000cac <fp_issquare+0x20>)
 8000c98:	2240      	movs	r2, #64	; 0x40
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	f002 f9b0 	bl	8003000 <memcmp>
}
 8000ca0:	fab0 f080 	clz	r0, r0
 8000ca4:	0940      	lsrs	r0, r0, #5
 8000ca6:	bd10      	pop	{r4, pc}
 8000ca8:	08003f70 	.word	0x08003f70
 8000cac:	08004038 	.word	0x08004038

08000cb0 <fp_random>:

void fp_random(fp *x)
{
 8000cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    while (1)
    {
        randombytes((unsigned char *)x, sizeof(fp));
        uint64_t m = ((uint64_t)1 << pbits % 64) - 1;
 8000cb2:	4e1a      	ldr	r6, [pc, #104]	; (8000d1c <fp_random+0x6c>)
{
 8000cb4:	4604      	mov	r4, r0
        x->c[LIMBS - 1] &= m;
 8000cb6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        randombytes((unsigned char *)x, sizeof(fp));
 8000cba:	2140      	movs	r1, #64	; 0x40
 8000cbc:	4620      	mov	r0, r4
 8000cbe:	f000 fd03 	bl	80016c8 <randombytes>
        uint64_t m = ((uint64_t)1 << pbits % 64) - 1;
 8000cc2:	6833      	ldr	r3, [r6, #0]
 8000cc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        x->c[LIMBS - 1] &= m;
 8000cc8:	f1a3 0020 	sub.w	r0, r3, #32
 8000ccc:	f1c3 0120 	rsb	r1, r3, #32
 8000cd0:	fa05 f203 	lsl.w	r2, r5, r3
 8000cd4:	fa05 f000 	lsl.w	r0, r5, r0
 8000cd8:	4302      	orrs	r2, r0
 8000cda:	fa25 f101 	lsr.w	r1, r5, r1
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 8000ce4:	fa05 f303 	lsl.w	r3, r5, r3
 8000ce8:	ea20 0003 	bic.w	r0, r0, r3
 8000cec:	ea21 0102 	bic.w	r1, r1, r2
 8000cf0:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38

        for (size_t i = LIMBS - 1; i < LIMBS; --i)
 8000cf4:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <fp_random+0x70>)
 8000cf6:	f104 0340 	add.w	r3, r4, #64	; 0x40
            if (x->c[i] < p.c[i])
 8000cfa:	f853 7d08 	ldr.w	r7, [r3, #-8]!
 8000cfe:	f852 cd08 	ldr.w	ip, [r2, #-8]!
 8000d02:	6858      	ldr	r0, [r3, #4]
 8000d04:	6851      	ldr	r1, [r2, #4]
 8000d06:	4567      	cmp	r7, ip
 8000d08:	eb70 0e01 	sbcs.w	lr, r0, r1
 8000d0c:	d305      	bcc.n	8000d1a <fp_random+0x6a>
                return;
            else if (x->c[i] > p.c[i])
 8000d0e:	45bc      	cmp	ip, r7
 8000d10:	4181      	sbcs	r1, r0
 8000d12:	d3d2      	bcc.n	8000cba <fp_random+0xa>
        for (size_t i = LIMBS - 1; i < LIMBS; --i)
 8000d14:	42a3      	cmp	r3, r4
 8000d16:	d1f0      	bne.n	8000cfa <fp_random+0x4a>
 8000d18:	e7cf      	b.n	8000cba <fp_random+0xa>
                break;
    }
}
 8000d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d1c:	08004138 	.word	0x08004138
 8000d20:	08004138 	.word	0x08004138

08000d24 <xDBLADD>:
#include "fp.h"
#include "mont.h"
#include "csidh.h"

void xDBLADD(proj *R, proj *S, proj const *P, proj const *Q, proj const *PQ, proj const *A24)
{
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	4617      	mov	r7, r2
 8000d2a:	b0b0      	sub	sp, #192	; 0xc0
    fp tmp0, tmp1, tmp2; //requires precomputation of A24=(A+2C:4C)
    fp_add3(&tmp0, &P->x, &P->z);
 8000d2c:	f102 0a40 	add.w	sl, r2, #64	; 0x40
{
 8000d30:	460c      	mov	r4, r1
 8000d32:	4606      	mov	r6, r0
    fp_add3(&tmp0, &P->x, &P->z);
 8000d34:	4652      	mov	r2, sl
 8000d36:	4639      	mov	r1, r7
 8000d38:	4668      	mov	r0, sp
{
 8000d3a:	461d      	mov	r5, r3
 8000d3c:	e9dd 8938 	ldrd	r8, r9, [sp, #224]	; 0xe0
    fp_add3(&tmp0, &P->x, &P->z);
 8000d40:	f7ff fde0 	bl	8000904 <fp_add3>
    fp_sub3(&tmp1, &P->x, &P->z);
 8000d44:	4652      	mov	r2, sl
 8000d46:	4639      	mov	r1, r7
 8000d48:	a810      	add	r0, sp, #64	; 0x40
 8000d4a:	f7ff fde9 	bl	8000920 <fp_sub3>
    fp_sq2(&R->x, &tmp0);
    fp_sub3(&tmp2, &Q->x, &Q->z);
 8000d4e:	f105 0740 	add.w	r7, r5, #64	; 0x40
    fp_sq2(&R->x, &tmp0);
 8000d52:	4669      	mov	r1, sp
 8000d54:	4630      	mov	r0, r6
 8000d56:	f7ff ff50 	bl	8000bfa <fp_sq2>
    fp_sub3(&tmp2, &Q->x, &Q->z);
 8000d5a:	463a      	mov	r2, r7
 8000d5c:	4629      	mov	r1, r5
 8000d5e:	a820      	add	r0, sp, #128	; 0x80
 8000d60:	f7ff fdde 	bl	8000920 <fp_sub3>
    fp_add3(&S->x, &Q->x, &Q->z);
 8000d64:	463a      	mov	r2, r7
 8000d66:	4629      	mov	r1, r5
 8000d68:	4620      	mov	r0, r4
    fp_mul2(&tmp0, &tmp2);

    fp_sq2(&R->z, &tmp1);
 8000d6a:	f106 0540 	add.w	r5, r6, #64	; 0x40
    fp_add3(&S->x, &Q->x, &Q->z);
 8000d6e:	f7ff fdc9 	bl	8000904 <fp_add3>
    fp_mul2(&tmp0, &tmp2);
 8000d72:	a920      	add	r1, sp, #128	; 0x80
 8000d74:	4668      	mov	r0, sp
 8000d76:	f7ff ff3c 	bl	8000bf2 <fp_mul2>
    fp_sq2(&R->z, &tmp1);
 8000d7a:	a910      	add	r1, sp, #64	; 0x40
 8000d7c:	4628      	mov	r0, r5
 8000d7e:	f7ff ff3c 	bl	8000bfa <fp_sq2>
    fp_mul2(&tmp1, &S->x);
 8000d82:	4621      	mov	r1, r4
 8000d84:	a810      	add	r0, sp, #64	; 0x40
 8000d86:	f7ff ff34 	bl	8000bf2 <fp_mul2>
    fp_sub3(&tmp2, &R->x, &R->z);
 8000d8a:	462a      	mov	r2, r5
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	a820      	add	r0, sp, #128	; 0x80
 8000d90:	f7ff fdc6 	bl	8000920 <fp_sub3>

    fp_mul2(&R->z, &A24->z);
 8000d94:	f109 0140 	add.w	r1, r9, #64	; 0x40
 8000d98:	4628      	mov	r0, r5
 8000d9a:	f7ff ff2a 	bl	8000bf2 <fp_mul2>

    fp_mul2(&R->x, &R->z);
 8000d9e:	4629      	mov	r1, r5
 8000da0:	4630      	mov	r0, r6
 8000da2:	f7ff ff26 	bl	8000bf2 <fp_mul2>
    // it somehow stops here
    fp_mul3(&S->x, &A24->x, &tmp2);

    fp_sub3(&S->z, &tmp0, &tmp1);
 8000da6:	f104 0640 	add.w	r6, r4, #64	; 0x40
    fp_mul3(&S->x, &A24->x, &tmp2);
 8000daa:	aa20      	add	r2, sp, #128	; 0x80
 8000dac:	4649      	mov	r1, r9
 8000dae:	4620      	mov	r0, r4
 8000db0:	f7ff fdca 	bl	8000948 <fp_mul3>
    fp_sub3(&S->z, &tmp0, &tmp1);
 8000db4:	aa10      	add	r2, sp, #64	; 0x40
 8000db6:	4669      	mov	r1, sp
 8000db8:	4630      	mov	r0, r6
 8000dba:	f7ff fdb1 	bl	8000920 <fp_sub3>
    fp_add2(&R->z, &S->x);
 8000dbe:	4621      	mov	r1, r4
 8000dc0:	4628      	mov	r0, r5
 8000dc2:	f7ff fda8 	bl	8000916 <fp_add2>
    fp_add3(&S->x, &tmp0, &tmp1);
 8000dc6:	aa10      	add	r2, sp, #64	; 0x40
 8000dc8:	4669      	mov	r1, sp
 8000dca:	4620      	mov	r0, r4
 8000dcc:	f7ff fd9a 	bl	8000904 <fp_add3>
    fp_mul2(&R->z, &tmp2);
 8000dd0:	a920      	add	r1, sp, #128	; 0x80
 8000dd2:	4628      	mov	r0, r5
 8000dd4:	f7ff ff0d 	bl	8000bf2 <fp_mul2>

    fp_sq1(&S->z);
 8000dd8:	4630      	mov	r0, r6
 8000dda:	f7ff ff11 	bl	8000c00 <fp_sq1>
    fp_sq1(&S->x);
 8000dde:	4620      	mov	r0, r4
 8000de0:	f7ff ff0e 	bl	8000c00 <fp_sq1>
    fp_mul2(&S->z, &PQ->x);
 8000de4:	4641      	mov	r1, r8
 8000de6:	4630      	mov	r0, r6
 8000de8:	f7ff ff03 	bl	8000bf2 <fp_mul2>
    fp_mul2(&S->x, &PQ->z);
 8000dec:	f108 0140 	add.w	r1, r8, #64	; 0x40
 8000df0:	4620      	mov	r0, r4
 8000df2:	f7ff fefe 	bl	8000bf2 <fp_mul2>
}
 8000df6:	b030      	add	sp, #192	; 0xc0
 8000df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000dfc <xDBL>:

void xDBL(proj *Q, proj const *A, proj const *P)
{
 8000dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dfe:	4614      	mov	r4, r2
 8000e00:	b0b1      	sub	sp, #196	; 0xc4
    fp a, b, c;
    fp_add3(&a, &P->x, &P->z);
 8000e02:	f102 0740 	add.w	r7, r2, #64	; 0x40
{
 8000e06:	4605      	mov	r5, r0
 8000e08:	460e      	mov	r6, r1
    fp_add3(&a, &P->x, &P->z);
 8000e0a:	463a      	mov	r2, r7
 8000e0c:	4621      	mov	r1, r4
 8000e0e:	4668      	mov	r0, sp
 8000e10:	f7ff fd78 	bl	8000904 <fp_add3>
    fp_sq1(&a);
 8000e14:	4668      	mov	r0, sp
 8000e16:	f7ff fef3 	bl	8000c00 <fp_sq1>
    fp_sub3(&b, &P->x, &P->z);
 8000e1a:	463a      	mov	r2, r7
 8000e1c:	4621      	mov	r1, r4
 8000e1e:	a810      	add	r0, sp, #64	; 0x40
 8000e20:	f7ff fd7e 	bl	8000920 <fp_sub3>
    fp_sq1(&b);
 8000e24:	a810      	add	r0, sp, #64	; 0x40
 8000e26:	f7ff feeb 	bl	8000c00 <fp_sq1>
    fp_sub3(&c, &a, &b);
 8000e2a:	aa10      	add	r2, sp, #64	; 0x40
 8000e2c:	4669      	mov	r1, sp
 8000e2e:	a820      	add	r0, sp, #128	; 0x80
 8000e30:	f7ff fd76 	bl	8000920 <fp_sub3>
    fp_add2(&b, &b);
 8000e34:	a910      	add	r1, sp, #64	; 0x40
 8000e36:	4608      	mov	r0, r1
 8000e38:	f7ff fd6d 	bl	8000916 <fp_add2>
    fp_add2(&b, &b); /* multiplication by 4 */
 8000e3c:	a910      	add	r1, sp, #64	; 0x40
    fp_mul2(&b, &A->z);
 8000e3e:	f106 0440 	add.w	r4, r6, #64	; 0x40
    fp_add2(&b, &b); /* multiplication by 4 */
 8000e42:	4608      	mov	r0, r1
 8000e44:	f7ff fd67 	bl	8000916 <fp_add2>
    fp_mul2(&b, &A->z);
 8000e48:	4621      	mov	r1, r4
 8000e4a:	a810      	add	r0, sp, #64	; 0x40
 8000e4c:	f7ff fed1 	bl	8000bf2 <fp_mul2>
    fp_mul3(&Q->x, &a, &b);
 8000e50:	aa10      	add	r2, sp, #64	; 0x40
 8000e52:	4669      	mov	r1, sp
 8000e54:	4628      	mov	r0, r5
 8000e56:	f7ff fd77 	bl	8000948 <fp_mul3>
    fp_add3(&a, &A->z, &A->z); /* multiplication by 2 */
 8000e5a:	4622      	mov	r2, r4
 8000e5c:	4621      	mov	r1, r4
 8000e5e:	4668      	mov	r0, sp
 8000e60:	f7ff fd50 	bl	8000904 <fp_add3>
    fp_add2(&a, &A->x);
 8000e64:	4631      	mov	r1, r6
 8000e66:	4668      	mov	r0, sp
 8000e68:	f7ff fd55 	bl	8000916 <fp_add2>
    fp_mul2(&a, &c);
 8000e6c:	a920      	add	r1, sp, #128	; 0x80
 8000e6e:	4668      	mov	r0, sp
 8000e70:	f7ff febf 	bl	8000bf2 <fp_mul2>
    fp_add2(&a, &b);
 8000e74:	a910      	add	r1, sp, #64	; 0x40
 8000e76:	4668      	mov	r0, sp
 8000e78:	f7ff fd4d 	bl	8000916 <fp_add2>
    fp_mul3(&Q->z, &a, &c);
 8000e7c:	aa20      	add	r2, sp, #128	; 0x80
 8000e7e:	4669      	mov	r1, sp
 8000e80:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8000e84:	f7ff fd60 	bl	8000948 <fp_mul3>
}
 8000e88:	b031      	add	sp, #196	; 0xc4
 8000e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e8c <xADD>:

void xADD(proj *S, proj const *P, proj const *Q, proj const *PQ)
{
 8000e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fp a, b, c, d;
    fp_add3(&a, &P->x, &P->z);
 8000e90:	f101 0840 	add.w	r8, r1, #64	; 0x40
{
 8000e94:	b0c0      	sub	sp, #256	; 0x100
 8000e96:	4614      	mov	r4, r2
 8000e98:	4605      	mov	r5, r0
 8000e9a:	460f      	mov	r7, r1
    fp_add3(&a, &P->x, &P->z);
 8000e9c:	4642      	mov	r2, r8
 8000e9e:	4668      	mov	r0, sp
{
 8000ea0:	461e      	mov	r6, r3
    fp_add3(&a, &P->x, &P->z);
 8000ea2:	f7ff fd2f 	bl	8000904 <fp_add3>
    fp_sub3(&b, &P->x, &P->z);
 8000ea6:	4642      	mov	r2, r8
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	a810      	add	r0, sp, #64	; 0x40
    fp_add3(&c, &Q->x, &Q->z);
 8000eac:	f104 0740 	add.w	r7, r4, #64	; 0x40
    fp_sub3(&b, &P->x, &P->z);
 8000eb0:	f7ff fd36 	bl	8000920 <fp_sub3>
    fp_add3(&c, &Q->x, &Q->z);
 8000eb4:	463a      	mov	r2, r7
 8000eb6:	4621      	mov	r1, r4
 8000eb8:	a820      	add	r0, sp, #128	; 0x80
 8000eba:	f7ff fd23 	bl	8000904 <fp_add3>
    fp_sub3(&d, &Q->x, &Q->z);
 8000ebe:	463a      	mov	r2, r7
 8000ec0:	4621      	mov	r1, r4
 8000ec2:	a830      	add	r0, sp, #192	; 0xc0
 8000ec4:	f7ff fd2c 	bl	8000920 <fp_sub3>
    fp_mul2(&a, &d);
 8000ec8:	a930      	add	r1, sp, #192	; 0xc0
 8000eca:	4668      	mov	r0, sp
 8000ecc:	f7ff fe91 	bl	8000bf2 <fp_mul2>
    fp_mul2(&b, &c);
 8000ed0:	a920      	add	r1, sp, #128	; 0x80
 8000ed2:	a810      	add	r0, sp, #64	; 0x40
 8000ed4:	f7ff fe8d 	bl	8000bf2 <fp_mul2>
    fp_add3(&c, &a, &b);
 8000ed8:	aa10      	add	r2, sp, #64	; 0x40
 8000eda:	4669      	mov	r1, sp
 8000edc:	a820      	add	r0, sp, #128	; 0x80
 8000ede:	f7ff fd11 	bl	8000904 <fp_add3>
    fp_sub3(&d, &a, &b);
 8000ee2:	aa10      	add	r2, sp, #64	; 0x40
 8000ee4:	4669      	mov	r1, sp
 8000ee6:	a830      	add	r0, sp, #192	; 0xc0
 8000ee8:	f7ff fd1a 	bl	8000920 <fp_sub3>
    fp_sq1(&c);
 8000eec:	a820      	add	r0, sp, #128	; 0x80
 8000eee:	f7ff fe87 	bl	8000c00 <fp_sq1>
    fp_sq1(&d);
 8000ef2:	a830      	add	r0, sp, #192	; 0xc0
 8000ef4:	f7ff fe84 	bl	8000c00 <fp_sq1>
    fp_mul3(&S->x, &PQ->z, &c);
 8000ef8:	aa20      	add	r2, sp, #128	; 0x80
 8000efa:	f106 0140 	add.w	r1, r6, #64	; 0x40
 8000efe:	4628      	mov	r0, r5
 8000f00:	f7ff fd22 	bl	8000948 <fp_mul3>
    fp_mul3(&S->z, &PQ->x, &d);
 8000f04:	aa30      	add	r2, sp, #192	; 0xc0
 8000f06:	4631      	mov	r1, r6
 8000f08:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8000f0c:	f7ff fd1c 	bl	8000948 <fp_mul3>
}
 8000f10:	b040      	add	sp, #256	; 0x100
 8000f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f16:	0000      	movs	r0, r0

08000f18 <xMUL>:
/* Montgomery ladder. */
/* P must not be the unique point of order 2. */
/* not constant-time! */
/* factors are independent from the secret -> no constant-time ladder */
void xMUL(proj *Q, proj const *A, proj const *P, uint_c const *k)
{
 8000f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f1c:	4614      	mov	r4, r2
 8000f1e:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 8000f22:	4607      	mov	r7, r0
 8000f24:	4689      	mov	r9, r1
    proj R = *P;
 8000f26:	2280      	movs	r2, #128	; 0x80
 8000f28:	4621      	mov	r1, r4
    proj A24;
    const proj Pcopy = *P; /* in case Q = P */

    Q->x = fp_1;
 8000f2a:	4d45      	ldr	r5, [pc, #276]	; (8001040 <xMUL+0x128>)
    proj R = *P;
 8000f2c:	a802      	add	r0, sp, #8
    const proj Pcopy = *P; /* in case Q = P */
 8000f2e:	ae42      	add	r6, sp, #264	; 0x108
{
 8000f30:	4698      	mov	r8, r3
    proj R = *P;
 8000f32:	f001 ff09 	bl	8002d48 <memcpy>
    const proj Pcopy = *P; /* in case Q = P */
 8000f36:	4621      	mov	r1, r4
 8000f38:	2280      	movs	r2, #128	; 0x80
 8000f3a:	4630      	mov	r0, r6
 8000f3c:	f001 ff04 	bl	8002d48 <memcpy>
    Q->x = fp_1;
 8000f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f42:	463c      	mov	r4, r7
 8000f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f4e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    Q->z = fp_0;
 8000f52:	4d3c      	ldr	r5, [pc, #240]	; (8001044 <xMUL+0x12c>)
    Q->x = fp_1;
 8000f54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Q->z = fp_0;
 8000f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f5a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f68:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    fp_add3(&A24.x, &A->z, &A->z); //precomputation of A24=(A+2C:4C)
 8000f70:	f109 0240 	add.w	r2, r9, #64	; 0x40
 8000f74:	4611      	mov	r1, r2
 8000f76:	a822      	add	r0, sp, #136	; 0x88
 8000f78:	f7ff fcc4 	bl	8000904 <fp_add3>
    fp_add3(&A24.z, &A24.x, &A24.x);
 8000f7c:	aa22      	add	r2, sp, #136	; 0x88
 8000f7e:	4611      	mov	r1, r2
 8000f80:	a832      	add	r0, sp, #200	; 0xc8
 8000f82:	f7ff fcbf 	bl	8000904 <fp_add3>
    fp_add2(&A24.x, &A->x);
 8000f86:	4649      	mov	r1, r9
 8000f88:	a822      	add	r0, sp, #136	; 0x88
 8000f8a:	f7ff fcc4 	bl	8000916 <fp_add2>
#ifdef F419
    unsigned long i = 64;
#else
    unsigned long i = 512;
#endif
    while (--i && !uint_bit(k, i))
 8000f8e:	f240 14ff 	movw	r4, #511	; 0x1ff
 8000f92:	2500      	movs	r5, #0
 8000f94:	ea54 0305 	orrs.w	r3, r4, r5
 8000f98:	d027      	beq.n	8000fea <xMUL+0xd2>
 8000f9a:	462b      	mov	r3, r5
 8000f9c:	4622      	mov	r2, r4
 8000f9e:	4640      	mov	r0, r8
 8000fa0:	f000 fc7c 	bl	800189c <uint_bit>
 8000fa4:	1e63      	subs	r3, r4, #1
 8000fa6:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
 8000faa:	b1e0      	cbz	r0, 8000fe6 <xMUL+0xce>
 8000fac:	2500      	movs	r5, #0
        ;

    do
    {
        bool bit = uint_bit(k, i);
 8000fae:	4622      	mov	r2, r4
 8000fb0:	462b      	mov	r3, r5
 8000fb2:	4640      	mov	r0, r8
 8000fb4:	f000 fc72 	bl	800189c <uint_bit>

        if (bit)
 8000fb8:	b9c8      	cbnz	r0, 8000fee <xMUL+0xd6>
        {
            proj T = *Q;
            *Q = R;
            R = T;
        } /* not constant-time */
        xDBLADD(Q, &R, Q, &R, &Pcopy, &A24);
 8000fba:	ab22      	add	r3, sp, #136	; 0x88
 8000fbc:	e9cd 6300 	strd	r6, r3, [sp]
 8000fc0:	ab02      	add	r3, sp, #8
 8000fc2:	463a      	mov	r2, r7
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4638      	mov	r0, r7
 8000fc8:	f7ff feac 	bl	8000d24 <xDBLADD>
        {
            proj T = *Q;
            *Q = R;
            R = T;
        } /* not constant-time */
    } while (i--);
 8000fcc:	3c01      	subs	r4, #1
 8000fce:	f165 0500 	sbc.w	r5, r5, #0
 8000fd2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8000fd6:	bf08      	it	eq
 8000fd8:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
 8000fdc:	d1e7      	bne.n	8000fae <xMUL+0x96>
}
 8000fde:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
 8000fe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000fe6:	461c      	mov	r4, r3
 8000fe8:	e7d4      	b.n	8000f94 <xMUL+0x7c>
    while (--i && !uint_bit(k, i))
 8000fea:	2400      	movs	r4, #0
 8000fec:	e7de      	b.n	8000fac <xMUL+0x94>
            proj T = *Q;
 8000fee:	4639      	mov	r1, r7
 8000ff0:	2280      	movs	r2, #128	; 0x80
 8000ff2:	a862      	add	r0, sp, #392	; 0x188
 8000ff4:	f001 fea8 	bl	8002d48 <memcpy>
            *Q = R;
 8000ff8:	a902      	add	r1, sp, #8
 8000ffa:	2280      	movs	r2, #128	; 0x80
 8000ffc:	4638      	mov	r0, r7
 8000ffe:	f001 fea3 	bl	8002d48 <memcpy>
            R = T;
 8001002:	a962      	add	r1, sp, #392	; 0x188
 8001004:	2280      	movs	r2, #128	; 0x80
 8001006:	a802      	add	r0, sp, #8
 8001008:	f001 fe9e 	bl	8002d48 <memcpy>
        xDBLADD(Q, &R, Q, &R, &Pcopy, &A24);
 800100c:	ab22      	add	r3, sp, #136	; 0x88
 800100e:	e9cd 6300 	strd	r6, r3, [sp]
 8001012:	ab02      	add	r3, sp, #8
 8001014:	4619      	mov	r1, r3
 8001016:	463a      	mov	r2, r7
 8001018:	4638      	mov	r0, r7
 800101a:	f7ff fe83 	bl	8000d24 <xDBLADD>
            proj T = *Q;
 800101e:	4639      	mov	r1, r7
 8001020:	2280      	movs	r2, #128	; 0x80
 8001022:	a862      	add	r0, sp, #392	; 0x188
 8001024:	f001 fe90 	bl	8002d48 <memcpy>
            *Q = R;
 8001028:	a902      	add	r1, sp, #8
 800102a:	2280      	movs	r2, #128	; 0x80
 800102c:	4638      	mov	r0, r7
 800102e:	f001 fe8b 	bl	8002d48 <memcpy>
            R = T;
 8001032:	2280      	movs	r2, #128	; 0x80
 8001034:	a962      	add	r1, sp, #392	; 0x188
 8001036:	a802      	add	r0, sp, #8
 8001038:	f001 fe86 	bl	8002d48 <memcpy>
 800103c:	e7c6      	b.n	8000fcc <xMUL+0xb4>
 800103e:	bf00      	nop
 8001040:	08004038 	.word	0x08004038
 8001044:	08004078 	.word	0x08004078

08001048 <exp_by_squaring_>:

//simultaneous square-and-multiply, computes x^exp and y^exp
void exp_by_squaring_(fp *x, fp *y, uint64_t exp)
{
 8001048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800104a:	b0a1      	sub	sp, #132	; 0x84
 800104c:	4606      	mov	r6, r0
 800104e:	4614      	mov	r4, r2
    fp result1, result2;
    fp_set(&result1, 1);
 8001050:	4668      	mov	r0, sp
 8001052:	2201      	movs	r2, #1
{
 8001054:	461f      	mov	r7, r3
    fp_set(&result1, 1);
 8001056:	2300      	movs	r3, #0
{
 8001058:	460d      	mov	r5, r1
    fp_set(&result1, 1);
 800105a:	f7ff fdab 	bl	8000bb4 <fp_set>
    fp_set(&result2, 1);
 800105e:	2201      	movs	r2, #1
 8001060:	2300      	movs	r3, #0
 8001062:	a810      	add	r0, sp, #64	; 0x40
 8001064:	f7ff fda6 	bl	8000bb4 <fp_set>

    while (exp)
 8001068:	ea54 0307 	orrs.w	r3, r4, r7
 800106c:	d113      	bne.n	8001096 <exp_by_squaring_+0x4e>
        fp_sq1(y);

        exp >>= 1;
    }

    fp_set(x, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2300      	movs	r3, #0
 8001072:	4630      	mov	r0, r6
 8001074:	f7ff fd9e 	bl	8000bb4 <fp_set>
    fp_add2(x, &result1);
 8001078:	4669      	mov	r1, sp
 800107a:	4630      	mov	r0, r6
 800107c:	f7ff fc4b 	bl	8000916 <fp_add2>
    fp_set(y, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	2300      	movs	r3, #0
 8001084:	4628      	mov	r0, r5
 8001086:	f7ff fd95 	bl	8000bb4 <fp_set>
    fp_add2(y, &result2);
 800108a:	a910      	add	r1, sp, #64	; 0x40
 800108c:	4628      	mov	r0, r5
 800108e:	f7ff fc42 	bl	8000916 <fp_add2>
}
 8001092:	b021      	add	sp, #132	; 0x84
 8001094:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (exp & 1)
 8001096:	07e3      	lsls	r3, r4, #31
 8001098:	d507      	bpl.n	80010aa <exp_by_squaring_+0x62>
            fp_mul2(&result1, x);
 800109a:	4631      	mov	r1, r6
 800109c:	4668      	mov	r0, sp
 800109e:	f7ff fda8 	bl	8000bf2 <fp_mul2>
            fp_mul2(&result2, y);
 80010a2:	4629      	mov	r1, r5
 80010a4:	a810      	add	r0, sp, #64	; 0x40
 80010a6:	f7ff fda4 	bl	8000bf2 <fp_mul2>
        fp_sq1(x);
 80010aa:	4630      	mov	r0, r6
 80010ac:	f7ff fda8 	bl	8000c00 <fp_sq1>
        exp >>= 1;
 80010b0:	0864      	lsrs	r4, r4, #1
        fp_sq1(y);
 80010b2:	4628      	mov	r0, r5
        exp >>= 1;
 80010b4:	ea44 74c7 	orr.w	r4, r4, r7, lsl #31
        fp_sq1(y);
 80010b8:	f7ff fda2 	bl	8000c00 <fp_sq1>
        exp >>= 1;
 80010bc:	087f      	lsrs	r7, r7, #1
 80010be:	e7d3      	b.n	8001068 <exp_by_squaring_+0x20>

080010c0 <xISOG>:

/* computes the isogeny or dummy isogeny with kernel point K of order k */
/* returns the new curve coefficient A and the image of P for real isogenies*/
/* returns the old curve coefficient A and [k]P for dummy isogenies */
bool xISOG(proj *A, proj *P, proj *Pd, proj *K, uint64_t k, int mask)
{
 80010c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010c4:	f2ad 7dec 	subw	sp, sp, #2028	; 0x7ec
 80010c8:	461c      	mov	r4, r3
 80010ca:	f8dd b810 	ldr.w	fp, [sp, #2064]	; 0x810
 80010ce:	f8dd 3814 	ldr.w	r3, [sp, #2068]	; 0x814
 80010d2:	9302      	str	r3, [sp, #8]
    assert(k >= 3);
 80010d4:	f1bb 0f03 	cmp.w	fp, #3
 80010d8:	f173 0300 	sbcs.w	r3, r3, #0
{
 80010dc:	e9cd 1200 	strd	r1, r2, [sp]
 80010e0:	4605      	mov	r5, r0
    assert(k >= 3);
 80010e2:	d205      	bcs.n	80010f0 <xISOG+0x30>
 80010e4:	4bb6      	ldr	r3, [pc, #728]	; (80013c0 <xISOG+0x300>)
 80010e6:	4ab7      	ldr	r2, [pc, #732]	; (80013c4 <xISOG+0x304>)
 80010e8:	219d      	movs	r1, #157	; 0x9d
    assert(k % 2 == 1);
 80010ea:	48b7      	ldr	r0, [pc, #732]	; (80013c8 <xISOG+0x308>)
 80010ec:	f001 fe3a 	bl	8002d64 <__assert_func>
 80010f0:	f01b 0a01 	ands.w	sl, fp, #1
 80010f4:	f04f 0700 	mov.w	r7, #0
 80010f8:	d103      	bne.n	8001102 <xISOG+0x42>
 80010fa:	4bb4      	ldr	r3, [pc, #720]	; (80013cc <xISOG+0x30c>)
 80010fc:	4ab1      	ldr	r2, [pc, #708]	; (80013c4 <xISOG+0x304>)
 80010fe:	219e      	movs	r1, #158	; 0x9e
 8001100:	e7f3      	b.n	80010ea <xISOG+0x2a>

    fp tmp0, tmp1, tmp2, tmp3, tmp4, Psum, Pdif, Pdsum, Pddif;
    proj Q, Qd, Aed, prod;
    proj Acopy = *A;
 8001102:	4601      	mov	r1, r0
 8001104:	2280      	movs	r2, #128	; 0x80
 8001106:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
 800110a:	f001 fe1d 	bl	8002d48 <memcpy>
    proj Pdcopy = *Pd;
 800110e:	9901      	ldr	r1, [sp, #4]
 8001110:	2280      	movs	r2, #128	; 0x80
 8001112:	f50d 609d 	add.w	r0, sp, #1256	; 0x4e8
 8001116:	f001 fe17 	bl	8002d48 <memcpy>
//compute twisted Edwards curve coefficients
#ifdef CM
    fp_cadd2(&Aed.z, &A->z, &A->z, !mask); // t0 = cadd(b*C, b*C)
    fp_cadd(&Psum, &P->x, &P->z, !mask);
#else
    fp_add3(&Aed.z, &A->z, &A->z); //compute twisted Edwards curve coefficients
 800111a:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800111e:	461a      	mov	r2, r3
 8001120:	4619      	mov	r1, r3
 8001122:	a8ea      	add	r0, sp, #936	; 0x3a8
 8001124:	9306      	str	r3, [sp, #24]
 8001126:	f7ff fbed 	bl	8000904 <fp_add3>
    fp_add3(&Psum, &P->x, &P->z);  //precomputations
 800112a:	9b00      	ldr	r3, [sp, #0]
 800112c:	9900      	ldr	r1, [sp, #0]
 800112e:	3340      	adds	r3, #64	; 0x40
 8001130:	461a      	mov	r2, r3
 8001132:	a85a      	add	r0, sp, #360	; 0x168
 8001134:	9303      	str	r3, [sp, #12]
 8001136:	f7ff fbe5 	bl	8000904 <fp_add3>
#endif

    fp_add3(&Aed.x, &A->x, &Aed.z); // t0 = A + t0
 800113a:	aaea      	add	r2, sp, #936	; 0x3a8
 800113c:	4629      	mov	r1, r5
 800113e:	a8da      	add	r0, sp, #872	; 0x368
 8001140:	f7ff fbe0 	bl	8000904 <fp_add3>
    fp_sub3(&Aed.z, &A->x, &Aed.z); // t1 = A - t0
 8001144:	aaea      	add	r2, sp, #936	; 0x3a8
 8001146:	4610      	mov	r0, r2
 8001148:	4629      	mov	r1, r5
 800114a:	f7ff fbe9 	bl	8000920 <fp_sub3>
    fp_csub(&Pddif, &Pd->x, &Pd->z, !mask);

    fp_csub(&prod.x, &K->x, &K->z, !mask);
    fp_cadd(&prod.z, &K->x, &K->z, !mask);
#else
    fp_sub3(&Pdif, &P->x, &P->z);
 800114e:	9a03      	ldr	r2, [sp, #12]
 8001150:	9900      	ldr	r1, [sp, #0]
 8001152:	a86a      	add	r0, sp, #424	; 0x1a8
 8001154:	f7ff fbe4 	bl	8000920 <fp_sub3>
    fp_add3(&Pdsum, &Pd->x, &Pd->z); //precomputations
 8001158:	9b01      	ldr	r3, [sp, #4]
 800115a:	9901      	ldr	r1, [sp, #4]
 800115c:	3340      	adds	r3, #64	; 0x40
 800115e:	461a      	mov	r2, r3
 8001160:	a87a      	add	r0, sp, #488	; 0x1e8
 8001162:	9304      	str	r3, [sp, #16]
    fp_sub3(&Pddif, &Pd->x, &Pd->z);

    fp_sub3(&prod.x, &K->x, &K->z);
 8001164:	f104 0840 	add.w	r8, r4, #64	; 0x40
    fp_add3(&Pdsum, &Pd->x, &Pd->z); //precomputations
 8001168:	f7ff fbcc 	bl	8000904 <fp_add3>
    fp_sub3(&Pddif, &Pd->x, &Pd->z);
 800116c:	9a04      	ldr	r2, [sp, #16]
 800116e:	9901      	ldr	r1, [sp, #4]
 8001170:	a88a      	add	r0, sp, #552	; 0x228
 8001172:	f7ff fbd5 	bl	8000920 <fp_sub3>
    fp_sub3(&prod.x, &K->x, &K->z);
 8001176:	4642      	mov	r2, r8
 8001178:	4621      	mov	r1, r4
 800117a:	a8fa      	add	r0, sp, #1000	; 0x3e8
 800117c:	f7ff fbd0 	bl	8000920 <fp_sub3>
    fp_add3(&prod.z, &K->x, &K->z);
 8001180:	4642      	mov	r2, r8
 8001182:	4621      	mov	r1, r4
 8001184:	f50d 6085 	add.w	r0, sp, #1064	; 0x428
 8001188:	f7ff fbbc 	bl	8000904 <fp_add3>
#endif

    fp_mul3(&tmp1, &prod.x, &Psum);
 800118c:	aa5a      	add	r2, sp, #360	; 0x168
 800118e:	a9fa      	add	r1, sp, #1000	; 0x3e8
 8001190:	a81a      	add	r0, sp, #104	; 0x68
 8001192:	f7ff fbd9 	bl	8000948 <fp_mul3>
    fp_mul3(&tmp0, &prod.z, &Pdif);
 8001196:	aa6a      	add	r2, sp, #424	; 0x1a8
 8001198:	f50d 6185 	add.w	r1, sp, #1064	; 0x428
 800119c:	a80a      	add	r0, sp, #40	; 0x28
 800119e:	f7ff fbd3 	bl	8000948 <fp_mul3>

#ifdef CM
    fp_cadd(&Q.x, &tmp0, &tmp1, !mask);
    fp_csub(&Q.z, &tmp0, &tmp1, !mask);
#else
    fp_add3(&Q.x, &tmp0, &tmp1);
 80011a2:	aa1a      	add	r2, sp, #104	; 0x68
 80011a4:	a90a      	add	r1, sp, #40	; 0x28
 80011a6:	a89a      	add	r0, sp, #616	; 0x268
 80011a8:	f7ff fbac 	bl	8000904 <fp_add3>
    fp_sub3(&Q.z, &tmp0, &tmp1);
 80011ac:	aa1a      	add	r2, sp, #104	; 0x68
 80011ae:	a90a      	add	r1, sp, #40	; 0x28
 80011b0:	a8aa      	add	r0, sp, #680	; 0x2a8
 80011b2:	f7ff fbb5 	bl	8000920 <fp_sub3>
#endif

    fp_mul3(&tmp1, &prod.x, &Pdsum); // for P'
 80011b6:	aa7a      	add	r2, sp, #488	; 0x1e8
 80011b8:	a9fa      	add	r1, sp, #1000	; 0x3e8
 80011ba:	a81a      	add	r0, sp, #104	; 0x68
 80011bc:	f7ff fbc4 	bl	8000948 <fp_mul3>
    fp_mul3(&tmp0, &prod.z, &Pddif);
 80011c0:	aa8a      	add	r2, sp, #552	; 0x228
 80011c2:	f50d 6185 	add.w	r1, sp, #1064	; 0x428
 80011c6:	a80a      	add	r0, sp, #40	; 0x28
 80011c8:	f7ff fbbe 	bl	8000948 <fp_mul3>

#ifdef CM
    fp_cadd(&Qd.x, &tmp1, &tmp0, !mask);
    fp_csub(&Qd.z, &tmp0, &tmp1, !mask);
#else
    fp_add3(&Qd.x, &tmp0, &tmp1);
 80011cc:	aa1a      	add	r2, sp, #104	; 0x68
 80011ce:	a90a      	add	r1, sp, #40	; 0x28
 80011d0:	a8ba      	add	r0, sp, #744	; 0x2e8
 80011d2:	f7ff fb97 	bl	8000904 <fp_add3>
    fp_sub3(&Qd.z, &tmp0, &tmp1);
 80011d6:	aa1a      	add	r2, sp, #104	; 0x68
 80011d8:	a90a      	add	r1, sp, #40	; 0x28
 80011da:	a8ca      	add	r0, sp, #808	; 0x328
 80011dc:	f7ff fba0 	bl	8000920 <fp_sub3>
    // CONSTANT TIME :
    proj *R = K;
    proj *S = P;

    // CONSTANT TIME :
    fp_cswap(&R->x, &S->x, mask);
 80011e0:	f8dd 6818 	ldr.w	r6, [sp, #2072]	; 0x818
 80011e4:	9900      	ldr	r1, [sp, #0]
 80011e6:	3e00      	subs	r6, #0
 80011e8:	bf18      	it	ne
 80011ea:	2601      	movne	r6, #1
 80011ec:	4632      	mov	r2, r6
 80011ee:	4620      	mov	r0, r4
 80011f0:	f7ff fcea 	bl	8000bc8 <fp_cswap>
    fp_cswap(&R->z, &S->z, mask);
 80011f4:	4640      	mov	r0, r8
 80011f6:	9903      	ldr	r1, [sp, #12]
 80011f8:	4632      	mov	r2, r6
 80011fa:	f7ff fce5 	bl	8000bc8 <fp_cswap>

    proj M[3] = {*R}; //K for real iso, P for dum iso
 80011fe:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001202:	4639      	mov	r1, r7
 8001204:	f50d 60cd 	add.w	r0, sp, #1640	; 0x668
 8001208:	f001 ff0a 	bl	8003020 <memset>
 800120c:	2280      	movs	r2, #128	; 0x80
 800120e:	4621      	mov	r1, r4
 8001210:	f50d 60cd 	add.w	r0, sp, #1640	; 0x668
 8001214:	f001 fd98 	bl	8002d48 <memcpy>
    xDBL(&M[1], A, R);
 8001218:	4622      	mov	r2, r4
 800121a:	4629      	mov	r1, r5
 800121c:	f50d 60dd 	add.w	r0, sp, #1768	; 0x6e8
 8001220:	f7ff fdec 	bl	8000dfc <xDBL>

    for (uint64_t i = 1; i < k / 2; ++i)
 8001224:	9b02      	ldr	r3, [sp, #8]
 8001226:	ea4f 085b 	mov.w	r8, fp, lsr #1
 800122a:	ea48 78c3 	orr.w	r8, r8, r3, lsl #31
 800122e:	085b      	lsrs	r3, r3, #1
 8001230:	9309      	str	r3, [sp, #36]	; 0x24
 8001232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001234:	42bb      	cmp	r3, r7
 8001236:	bf08      	it	eq
 8001238:	45d0      	cmpeq	r8, sl
 800123a:	f040 80c9 	bne.w	80013d0 <xISOG+0x310>

        fp_mul2(&Qd.z, &tmp2);
    }

    if (k > 3)
        xADD(&M[((k - 1) / 2) % 3], &M[(((k - 1) / 2) - 1) % 3], R, &M[(((k - 1) / 2) - 2) % 3]);
 800123e:	9b02      	ldr	r3, [sp, #8]
 8001240:	f11b 37ff 	adds.w	r7, fp, #4294967295	; 0xffffffff
 8001244:	f143 38ff 	adc.w	r8, r3, #4294967295	; 0xffffffff
 8001248:	087f      	lsrs	r7, r7, #1
 800124a:	ea47 77c8 	orr.w	r7, r7, r8, lsl #31
 800124e:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8001252:	2203      	movs	r2, #3
 8001254:	2300      	movs	r3, #0
 8001256:	4638      	mov	r0, r7
 8001258:	4641      	mov	r1, r8
 800125a:	f7fe ff99 	bl	8000190 <__aeabi_uldivmod>
 800125e:	1e78      	subs	r0, r7, #1
 8001260:	f50d 63cd 	add.w	r3, sp, #1640	; 0x668
 8001264:	eb03 19c2 	add.w	r9, r3, r2, lsl #7
 8001268:	f168 0100 	sbc.w	r1, r8, #0
 800126c:	2203      	movs	r2, #3
 800126e:	2300      	movs	r3, #0
 8001270:	f7fe ff8e 	bl	8000190 <__aeabi_uldivmod>
 8001274:	f50d 63cd 	add.w	r3, sp, #1640	; 0x668
 8001278:	eb03 1ac2 	add.w	sl, r3, r2, lsl #7
    if (k > 3)
 800127c:	9a02      	ldr	r2, [sp, #8]
 800127e:	f1ab 0303 	sub.w	r3, fp, #3
 8001282:	4313      	orrs	r3, r2
 8001284:	d011      	beq.n	80012aa <xISOG+0x1ea>
        xADD(&M[((k - 1) / 2) % 3], &M[(((k - 1) / 2) - 1) % 3], R, &M[(((k - 1) / 2) - 2) % 3]);
 8001286:	1eb8      	subs	r0, r7, #2
 8001288:	f04f 0203 	mov.w	r2, #3
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	f168 0100 	sbc.w	r1, r8, #0
 8001294:	f7fe ff7c 	bl	8000190 <__aeabi_uldivmod>
 8001298:	f50d 63cd 	add.w	r3, sp, #1640	; 0x668
 800129c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80012a0:	4651      	mov	r1, sl
 80012a2:	4622      	mov	r2, r4
 80012a4:	4648      	mov	r0, r9
 80012a6:	f7ff fdf1 	bl	8000e8c <xADD>
    proj Pdummy = *R, Pcopy = *R;
 80012aa:	4621      	mov	r1, r4
 80012ac:	2280      	movs	r2, #128	; 0x80
 80012ae:	f50d 60ad 	add.w	r0, sp, #1384	; 0x568
 80012b2:	f001 fd49 	bl	8002d48 <memcpy>
 80012b6:	4621      	mov	r1, r4
 80012b8:	2280      	movs	r2, #128	; 0x80
 80012ba:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
 80012be:	f001 fd43 	bl	8002d48 <memcpy>

    xADD(&Pdummy, &M[((k - 1) / 2) % 3], &M[(((k - 1) / 2) - 1) % 3], &Pcopy);
 80012c2:	f50d 63bd 	add.w	r3, sp, #1512	; 0x5e8
 80012c6:	4652      	mov	r2, sl
 80012c8:	4649      	mov	r1, r9
 80012ca:	f50d 60ad 	add.w	r0, sp, #1384	; 0x568
 80012ce:	f7ff fddd 	bl	8000e8c <xADD>
    fp_cadd(&Pd->x, &tmp0, &Pd->x, !mask);
    fp_cadd(&Pd->z, &tmp0, &Pd->z, !mask);
#endif

    // point evaluation
    fp_sq1(&Q.x);
 80012d2:	a89a      	add	r0, sp, #616	; 0x268
 80012d4:	f7ff fc94 	bl	8000c00 <fp_sq1>
    fp_sq1(&Q.z);
 80012d8:	a8aa      	add	r0, sp, #680	; 0x2a8
 80012da:	f7ff fc91 	bl	8000c00 <fp_sq1>
    fp_mul2(&P->x, &Q.x);
 80012de:	9800      	ldr	r0, [sp, #0]
 80012e0:	a99a      	add	r1, sp, #616	; 0x268
 80012e2:	f7ff fc86 	bl	8000bf2 <fp_mul2>
    fp_mul2(&P->z, &Q.z);
 80012e6:	a9aa      	add	r1, sp, #680	; 0x2a8
 80012e8:	9803      	ldr	r0, [sp, #12]
 80012ea:	f7ff fc82 	bl	8000bf2 <fp_mul2>
    fp_sq1(&Qd.x);
 80012ee:	a8ba      	add	r0, sp, #744	; 0x2e8
 80012f0:	f7ff fc86 	bl	8000c00 <fp_sq1>
    fp_sq1(&Qd.z);
 80012f4:	a8ca      	add	r0, sp, #808	; 0x328
 80012f6:	f7ff fc83 	bl	8000c00 <fp_sq1>
    fp_mul2(&Pd->x, &Qd.x);
 80012fa:	9801      	ldr	r0, [sp, #4]
 80012fc:	a9ba      	add	r1, sp, #744	; 0x2e8
 80012fe:	f7ff fc78 	bl	8000bf2 <fp_mul2>
    fp_mul2(&Pd->z, &Qd.z);
 8001302:	9804      	ldr	r0, [sp, #16]
 8001304:	a9ca      	add	r1, sp, #808	; 0x328
 8001306:	f7ff fc74 	bl	8000bf2 <fp_mul2>

    //compute Aed.x^k, Aed.z^k
    exp_by_squaring_(&Aed.x, &Aed.z, k);
 800130a:	9b02      	ldr	r3, [sp, #8]
 800130c:	465a      	mov	r2, fp
 800130e:	a9ea      	add	r1, sp, #936	; 0x3a8
 8001310:	a8da      	add	r0, sp, #872	; 0x368
 8001312:	f7ff fe99 	bl	8001048 <exp_by_squaring_>

    //compute prod.x^8, prod.z^8
    fp_sq1(&prod.x);
 8001316:	a8fa      	add	r0, sp, #1000	; 0x3e8
 8001318:	f7ff fc72 	bl	8000c00 <fp_sq1>
    fp_sq1(&prod.x);
 800131c:	a8fa      	add	r0, sp, #1000	; 0x3e8
 800131e:	f7ff fc6f 	bl	8000c00 <fp_sq1>
    fp_sq1(&prod.x);
 8001322:	a8fa      	add	r0, sp, #1000	; 0x3e8
 8001324:	f7ff fc6c 	bl	8000c00 <fp_sq1>
    fp_sq1(&prod.z);
 8001328:	f50d 6085 	add.w	r0, sp, #1064	; 0x428
 800132c:	f7ff fc68 	bl	8000c00 <fp_sq1>
    fp_sq1(&prod.z);
 8001330:	f50d 6085 	add.w	r0, sp, #1064	; 0x428
 8001334:	f7ff fc64 	bl	8000c00 <fp_sq1>
    fp_sq1(&prod.z);
 8001338:	f50d 6085 	add.w	r0, sp, #1064	; 0x428
 800133c:	f7ff fc60 	bl	8000c00 <fp_sq1>

    //compute image curve parameters
    fp_mul2(&Aed.z, &prod.x);
 8001340:	a9fa      	add	r1, sp, #1000	; 0x3e8
 8001342:	a8ea      	add	r0, sp, #936	; 0x3a8
 8001344:	f7ff fc55 	bl	8000bf2 <fp_mul2>
    fp_mul2(&Aed.x, &prod.z);
 8001348:	f50d 6185 	add.w	r1, sp, #1064	; 0x428
 800134c:	a8da      	add	r0, sp, #872	; 0x368
 800134e:	f7ff fc50 	bl	8000bf2 <fp_mul2>
    error |= fp_cmp_ct(&A->x, &A->z) && mask;
    error |= fp_cmp_ct(&P->x, &P->z) && mask;
    error |= fp_cmp_ct(&Pd->x, &Pd->z) && mask;

#else
    fp_add3(&A->x, &Aed.x, &Aed.z);
 8001352:	aaea      	add	r2, sp, #936	; 0x3a8
 8001354:	a9da      	add	r1, sp, #872	; 0x368
 8001356:	4628      	mov	r0, r5
 8001358:	f7ff fad4 	bl	8000904 <fp_add3>
    fp_sub3(&A->z, &Aed.x, &Aed.z);
 800135c:	aaea      	add	r2, sp, #936	; 0x3a8
 800135e:	9806      	ldr	r0, [sp, #24]
 8001360:	a9da      	add	r1, sp, #872	; 0x368
 8001362:	f7ff fadd 	bl	8000920 <fp_sub3>
    fp_add2(&A->x, &A->x);
 8001366:	4629      	mov	r1, r5
 8001368:	4628      	mov	r0, r5
 800136a:	f7ff fad4 	bl	8000916 <fp_add2>
#endif

    // CONSTANT TIME : swap back
    fp_cswap(&A->x, &Acopy.x, mask);
 800136e:	4632      	mov	r2, r6
 8001370:	f50d 618d 	add.w	r1, sp, #1128	; 0x468
 8001374:	4628      	mov	r0, r5
 8001376:	f7ff fc27 	bl	8000bc8 <fp_cswap>
    fp_cswap(&A->z, &Acopy.z, mask);
 800137a:	9806      	ldr	r0, [sp, #24]
 800137c:	4632      	mov	r2, r6
 800137e:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
 8001382:	f7ff fc21 	bl	8000bc8 <fp_cswap>

    // CONSTANT TIME :
    fp_cswap(&P->x, &Pdummy.x, mask);
 8001386:	9800      	ldr	r0, [sp, #0]
 8001388:	4632      	mov	r2, r6
 800138a:	f50d 61ad 	add.w	r1, sp, #1384	; 0x568
 800138e:	f7ff fc1b 	bl	8000bc8 <fp_cswap>
    fp_cswap(&P->z, &Pdummy.z, mask);
 8001392:	9803      	ldr	r0, [sp, #12]
 8001394:	4632      	mov	r2, r6
 8001396:	f50d 61b5 	add.w	r1, sp, #1448	; 0x5a8
 800139a:	f7ff fc15 	bl	8000bc8 <fp_cswap>
    fp_cswap(&Pd->x, &Pdcopy.x, mask);
 800139e:	9801      	ldr	r0, [sp, #4]
 80013a0:	4632      	mov	r2, r6
 80013a2:	f50d 619d 	add.w	r1, sp, #1256	; 0x4e8
 80013a6:	f7ff fc0f 	bl	8000bc8 <fp_cswap>
    fp_cswap(&Pd->z, &Pdcopy.z, mask);
 80013aa:	9804      	ldr	r0, [sp, #16]
 80013ac:	4632      	mov	r2, r6
 80013ae:	f50d 61a5 	add.w	r1, sp, #1320	; 0x528
 80013b2:	f7ff fc09 	bl	8000bc8 <fp_cswap>
    return error;
#else
    return 0;
#endif

}
 80013b6:	2000      	movs	r0, #0
 80013b8:	f20d 7dec 	addw	sp, sp, #2028	; 0x7ec
 80013bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013c0:	08004268 	.word	0x08004268
 80013c4:	08003e60 	.word	0x08003e60
 80013c8:	0800426f 	.word	0x0800426f
 80013cc:	08004276 	.word	0x08004276
            xADD(&M[i % 3], &M[(i - 1) % 3], R, &M[(i - 2) % 3]);
 80013d0:	2203      	movs	r2, #3
 80013d2:	2300      	movs	r3, #0
 80013d4:	4650      	mov	r0, sl
 80013d6:	4639      	mov	r1, r7
 80013d8:	f7fe feda 	bl	8000190 <__aeabi_uldivmod>
 80013dc:	01d3      	lsls	r3, r2, #7
 80013de:	9307      	str	r3, [sp, #28]
 80013e0:	f50d 63cd 	add.w	r3, sp, #1640	; 0x668
 80013e4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
        if (i >= 2)
 80013e8:	f10a 39ff 	add.w	r9, sl, #4294967295	; 0xffffffff
            xADD(&M[i % 3], &M[(i - 1) % 3], R, &M[(i - 2) % 3]);
 80013ec:	9305      	str	r3, [sp, #20]
        if (i >= 2)
 80013ee:	ea59 0307 	orrs.w	r3, r9, r7
 80013f2:	d021      	beq.n	8001438 <xISOG+0x378>
            xADD(&M[i % 3], &M[(i - 1) % 3], R, &M[(i - 2) % 3]);
 80013f4:	f1ba 0002 	subs.w	r0, sl, #2
 80013f8:	f167 0100 	sbc.w	r1, r7, #0
 80013fc:	2203      	movs	r2, #3
 80013fe:	2300      	movs	r3, #0
 8001400:	f7fe fec6 	bl	8000190 <__aeabi_uldivmod>
 8001404:	f50d 63cd 	add.w	r3, sp, #1640	; 0x668
 8001408:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800140c:	9308      	str	r3, [sp, #32]
 800140e:	f11a 33ff 	adds.w	r3, sl, #4294967295	; 0xffffffff
 8001412:	f04f 0203 	mov.w	r2, #3
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	4648      	mov	r0, r9
 800141c:	f167 0100 	sbc.w	r1, r7, #0
 8001420:	f7fe feb6 	bl	8000190 <__aeabi_uldivmod>
 8001424:	f50d 60cd 	add.w	r0, sp, #1640	; 0x668
 8001428:	4611      	mov	r1, r2
 800142a:	eb00 11c1 	add.w	r1, r0, r1, lsl #7
 800142e:	9b08      	ldr	r3, [sp, #32]
 8001430:	9805      	ldr	r0, [sp, #20]
 8001432:	4622      	mov	r2, r4
 8001434:	f7ff fd2a 	bl	8000e8c <xADD>
        fp_sub3(&tmp1, &M[i % 3].x, &M[i % 3].z); //for curve params
 8001438:	9b07      	ldr	r3, [sp, #28]
 800143a:	9905      	ldr	r1, [sp, #20]
 800143c:	f103 0940 	add.w	r9, r3, #64	; 0x40
 8001440:	f50d 63cd 	add.w	r3, sp, #1640	; 0x668
 8001444:	4499      	add	r9, r3
 8001446:	464a      	mov	r2, r9
 8001448:	a81a      	add	r0, sp, #104	; 0x68
 800144a:	f7ff fa69 	bl	8000920 <fp_sub3>
        fp_add3(&tmp0, &M[i % 3].x, &M[i % 3].z);
 800144e:	464a      	mov	r2, r9
 8001450:	9905      	ldr	r1, [sp, #20]
 8001452:	a80a      	add	r0, sp, #40	; 0x28
 8001454:	f7ff fa56 	bl	8000904 <fp_add3>
        fp_mul2(&prod.x, &tmp1);      // PI- = PI- * t1
 8001458:	a91a      	add	r1, sp, #104	; 0x68
 800145a:	a8fa      	add	r0, sp, #1000	; 0x3e8
 800145c:	f7ff fbc9 	bl	8000bf2 <fp_mul2>
        fp_mul2(&prod.z, &tmp0);      // PI+ = PI+ * t0
 8001460:	a90a      	add	r1, sp, #40	; 0x28
 8001462:	f50d 6085 	add.w	r0, sp, #1064	; 0x428
 8001466:	f7ff fbc4 	bl	8000bf2 <fp_mul2>
        fp_mul3(&tmp3, &tmp1, &Psum); // for P
 800146a:	aa5a      	add	r2, sp, #360	; 0x168
 800146c:	a91a      	add	r1, sp, #104	; 0x68
 800146e:	a83a      	add	r0, sp, #232	; 0xe8
 8001470:	f7ff fa6a 	bl	8000948 <fp_mul3>
        fp_mul3(&tmp4, &tmp0, &Pdif);
 8001474:	aa6a      	add	r2, sp, #424	; 0x1a8
 8001476:	a90a      	add	r1, sp, #40	; 0x28
 8001478:	a84a      	add	r0, sp, #296	; 0x128
 800147a:	f7ff fa65 	bl	8000948 <fp_mul3>
        fp_add3(&tmp2, &tmp3, &tmp4);
 800147e:	aa4a      	add	r2, sp, #296	; 0x128
 8001480:	a93a      	add	r1, sp, #232	; 0xe8
 8001482:	a82a      	add	r0, sp, #168	; 0xa8
 8001484:	f7ff fa3e 	bl	8000904 <fp_add3>
        fp_mul2(&Q.x, &tmp2);
 8001488:	a92a      	add	r1, sp, #168	; 0xa8
 800148a:	a89a      	add	r0, sp, #616	; 0x268
 800148c:	f7ff fbb1 	bl	8000bf2 <fp_mul2>
        fp_sub3(&tmp2, &tmp3, &tmp4);
 8001490:	aa4a      	add	r2, sp, #296	; 0x128
 8001492:	a93a      	add	r1, sp, #232	; 0xe8
 8001494:	a82a      	add	r0, sp, #168	; 0xa8
 8001496:	f7ff fa43 	bl	8000920 <fp_sub3>
        fp_mul2(&Q.z, &tmp2);
 800149a:	a92a      	add	r1, sp, #168	; 0xa8
 800149c:	a8aa      	add	r0, sp, #680	; 0x2a8
 800149e:	f7ff fba8 	bl	8000bf2 <fp_mul2>
        fp_mul3(&tmp3, &tmp1, &Pdsum); // for P'
 80014a2:	aa7a      	add	r2, sp, #488	; 0x1e8
 80014a4:	a91a      	add	r1, sp, #104	; 0x68
 80014a6:	a83a      	add	r0, sp, #232	; 0xe8
 80014a8:	f7ff fa4e 	bl	8000948 <fp_mul3>
        fp_mul3(&tmp4, &tmp0, &Pddif);
 80014ac:	aa8a      	add	r2, sp, #552	; 0x228
 80014ae:	a90a      	add	r1, sp, #40	; 0x28
 80014b0:	a84a      	add	r0, sp, #296	; 0x128
 80014b2:	f7ff fa49 	bl	8000948 <fp_mul3>
        fp_add3(&tmp2, &tmp3, &tmp4);
 80014b6:	aa4a      	add	r2, sp, #296	; 0x128
 80014b8:	a93a      	add	r1, sp, #232	; 0xe8
 80014ba:	a82a      	add	r0, sp, #168	; 0xa8
 80014bc:	f7ff fa22 	bl	8000904 <fp_add3>
        fp_mul2(&Qd.x, &tmp2);
 80014c0:	a92a      	add	r1, sp, #168	; 0xa8
 80014c2:	a8ba      	add	r0, sp, #744	; 0x2e8
 80014c4:	f7ff fb95 	bl	8000bf2 <fp_mul2>
        fp_sub3(&tmp2, &tmp3, &tmp4);
 80014c8:	aa4a      	add	r2, sp, #296	; 0x128
 80014ca:	a93a      	add	r1, sp, #232	; 0xe8
 80014cc:	a82a      	add	r0, sp, #168	; 0xa8
 80014ce:	f7ff fa27 	bl	8000920 <fp_sub3>
        fp_mul2(&Qd.z, &tmp2);
 80014d2:	a92a      	add	r1, sp, #168	; 0xa8
 80014d4:	a8ca      	add	r0, sp, #808	; 0x328
 80014d6:	f7ff fb8c 	bl	8000bf2 <fp_mul2>
    for (uint64_t i = 1; i < k / 2; ++i)
 80014da:	f11a 0301 	adds.w	r3, sl, #1
 80014de:	469a      	mov	sl, r3
 80014e0:	f147 0700 	adc.w	r7, r7, #0
 80014e4:	e6a5      	b.n	8001232 <xISOG+0x172>
 80014e6:	bf00      	nop

080014e8 <lastxISOG>:

/* computes the last real/dummy isogeny per batch with kernel point K of order k */
/* real isogeny: returns the new curve coefficient A, no point evaluation */
/* dummy isogeny: returns the old curve coefficient A, no point evaluation */
bool lastxISOG(proj *A, proj const *K, uint64_t k, int mask)
{
 80014e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    assert(k >= 3);
 80014ec:	2a03      	cmp	r2, #3
{
 80014ee:	4699      	mov	r9, r3
    assert(k >= 3);
 80014f0:	f179 0300 	sbcs.w	r3, r9, #0
{
 80014f4:	f5ad 7d67 	sub.w	sp, sp, #924	; 0x39c
 80014f8:	4605      	mov	r5, r0
 80014fa:	460f      	mov	r7, r1
 80014fc:	4690      	mov	r8, r2
    assert(k >= 3);
 80014fe:	d206      	bcs.n	800150e <lastxISOG+0x26>
 8001500:	4b6d      	ldr	r3, [pc, #436]	; (80016b8 <lastxISOG+0x1d0>)
 8001502:	4a6e      	ldr	r2, [pc, #440]	; (80016bc <lastxISOG+0x1d4>)
 8001504:	f240 1179 	movw	r1, #377	; 0x179
    assert(k % 2 == 1);
 8001508:	486d      	ldr	r0, [pc, #436]	; (80016c0 <lastxISOG+0x1d8>)
 800150a:	f001 fc2b 	bl	8002d64 <__assert_func>
 800150e:	f012 0401 	ands.w	r4, r2, #1
 8001512:	f04f 0600 	mov.w	r6, #0
 8001516:	d104      	bne.n	8001522 <lastxISOG+0x3a>
 8001518:	4b6a      	ldr	r3, [pc, #424]	; (80016c4 <lastxISOG+0x1dc>)
 800151a:	4a68      	ldr	r2, [pc, #416]	; (80016bc <lastxISOG+0x1d4>)
 800151c:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8001520:	e7f2      	b.n	8001508 <lastxISOG+0x20>

    fp tmp0, tmp1;
    proj Aed, prod;
    proj Acopy = *A;
 8001522:	4601      	mov	r1, r0
 8001524:	2280      	movs	r2, #128	; 0x80
    bool error = fp_cmp_ct(&Aed.z, &fp_0);
    fp_cadd2(&Aed.z, &A->z, &A->z, !mask);
    fp_csub(&prod.x, &K->x, &K->z, !mask);
    fp_cadd(&prod.z, &K->x, &K->z, !mask);
#else
    fp_add3(&Aed.z, &A->z, &A->z); //compute twisted Edwards curve coefficients
 8001526:	f105 0b40 	add.w	fp, r5, #64	; 0x40
    proj Acopy = *A;
 800152a:	a866      	add	r0, sp, #408	; 0x198
 800152c:	f001 fc0c 	bl	8002d48 <memcpy>
    fp_sub3(&prod.x, &K->x, &K->z);
 8001530:	f107 0a40 	add.w	sl, r7, #64	; 0x40
    fp_add3(&Aed.z, &A->z, &A->z); //compute twisted Edwards curve coefficients
 8001534:	465a      	mov	r2, fp
 8001536:	4659      	mov	r1, fp
 8001538:	a836      	add	r0, sp, #216	; 0xd8
 800153a:	f7ff f9e3 	bl	8000904 <fp_add3>
    fp_sub3(&prod.x, &K->x, &K->z);
 800153e:	4652      	mov	r2, sl
 8001540:	4639      	mov	r1, r7
 8001542:	a846      	add	r0, sp, #280	; 0x118
 8001544:	f7ff f9ec 	bl	8000920 <fp_sub3>
    fp_add3(&prod.z, &K->x, &K->z);
 8001548:	4652      	mov	r2, sl
 800154a:	4639      	mov	r1, r7
 800154c:	a856      	add	r0, sp, #344	; 0x158
 800154e:	f7ff f9d9 	bl	8000904 <fp_add3>
#endif

    fp_add3(&Aed.x, &A->x, &Aed.z);
 8001552:	aa36      	add	r2, sp, #216	; 0xd8
 8001554:	4629      	mov	r1, r5
 8001556:	a826      	add	r0, sp, #152	; 0x98
 8001558:	f7ff f9d4 	bl	8000904 <fp_add3>
    fp_sub3(&Aed.z, &A->x, &Aed.z);
 800155c:	aa36      	add	r2, sp, #216	; 0xd8
 800155e:	4610      	mov	r0, r2
 8001560:	4629      	mov	r1, r5
 8001562:	f7ff f9dd 	bl	8000920 <fp_sub3>

    proj M[3] = {*K};
 8001566:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800156a:	4631      	mov	r1, r6
 800156c:	a886      	add	r0, sp, #536	; 0x218
 800156e:	f001 fd57 	bl	8003020 <memset>
 8001572:	2280      	movs	r2, #128	; 0x80
 8001574:	4639      	mov	r1, r7
 8001576:	a886      	add	r0, sp, #536	; 0x218
 8001578:	f001 fbe6 	bl	8002d48 <memcpy>
    xDBL(&M[1], A, K);
 800157c:	463a      	mov	r2, r7
 800157e:	4629      	mov	r1, r5
 8001580:	a8a6      	add	r0, sp, #664	; 0x298
 8001582:	f7ff fc3b 	bl	8000dfc <xDBL>

    for (uint64_t i = 1; i < k / 2; ++i)
 8001586:	ea4f 0358 	mov.w	r3, r8, lsr #1
 800158a:	ea43 73c9 	orr.w	r3, r3, r9, lsl #31
 800158e:	9304      	str	r3, [sp, #16]
 8001590:	ea4f 0359 	mov.w	r3, r9, lsr #1
 8001594:	9305      	str	r3, [sp, #20]
 8001596:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800159a:	42b2      	cmp	r2, r6
 800159c:	bf08      	it	eq
 800159e:	42a3      	cmpeq	r3, r4
 80015a0:	d140      	bne.n	8001624 <lastxISOG+0x13c>
        fp_mul2(&prod.x, &tmp1);
        fp_mul2(&prod.z, &tmp0);
    }

    //compute Aed.x^k, Aed.z^k
    exp_by_squaring_(&Aed.x, &Aed.z, k);
 80015a2:	464b      	mov	r3, r9
 80015a4:	4642      	mov	r2, r8
 80015a6:	a936      	add	r1, sp, #216	; 0xd8
 80015a8:	a826      	add	r0, sp, #152	; 0x98
 80015aa:	f7ff fd4d 	bl	8001048 <exp_by_squaring_>

    //compute prod.x^8, prod.z^8
    fp_sq1(&prod.x);
 80015ae:	a846      	add	r0, sp, #280	; 0x118
 80015b0:	f7ff fb26 	bl	8000c00 <fp_sq1>
    fp_sq1(&prod.x);
 80015b4:	a846      	add	r0, sp, #280	; 0x118
 80015b6:	f7ff fb23 	bl	8000c00 <fp_sq1>
    fp_sq1(&prod.x);
 80015ba:	a846      	add	r0, sp, #280	; 0x118
 80015bc:	f7ff fb20 	bl	8000c00 <fp_sq1>
    fp_sq1(&prod.z);
 80015c0:	a856      	add	r0, sp, #344	; 0x158
 80015c2:	f7ff fb1d 	bl	8000c00 <fp_sq1>
    fp_sq1(&prod.z);
 80015c6:	a856      	add	r0, sp, #344	; 0x158
 80015c8:	f7ff fb1a 	bl	8000c00 <fp_sq1>
    fp_sq1(&prod.z);
 80015cc:	a856      	add	r0, sp, #344	; 0x158
 80015ce:	f7ff fb17 	bl	8000c00 <fp_sq1>

    //compute image curve parameters
    fp_mul2(&Aed.z, &prod.x);
 80015d2:	a946      	add	r1, sp, #280	; 0x118
 80015d4:	a836      	add	r0, sp, #216	; 0xd8
 80015d6:	f7ff fb0c 	bl	8000bf2 <fp_mul2>
    fp_mul2(&Aed.x, &prod.z);
 80015da:	a956      	add	r1, sp, #344	; 0x158
 80015dc:	a826      	add	r0, sp, #152	; 0x98
 80015de:	f7ff fb08 	bl	8000bf2 <fp_mul2>
    fp_csub(&A->z, &Aed.x, &Aed.z, !mask); // C' = cadd(t0, b*t1)

    // check A' = C', P->x = P->z, and Pd->x = Pd->z for dummy isogenies
    error |= fp_cmp_ct(&A->x, &A->z) & mask;
#else
    fp_add3(&A->x, &Aed.x, &Aed.z);
 80015e2:	aa36      	add	r2, sp, #216	; 0xd8
 80015e4:	a926      	add	r1, sp, #152	; 0x98
 80015e6:	4628      	mov	r0, r5
 80015e8:	f7ff f98c 	bl	8000904 <fp_add3>
    fp_sub3(&A->z, &Aed.x, &Aed.z);
 80015ec:	aa36      	add	r2, sp, #216	; 0xd8
 80015ee:	a926      	add	r1, sp, #152	; 0x98
 80015f0:	4658      	mov	r0, fp
 80015f2:	f7ff f995 	bl	8000920 <fp_sub3>
    fp_add2(&A->x, &A->x);
 80015f6:	4629      	mov	r1, r5
 80015f8:	4628      	mov	r0, r5
 80015fa:	f7ff f98c 	bl	8000916 <fp_add2>
#endif

    // CONSTANT TIME : swap back
    fp_cswap(&A->x, &Acopy.x, mask);
 80015fe:	9cf0      	ldr	r4, [sp, #960]	; 0x3c0
 8001600:	3c00      	subs	r4, #0
 8001602:	bf18      	it	ne
 8001604:	2401      	movne	r4, #1
 8001606:	4622      	mov	r2, r4
 8001608:	a966      	add	r1, sp, #408	; 0x198
 800160a:	4628      	mov	r0, r5
 800160c:	f7ff fadc 	bl	8000bc8 <fp_cswap>
    fp_cswap(&A->z, &Acopy.z, mask);
 8001610:	4658      	mov	r0, fp
 8001612:	4622      	mov	r2, r4
 8001614:	a976      	add	r1, sp, #472	; 0x1d8
 8001616:	f7ff fad7 	bl	8000bc8 <fp_cswap>
#ifdef CM
    return error;
#else
    return 0;
#endif
}
 800161a:	2000      	movs	r0, #0
 800161c:	f50d 7d67 	add.w	sp, sp, #924	; 0x39c
 8001620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            xADD(&M[i % 3], &M[(i - 1) % 3], K, &M[(i - 2) % 3]);
 8001624:	2203      	movs	r2, #3
 8001626:	2300      	movs	r3, #0
 8001628:	4620      	mov	r0, r4
 800162a:	4631      	mov	r1, r6
 800162c:	f7fe fdb0 	bl	8000190 <__aeabi_uldivmod>
 8001630:	01d3      	lsls	r3, r2, #7
 8001632:	9302      	str	r3, [sp, #8]
 8001634:	ab86      	add	r3, sp, #536	; 0x218
 8001636:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
        if (i >= 2)
 800163a:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
            xADD(&M[i % 3], &M[(i - 1) % 3], K, &M[(i - 2) % 3]);
 800163e:	9301      	str	r3, [sp, #4]
        if (i >= 2)
 8001640:	ea5a 0306 	orrs.w	r3, sl, r6
 8001644:	d01d      	beq.n	8001682 <lastxISOG+0x19a>
            xADD(&M[i % 3], &M[(i - 1) % 3], K, &M[(i - 2) % 3]);
 8001646:	1ea0      	subs	r0, r4, #2
 8001648:	f166 0100 	sbc.w	r1, r6, #0
 800164c:	2203      	movs	r2, #3
 800164e:	2300      	movs	r3, #0
 8001650:	f7fe fd9e 	bl	8000190 <__aeabi_uldivmod>
 8001654:	ab86      	add	r3, sp, #536	; 0x218
 8001656:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800165a:	9303      	str	r3, [sp, #12]
 800165c:	1e63      	subs	r3, r4, #1
 800165e:	f04f 0203 	mov.w	r2, #3
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	4650      	mov	r0, sl
 8001668:	f166 0100 	sbc.w	r1, r6, #0
 800166c:	f7fe fd90 	bl	8000190 <__aeabi_uldivmod>
 8001670:	a886      	add	r0, sp, #536	; 0x218
 8001672:	4611      	mov	r1, r2
 8001674:	eb00 11c1 	add.w	r1, r0, r1, lsl #7
 8001678:	9b03      	ldr	r3, [sp, #12]
 800167a:	9801      	ldr	r0, [sp, #4]
 800167c:	463a      	mov	r2, r7
 800167e:	f7ff fc05 	bl	8000e8c <xADD>
        fp_sub3(&tmp1, &M[i % 3].x, &M[i % 3].z); //for curve params
 8001682:	9b02      	ldr	r3, [sp, #8]
 8001684:	9901      	ldr	r1, [sp, #4]
 8001686:	f103 0a40 	add.w	sl, r3, #64	; 0x40
 800168a:	ab86      	add	r3, sp, #536	; 0x218
 800168c:	449a      	add	sl, r3
 800168e:	4652      	mov	r2, sl
 8001690:	a816      	add	r0, sp, #88	; 0x58
 8001692:	f7ff f945 	bl	8000920 <fp_sub3>
        fp_add3(&tmp0, &M[i % 3].x, &M[i % 3].z);
 8001696:	4652      	mov	r2, sl
 8001698:	9901      	ldr	r1, [sp, #4]
 800169a:	a806      	add	r0, sp, #24
 800169c:	f7ff f932 	bl	8000904 <fp_add3>
        fp_mul2(&prod.x, &tmp1);
 80016a0:	a916      	add	r1, sp, #88	; 0x58
 80016a2:	a846      	add	r0, sp, #280	; 0x118
 80016a4:	f7ff faa5 	bl	8000bf2 <fp_mul2>
        fp_mul2(&prod.z, &tmp0);
 80016a8:	a906      	add	r1, sp, #24
 80016aa:	a856      	add	r0, sp, #344	; 0x158
 80016ac:	f7ff faa1 	bl	8000bf2 <fp_mul2>
    for (uint64_t i = 1; i < k / 2; ++i)
 80016b0:	3401      	adds	r4, #1
 80016b2:	f146 0600 	adc.w	r6, r6, #0
 80016b6:	e76e      	b.n	8001596 <lastxISOG+0xae>
 80016b8:	08004268 	.word	0x08004268
 80016bc:	08003e66 	.word	0x08003e66
 80016c0:	0800426f 	.word	0x0800426f
 80016c4:	08004276 	.word	0x08004276

080016c8 <randombytes>:
            out[i] ^= t[i + 4];
        }
    }
}

int randombytes(uint8_t *buf, size_t n) {
 80016c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016cc:	4a6a      	ldr	r2, [pc, #424]	; (8001878 <randombytes+0x1b0>)
 80016ce:	b093      	sub	sp, #76	; 0x4c
 80016d0:	1843      	adds	r3, r0, r1
 80016d2:	6814      	ldr	r4, [r2, #0]
 80016d4:	9305      	str	r3, [sp, #20]
    while (n > 0) {
 80016d6:	2300      	movs	r3, #0
 80016d8:	9905      	ldr	r1, [sp, #20]
 80016da:	4288      	cmp	r0, r1
 80016dc:	d106      	bne.n	80016ec <randombytes+0x24>
 80016de:	b10b      	cbz	r3, 80016e4 <randombytes+0x1c>
 80016e0:	4b65      	ldr	r3, [pc, #404]	; (8001878 <randombytes+0x1b0>)
 80016e2:	601c      	str	r4, [r3, #0]
        *buf = (uint8_t) out[--outleft];
        ++buf;
        --n;
    }
    return 0;
}
 80016e4:	2000      	movs	r0, #0
 80016e6:	b013      	add	sp, #76	; 0x4c
 80016e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (!outleft) {
 80016ec:	2c00      	cmp	r4, #0
 80016ee:	f040 80ba 	bne.w	8001866 <randombytes+0x19e>
            if (!++in[0]) {
 80016f2:	6853      	ldr	r3, [r2, #4]
 80016f4:	3301      	adds	r3, #1
 80016f6:	6053      	str	r3, [r2, #4]
 80016f8:	b953      	cbnz	r3, 8001710 <randombytes+0x48>
                if (!++in[1]) {
 80016fa:	6893      	ldr	r3, [r2, #8]
 80016fc:	3301      	adds	r3, #1
 80016fe:	6093      	str	r3, [r2, #8]
 8001700:	b933      	cbnz	r3, 8001710 <randombytes+0x48>
                    if (!++in[2]) {
 8001702:	68d3      	ldr	r3, [r2, #12]
 8001704:	3301      	adds	r3, #1
 8001706:	60d3      	str	r3, [r2, #12]
 8001708:	b913      	cbnz	r3, 8001710 <randombytes+0x48>
                        ++in[3];
 800170a:	6913      	ldr	r3, [r2, #16]
 800170c:	3301      	adds	r3, #1
 800170e:	6113      	str	r3, [r2, #16]
    for (i = 0; i < 12; ++i) {
 8001710:	4e5a      	ldr	r6, [pc, #360]	; (800187c <randombytes+0x1b4>)
 8001712:	4d5b      	ldr	r5, [pc, #364]	; (8001880 <randombytes+0x1b8>)
 8001714:	ac06      	add	r4, sp, #24
int randombytes(uint8_t *buf, size_t n) {
 8001716:	2300      	movs	r3, #0
        t[i] = in[i] ^ seed[12 + i];
 8001718:	f856 7b04 	ldr.w	r7, [r6], #4
 800171c:	f855 1f04 	ldr.w	r1, [r5, #4]!
    for (i = 0; i < 12; ++i) {
 8001720:	3301      	adds	r3, #1
        t[i] = in[i] ^ seed[12 + i];
 8001722:	4079      	eors	r1, r7
    for (i = 0; i < 12; ++i) {
 8001724:	2b0c      	cmp	r3, #12
        t[i] = in[i] ^ seed[12 + i];
 8001726:	f844 1b04 	str.w	r1, [r4], #4
    for (i = 0; i < 12; ++i) {
 800172a:	d1f5      	bne.n	8001718 <randombytes+0x50>
        out[i] = seed[24 + i];
 800172c:	2303      	movs	r3, #3
 800172e:	2108      	movs	r1, #8
 8001730:	e9c2 130f 	strd	r1, r3, [r2, #60]	; 0x3c
 8001734:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 8001738:	2102      	movs	r1, #2
 800173a:	2307      	movs	r3, #7
 800173c:	e9c2 1311 	strd	r1, r3, [r2, #68]	; 0x44
 8001740:	2409      	movs	r4, #9
 8001742:	2305      	movs	r3, #5
 8001744:	e9c2 4313 	strd	r4, r3, [r2, #76]	; 0x4c
    x = t[11];
 8001748:	e9dd ba06 	ldrd	fp, sl, [sp, #24]
 800174c:	9b08      	ldr	r3, [sp, #32]
 800174e:	9301      	str	r3, [sp, #4]
 8001750:	9911      	ldr	r1, [sp, #68]	; 0x44
    for (loop = 0; loop < 2; ++loop) {
 8001752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001754:	9302      	str	r3, [sp, #8]
    uint32_t sum = 0;
 8001756:	2300      	movs	r3, #0
        for (r = 0; r < 16; ++r) {
 8001758:	e9dd 4910 	ldrd	r4, r9, [sp, #64]	; 0x40
 800175c:	f8cd 900c 	str.w	r9, [sp, #12]
 8001760:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8001884 <randombytes+0x1bc>
 8001764:	4499      	add	r9, r3
 8001766:	e9dd 8e0a 	ldrd	r8, lr, [sp, #40]	; 0x28
 800176a:	e9dd c70c 	ldrd	ip, r7, [sp, #48]	; 0x30
 800176e:	e9dd 650e 	ldrd	r6, r5, [sp, #56]	; 0x38
 8001772:	f8cd 9010 	str.w	r9, [sp, #16]
 8001776:	e000      	b.n	800177a <randombytes+0xb2>
            MUSH(11, 13)
 8001778:	9103      	str	r1, [sp, #12]
            sum += 0x9e3779b9;
 800177a:	f1a3 43c3 	sub.w	r3, r3, #1635778560	; 0x61800000
 800177e:	f5a3 0391 	sub.w	r3, r3, #4751360	; 0x488000
 8001782:	f2a3 6347 	subw	r3, r3, #1607	; 0x647
            MUSH(0, 5)
 8001786:	f081 0903 	eor.w	r9, r1, #3
 800178a:	4499      	add	r9, r3
 800178c:	ea89 69f1 	eor.w	r9, r9, r1, ror #27
 8001790:	44cb      	add	fp, r9
            MUSH(1, 7)
 8001792:	f08b 0101 	eor.w	r1, fp, #1
 8001796:	4419      	add	r1, r3
 8001798:	ea81 617b 	eor.w	r1, r1, fp, ror #25
 800179c:	448a      	add	sl, r1
            MUSH(2, 9)
 800179e:	f08a 0104 	eor.w	r1, sl, #4
 80017a2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80017a6:	4419      	add	r1, r3
 80017a8:	ea81 51fa 	eor.w	r1, r1, sl, ror #23
 80017ac:	4489      	add	r9, r1
            MUSH(3, 13)
 80017ae:	f089 0101 	eor.w	r1, r9, #1
 80017b2:	4419      	add	r1, r3
 80017b4:	ea81 41f9 	eor.w	r1, r1, r9, ror #19
            MUSH(2, 9)
 80017b8:	f8cd 9004 	str.w	r9, [sp, #4]
            MUSH(3, 13)
 80017bc:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80017c0:	4489      	add	r9, r1
            MUSH(4, 5)
 80017c2:	f089 0105 	eor.w	r1, r9, #5
 80017c6:	4419      	add	r1, r3
 80017c8:	ea81 61f9 	eor.w	r1, r1, r9, ror #27
 80017cc:	4488      	add	r8, r1
            MUSH(5, 7)
 80017ce:	f088 0109 	eor.w	r1, r8, #9
 80017d2:	4419      	add	r1, r3
 80017d4:	ea81 6178 	eor.w	r1, r1, r8, ror #25
 80017d8:	448e      	add	lr, r1
            MUSH(6, 9)
 80017da:	f08e 0102 	eor.w	r1, lr, #2
 80017de:	4419      	add	r1, r3
 80017e0:	ea81 51fe 	eor.w	r1, r1, lr, ror #23
 80017e4:	448c      	add	ip, r1
            MUSH(7, 13)
 80017e6:	f08c 0106 	eor.w	r1, ip, #6
 80017ea:	4419      	add	r1, r3
 80017ec:	ea81 41fc 	eor.w	r1, r1, ip, ror #19
 80017f0:	440f      	add	r7, r1
            MUSH(8, 5)
 80017f2:	f087 0105 	eor.w	r1, r7, #5
 80017f6:	4419      	add	r1, r3
 80017f8:	ea81 61f7 	eor.w	r1, r1, r7, ror #27
 80017fc:	440e      	add	r6, r1
            MUSH(9, 7)
 80017fe:	f086 0103 	eor.w	r1, r6, #3
 8001802:	4419      	add	r1, r3
 8001804:	ea81 6176 	eor.w	r1, r1, r6, ror #25
 8001808:	440d      	add	r5, r1
            MUSH(10, 9)
 800180a:	f085 0105 	eor.w	r1, r5, #5
 800180e:	4419      	add	r1, r3
 8001810:	ea81 51f5 	eor.w	r1, r1, r5, ror #23
 8001814:	440c      	add	r4, r1
            MUSH(11, 13)
 8001816:	f084 0108 	eor.w	r1, r4, #8
            MUSH(3, 13)
 800181a:	f8cd 9008 	str.w	r9, [sp, #8]
            MUSH(11, 13)
 800181e:	4419      	add	r1, r3
 8001820:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8001824:	ea81 41f4 	eor.w	r1, r1, r4, ror #19
 8001828:	4449      	add	r1, r9
        for (r = 0; r < 16; ++r) {
 800182a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800182e:	454b      	cmp	r3, r9
 8001830:	d1a2      	bne.n	8001778 <randombytes+0xb0>
 8001832:	e9cd 8e0a 	strd	r8, lr, [sp, #40]	; 0x28
 8001836:	e9cd 650e 	strd	r6, r5, [sp, #56]	; 0x38
 800183a:	4d13      	ldr	r5, [pc, #76]	; (8001888 <randombytes+0x1c0>)
 800183c:	e9cd c70c 	strd	ip, r7, [sp, #48]	; 0x30
 8001840:	e9cd 4110 	strd	r4, r1, [sp, #64]	; 0x40
        for (i = 0; i < 8; ++i) {
 8001844:	af09      	add	r7, sp, #36	; 0x24
 8001846:	2400      	movs	r4, #0
            out[i] ^= t[i + 4];
 8001848:	682b      	ldr	r3, [r5, #0]
 800184a:	f857 6f04 	ldr.w	r6, [r7, #4]!
        for (i = 0; i < 8; ++i) {
 800184e:	3401      	adds	r4, #1
            out[i] ^= t[i + 4];
 8001850:	405e      	eors	r6, r3
        for (i = 0; i < 8; ++i) {
 8001852:	2c08      	cmp	r4, #8
            out[i] ^= t[i + 4];
 8001854:	f845 6b04 	str.w	r6, [r5], #4
        for (i = 0; i < 8; ++i) {
 8001858:	d1f6      	bne.n	8001848 <randombytes+0x180>
    for (loop = 0; loop < 2; ++loop) {
 800185a:	9d04      	ldr	r5, [sp, #16]
 800185c:	4e0b      	ldr	r6, [pc, #44]	; (800188c <randombytes+0x1c4>)
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <randombytes+0x1bc>)
 8001860:	42b5      	cmp	r5, r6
 8001862:	f47f af79 	bne.w	8001758 <randombytes+0x90>
        *buf = (uint8_t) out[--outleft];
 8001866:	3c01      	subs	r4, #1
 8001868:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 800186c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186e:	f800 3b01 	strb.w	r3, [r0], #1
        ++buf;
 8001872:	2301      	movs	r3, #1
 8001874:	e730      	b.n	80016d8 <randombytes+0x10>
 8001876:	bf00      	nop
 8001878:	20000184 	.word	0x20000184
 800187c:	20000188 	.word	0x20000188
 8001880:	08003e9c 	.word	0x08003e9c
 8001884:	e3779b90 	.word	0xe3779b90
 8001888:	200001b8 	.word	0x200001b8
 800188c:	c6ef3720 	.word	0xc6ef3720

08001890 <uint_set>:
uint_c const uint_1 = {{1}};


void uint_set(uint_c *x, uint64_t y)
{
    x->c[0] = y;
 8001890:	e8e0 2302 	strd	r2, r3, [r0], #8
    for (size_t i = 1; i < LIMBS; ++i)
        x->c[i] = 0;
 8001894:	2100      	movs	r1, #0
 8001896:	2238      	movs	r2, #56	; 0x38
 8001898:	f001 bbc2 	b.w	8003020 <memset>

0800189c <uint_bit>:
}

bool uint_bit(uint_c const *x,  uint64_t k)
{
    return 1 & (x->c[k / 64] >> k % 64);
 800189c:	0991      	lsrs	r1, r2, #6
 800189e:	ea41 6183 	orr.w	r1, r1, r3, lsl #26
 80018a2:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 80018a6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80018aa:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
{
 80018ae:	b510      	push	{r4, lr}
    return 1 & (x->c[k / 64] >> k % 64);
 80018b0:	685c      	ldr	r4, [r3, #4]
 80018b2:	f1c2 0120 	rsb	r1, r2, #32
 80018b6:	f1a2 0320 	sub.w	r3, r2, #32
 80018ba:	40d0      	lsrs	r0, r2
 80018bc:	fa04 f101 	lsl.w	r1, r4, r1
 80018c0:	4308      	orrs	r0, r1
 80018c2:	fa24 f303 	lsr.w	r3, r4, r3
 80018c6:	4318      	orrs	r0, r3
}
 80018c8:	f000 0001 	and.w	r0, r0, #1
 80018cc:	bd10      	pop	{r4, pc}

080018ce <uint_add3>:


bool uint_add3(uint_c *x, uint_c const *y, uint_c const *z)
{
 80018ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d0:	3a08      	subs	r2, #8
 80018d2:	f1a1 0708 	sub.w	r7, r1, #8
 80018d6:	f1a0 0508 	sub.w	r5, r0, #8
 80018da:	3138      	adds	r1, #56	; 0x38
    bool c = 0;
 80018dc:	2000      	movs	r0, #0
    for (size_t i = 0; i < LIMBS; ++i) {
        uint64_t t;
        c = __builtin_add_overflow(y->c[i], c, &t);
 80018de:	f857 3f08 	ldr.w	r3, [r7, #8]!
        c |= __builtin_add_overflow(t, z->c[i], &x->c[i]);
 80018e2:	f852 6f08 	ldr.w	r6, [r2, #8]!
        c = __builtin_add_overflow(y->c[i], c, &t);
 80018e6:	687c      	ldr	r4, [r7, #4]
 80018e8:	181b      	adds	r3, r3, r0
 80018ea:	f154 0400 	adcs.w	r4, r4, #0
 80018ee:	f04f 0c00 	mov.w	ip, #0
 80018f2:	bf28      	it	cs
 80018f4:	f04f 0c01 	movcs.w	ip, #1
        c |= __builtin_add_overflow(t, z->c[i], &x->c[i]);
 80018f8:	199b      	adds	r3, r3, r6
 80018fa:	6856      	ldr	r6, [r2, #4]
 80018fc:	f845 3f08 	str.w	r3, [r5, #8]!
 8001900:	4174      	adcs	r4, r6
 8001902:	f04f 0000 	mov.w	r0, #0
 8001906:	bf28      	it	cs
 8001908:	2001      	movcs	r0, #1
    for (size_t i = 0; i < LIMBS; ++i) {
 800190a:	428f      	cmp	r7, r1
        c |= __builtin_add_overflow(t, z->c[i], &x->c[i]);
 800190c:	606c      	str	r4, [r5, #4]
 800190e:	ea4c 0000 	orr.w	r0, ip, r0
    for (size_t i = 0; i < LIMBS; ++i) {
 8001912:	d1e4      	bne.n	80018de <uint_add3+0x10>
    }
    return c;
}
 8001914:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001916 <uint_sub3>:

bool uint_sub3(uint_c *x, uint_c const *y, uint_c const *z)
{
 8001916:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001918:	f1a0 0508 	sub.w	r5, r0, #8
    bool b = 0;
 800191c:	2000      	movs	r0, #0
 800191e:	f1a1 0608 	sub.w	r6, r1, #8
 8001922:	3a08      	subs	r2, #8
 8001924:	3138      	adds	r1, #56	; 0x38
    for (size_t i = 0; i < LIMBS; ++i) {
        uint64_t t;
        b = __builtin_sub_overflow(y->c[i], b, &t);
 8001926:	4686      	mov	lr, r0
 8001928:	f856 4f08 	ldr.w	r4, [r6, #8]!
        b |= __builtin_sub_overflow(t, z->c[i], &x->c[i]);
 800192c:	f852 7f08 	ldr.w	r7, [r2, #8]!
        b = __builtin_sub_overflow(y->c[i], b, &t);
 8001930:	6873      	ldr	r3, [r6, #4]
 8001932:	1a24      	subs	r4, r4, r0
 8001934:	f04f 0c00 	mov.w	ip, #0
 8001938:	eb73 030e 	sbcs.w	r3, r3, lr
 800193c:	bf38      	it	cc
 800193e:	f04f 0c01 	movcc.w	ip, #1
        b |= __builtin_sub_overflow(t, z->c[i], &x->c[i]);
 8001942:	1be4      	subs	r4, r4, r7
 8001944:	6857      	ldr	r7, [r2, #4]
 8001946:	f845 4f08 	str.w	r4, [r5, #8]!
 800194a:	41bb      	sbcs	r3, r7
 800194c:	f04f 0000 	mov.w	r0, #0
 8001950:	bf38      	it	cc
 8001952:	2001      	movcc	r0, #1
    for (size_t i = 0; i < LIMBS; ++i) {
 8001954:	428e      	cmp	r6, r1
        b |= __builtin_sub_overflow(t, z->c[i], &x->c[i]);
 8001956:	606b      	str	r3, [r5, #4]
 8001958:	ea4c 0000 	orr.w	r0, ip, r0
    for (size_t i = 0; i < LIMBS; ++i) {
 800195c:	d1e4      	bne.n	8001928 <uint_sub3+0x12>
    }
    return b;
}
 800195e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001960 <add128>:
//    }
}


inline void add128(uint128* out, const uint128* const op1, const uint128* const op2)
{
 8001960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001962:	4694      	mov	ip, r2
	uint64_t carry = (((op1->Lo & op2->Lo) & 1) + (op1->Lo >> 1) + (op2->Lo >> 1)) >> 63;
 8001964:	e9d1 5602 	ldrd	r5, r6, [r1, #8]
 8001968:	e9d2 2702 	ldrd	r2, r7, [r2, #8]
 800196c:	086c      	lsrs	r4, r5, #1
 800196e:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 8001972:	ea44 74c6 	orr.w	r4, r4, r6, lsl #31
 8001976:	ea4e 7ec7 	orr.w	lr, lr, r7, lsl #31
 800197a:	eb14 040e 	adds.w	r4, r4, lr
 800197e:	ea05 0e02 	and.w	lr, r5, r2
 8001982:	f00e 0e01 	and.w	lr, lr, #1
 8001986:	ea4f 0357 	mov.w	r3, r7, lsr #1
 800198a:	eb43 0356 	adc.w	r3, r3, r6, lsr #1
 800198e:	eb14 040e 	adds.w	r4, r4, lr
    out->Hi = op1->Hi + op2->Hi + carry;
 8001992:	e9d1 4100 	ldrd	r4, r1, [r1]
 8001996:	e9dc ec00 	ldrd	lr, ip, [ip]
	uint64_t carry = (((op1->Lo & op2->Lo) & 1) + (op1->Lo >> 1) + (op2->Lo >> 1)) >> 63;
 800199a:	f143 0300 	adc.w	r3, r3, #0
 800199e:	0fdb      	lsrs	r3, r3, #31
    out->Hi = op1->Hi + op2->Hi + carry;
 80019a0:	eb14 040e 	adds.w	r4, r4, lr
 80019a4:	eb41 010c 	adc.w	r1, r1, ip
 80019a8:	191b      	adds	r3, r3, r4
 80019aa:	f141 0100 	adc.w	r1, r1, #0
    out->Lo = op1->Lo + op2->Lo;
 80019ae:	18ad      	adds	r5, r5, r2
 80019b0:	eb46 0607 	adc.w	r6, r6, r7
    out->Hi = op1->Hi + op2->Hi + carry;
 80019b4:	e9c0 3100 	strd	r3, r1, [r0]
    out->Lo = op1->Lo + op2->Lo;
 80019b8:	e9c0 5602 	strd	r5, r6, [r0, #8]
}
 80019bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019be <mult64to128>:


inline void mult64to128(const uint64_t op1, const uint64_t op2, uint128* out)
{
 80019be:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint64_t u1 = (op1 & 0xffffffff);
    uint64_t v1 = (op2 & 0xffffffff);
    uint64_t t = (u1 * v1);
 80019c0:	fba0 5602 	umull	r5, r6, r0, r2
    uint64_t w3 = (t & 0xffffffff);
    uint64_t k = (t >> 32);

    //op1 >>= 32;
    t = ((op1 >> 32) * v1) + k;
 80019c4:	fba1 2702 	umull	r2, r7, r1, r2
 80019c8:	1992      	adds	r2, r2, r6
    k = (t & 0xffffffff);
    uint64_t w1 = (t >> 32);

    //op2 >>= 32;
    t = (u1 * (op2 >> 32)) + k;
 80019ca:	fba3 0600 	umull	r0, r6, r3, r0
    t = ((op1 >> 32) * v1) + k;
 80019ce:	f147 0700 	adc.w	r7, r7, #0
    k = (t >> 32);

    out->Hi = ((op1 >> 32)* (op2 >> 32)) + w1 + k;
 80019d2:	fba1 1303 	umull	r1, r3, r1, r3
    t = (u1 * (op2 >> 32)) + k;
 80019d6:	1880      	adds	r0, r0, r2
 80019d8:	f146 0200 	adc.w	r2, r6, #0
    out->Hi = ((op1 >> 32)* (op2 >> 32)) + w1 + k;
 80019dc:	19c9      	adds	r1, r1, r7
{
 80019de:	9c05      	ldr	r4, [sp, #20]
    out->Hi = ((op1 >> 32)* (op2 >> 32)) + w1 + k;
 80019e0:	f143 0300 	adc.w	r3, r3, #0
 80019e4:	1889      	adds	r1, r1, r2
 80019e6:	f143 0300 	adc.w	r3, r3, #0
 80019ea:	e9c4 1300 	strd	r1, r3, [r4]
    out->Lo = (t << 32) + w3;
 80019ee:	e9c4 5002 	strd	r5, r0, [r4, #8]
}
 80019f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019f4 <uint_mul3_64>:
{
 80019f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019f8:	4617      	mov	r7, r2
 80019fa:	b08b      	sub	sp, #44	; 0x2c
	c.Hi = 0;
 80019fc:	2200      	movs	r2, #0
{
 80019fe:	4698      	mov	r8, r3
	c.Hi = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	e9cd 2302 	strd	r2, r3, [sp, #8]
	c.Lo = 0;
 8001a06:	e9cd 2304 	strd	r2, r3, [sp, #16]
    t.Hi = 0;
 8001a0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    t.Lo = 0;
 8001a0e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    for (size_t i = 0; i < LIMBS; ++i) {
 8001a12:	f1a1 0508 	sub.w	r5, r1, #8
 8001a16:	f1a0 0608 	sub.w	r6, r0, #8
 8001a1a:	f101 0438 	add.w	r4, r1, #56	; 0x38
    			mult64to128(y->c[i], z, &t);
 8001a1e:	f10d 0918 	add.w	r9, sp, #24
    	if((y->c[i]>0) || (z>0)) {
 8001a22:	f855 0f08 	ldr.w	r0, [r5, #8]!
 8001a26:	6869      	ldr	r1, [r5, #4]
 8001a28:	ea40 0307 	orr.w	r3, r0, r7
 8001a2c:	ea41 0208 	orr.w	r2, r1, r8
 8001a30:	4313      	orrs	r3, r2
 8001a32:	d00a      	beq.n	8001a4a <uint_mul3_64+0x56>
    			mult64to128(y->c[i], z, &t);
 8001a34:	463a      	mov	r2, r7
 8001a36:	f8cd 9000 	str.w	r9, [sp]
 8001a3a:	4643      	mov	r3, r8
 8001a3c:	f7ff ffbf 	bl	80019be <mult64to128>
    			add128(&t, &t, &c);
 8001a40:	aa02      	add	r2, sp, #8
 8001a42:	4649      	mov	r1, r9
 8001a44:	4648      	mov	r0, r9
 8001a46:	f7ff ff8b 	bl	8001960 <add128>
        	c.Lo = t.Hi;
 8001a4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001a4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
			    x->c[i] = t.Lo;
 8001a52:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (size_t i = 0; i < LIMBS; ++i) {
 8001a56:	42a5      	cmp	r5, r4
			    x->c[i] = t.Lo;
 8001a58:	e9e6 2302 	strd	r2, r3, [r6, #8]!
    for (size_t i = 0; i < LIMBS; ++i) {
 8001a5c:	d1e1      	bne.n	8001a22 <uint_mul3_64+0x2e>
}
 8001a5e:	b00b      	add	sp, #44	; 0x2c
 8001a60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001a64 <ss_crc>:


// 0xA6 formerly 
#define CW_CRC 0x4D 
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
 8001a64:	b510      	push	{r4, lr}
 8001a66:	4602      	mov	r2, r0
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
 8001a68:	4401      	add	r1, r0
	uint8_t crc = 0x00;
 8001a6a:	2000      	movs	r0, #0
	while (len--) {
 8001a6c:	428a      	cmp	r2, r1
 8001a6e:	d100      	bne.n	8001a72 <ss_crc+0xe>
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
		}
	}
	return crc;

}
 8001a70:	bd10      	pop	{r4, pc}
		crc ^= *buf++;
 8001a72:	f812 3b01 	ldrb.w	r3, [r2], #1
 8001a76:	2408      	movs	r4, #8
 8001a78:	4058      	eors	r0, r3
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8001a7a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001a7e:	ea4f 0340 	mov.w	r3, r0, lsl #1
 8001a82:	bf18      	it	ne
 8001a84:	f083 034d 	eorne.w	r3, r3, #77	; 0x4d
		for (k = 0; k < 8; k++) {
 8001a88:	3c01      	subs	r4, #1
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8001a8a:	b2d8      	uxtb	r0, r3
		for (k = 0; k < 8; k++) {
 8001a8c:	d1f5      	bne.n	8001a7a <ss_crc+0x16>
 8001a8e:	e7ed      	b.n	8001a6c <ss_crc+0x8>

08001a90 <stuff_data>:
    return 0x00;

}

uint8_t stuff_data(uint8_t *buf, uint8_t len)
{
 8001a90:	b530      	push	{r4, r5, lr}
	uint8_t i = 1;
	uint8_t last = 0;
 8001a92:	2200      	movs	r2, #0
 8001a94:	4604      	mov	r4, r0
	uint8_t i = 1;
 8001a96:	2301      	movs	r3, #1
	for (; i < len; i++) {
 8001a98:	428b      	cmp	r3, r1
 8001a9a:	d301      	bcc.n	8001aa0 <stuff_data+0x10>
			buf[last] = i - last;
			last = i;
		}
	}
	return 0x00;
}
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	bd30      	pop	{r4, r5, pc}
		if (buf[i] == FRAME_BYTE) {
 8001aa0:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8001aa4:	b915      	cbnz	r5, 8001aac <stuff_data+0x1c>
			buf[last] = i - last;
 8001aa6:	1a9d      	subs	r5, r3, r2
 8001aa8:	5485      	strb	r5, [r0, r2]
 8001aaa:	461a      	mov	r2, r3
	for (; i < len; i++) {
 8001aac:	3301      	adds	r3, #1
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	e7f2      	b.n	8001a98 <stuff_data+0x8>

08001ab2 <unstuff_data>:

uint8_t unstuff_data(uint8_t *buf, uint8_t len)
{
 8001ab2:	b530      	push	{r4, r5, lr}
	uint8_t next = buf[0];
 8001ab4:	7804      	ldrb	r4, [r0, #0]
	buf[0] = 0x00;
 8001ab6:	2500      	movs	r5, #0
{
 8001ab8:	4602      	mov	r2, r0
	buf[0] = 0x00;
 8001aba:	7005      	strb	r5, [r0, #0]
	uint8_t next = buf[0];
 8001abc:	4620      	mov	r0, r4
	//len -= 1;
	uint8_t tmp = next;
	while ((next < len) && tmp != 0) {
 8001abe:	4288      	cmp	r0, r1
 8001ac0:	d200      	bcs.n	8001ac4 <unstuff_data+0x12>
 8001ac2:	b904      	cbnz	r4, 8001ac6 <unstuff_data+0x14>
		tmp = buf[next];
		buf[next] = FRAME_BYTE;
		next += tmp;
	}
	return next;
}
 8001ac4:	bd30      	pop	{r4, r5, pc}
		tmp = buf[next];
 8001ac6:	5c14      	ldrb	r4, [r2, r0]
		buf[next] = FRAME_BYTE;
 8001ac8:	5415      	strb	r5, [r2, r0]
		next += tmp;
 8001aca:	1903      	adds	r3, r0, r4
 8001acc:	b2d8      	uxtb	r0, r3
 8001ace:	e7f6      	b.n	8001abe <unstuff_data+0xc>

08001ad0 <simpleserial_addcmd>:
	simpleserial_addcmd('v', 0, check_version);
    simpleserial_addcmd('w', 0, ss_get_commands);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*))
{
 8001ad0:	b538      	push	{r3, r4, r5, lr}
	if(num_commands >= MAX_SS_CMDS) {
 8001ad2:	4d0b      	ldr	r5, [pc, #44]	; (8001b00 <simpleserial_addcmd+0x30>)
 8001ad4:	682b      	ldr	r3, [r5, #0]
 8001ad6:	2b0f      	cmp	r3, #15
 8001ad8:	dd04      	ble.n	8001ae4 <simpleserial_addcmd+0x14>
		putch('a');
 8001ada:	2061      	movs	r0, #97	; 0x61
		return 1;
	}

	if(len >= MAX_SS_LEN) {
		putch('b');
 8001adc:	f000 f980 	bl	8001de0 <putch>
		return 1;
 8001ae0:	2001      	movs	r0, #1
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;

	return 0;
}
 8001ae2:	bd38      	pop	{r3, r4, r5, pc}
	if(len >= MAX_SS_LEN) {
 8001ae4:	29ff      	cmp	r1, #255	; 0xff
 8001ae6:	d901      	bls.n	8001aec <simpleserial_addcmd+0x1c>
		putch('b');
 8001ae8:	2062      	movs	r0, #98	; 0x62
 8001aea:	e7f7      	b.n	8001adc <simpleserial_addcmd+0xc>
	commands[num_commands].c   = c;
 8001aec:	240c      	movs	r4, #12
 8001aee:	fb04 5403 	mla	r4, r4, r3, r5
	num_commands++;
 8001af2:	3301      	adds	r3, #1
	commands[num_commands].c   = c;
 8001af4:	7120      	strb	r0, [r4, #4]
	commands[num_commands].fp  = fp;
 8001af6:	e9c4 1202 	strd	r1, r2, [r4, #8]
	num_commands++;
 8001afa:	602b      	str	r3, [r5, #0]
	return 0;
 8001afc:	2000      	movs	r0, #0
 8001afe:	e7f0      	b.n	8001ae2 <simpleserial_addcmd+0x12>
 8001b00:	200001d8 	.word	0x200001d8

08001b04 <simpleserial_init>:
{
 8001b04:	b508      	push	{r3, lr}
	simpleserial_addcmd('v', 0, check_version);
 8001b06:	4a06      	ldr	r2, [pc, #24]	; (8001b20 <simpleserial_init+0x1c>)
 8001b08:	2100      	movs	r1, #0
 8001b0a:	2076      	movs	r0, #118	; 0x76
 8001b0c:	f7ff ffe0 	bl	8001ad0 <simpleserial_addcmd>
}
 8001b10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    simpleserial_addcmd('w', 0, ss_get_commands);
 8001b14:	4a03      	ldr	r2, [pc, #12]	; (8001b24 <simpleserial_init+0x20>)
 8001b16:	2100      	movs	r1, #0
 8001b18:	2077      	movs	r0, #119	; 0x77
 8001b1a:	f7ff bfd9 	b.w	8001ad0 <simpleserial_addcmd>
 8001b1e:	bf00      	nop
 8001b20:	08001b7f 	.word	0x08001b7f
 8001b24:	08001b9d 	.word	0x08001b9d

08001b28 <simpleserial_put>:
	simpleserial_put('e', 0x01, &err);
	return;
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8001b28:	b570      	push	{r4, r5, r6, lr}
 8001b2a:	b0c0      	sub	sp, #256	; 0x100
 8001b2c:	460c      	mov	r4, r1
	uint8_t data_buf[MAX_SS_LEN];
	data_buf[0] = 0x00;
 8001b2e:	2500      	movs	r5, #0
{
 8001b30:	4611      	mov	r1, r2
	data_buf[1] = c;
 8001b32:	f88d 0001 	strb.w	r0, [sp, #1]
	data_buf[2] = size;
	int i = 0;
	for (; i < size; i++) {
		data_buf[i + 3] = output[i];
 8001b36:	4622      	mov	r2, r4
 8001b38:	f10d 0003 	add.w	r0, sp, #3
	data_buf[2] = size;
 8001b3c:	f88d 4002 	strb.w	r4, [sp, #2]
	data_buf[0] = 0x00;
 8001b40:	f88d 5000 	strb.w	r5, [sp]
		data_buf[i + 3] = output[i];
 8001b44:	f001 f900 	bl	8002d48 <memcpy>
	}
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8001b48:	1ca1      	adds	r1, r4, #2
 8001b4a:	b2c9      	uxtb	r1, r1
 8001b4c:	f10d 0001 	add.w	r0, sp, #1
 8001b50:	f7ff ff88 	bl	8001a64 <ss_crc>
 8001b54:	eb0d 0304 	add.w	r3, sp, r4
	data_buf[i + 4] = 0x00;
 8001b58:	1d26      	adds	r6, r4, #4
	stuff_data(data_buf, i + 5);
 8001b5a:	1d61      	adds	r1, r4, #5
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8001b5c:	70d8      	strb	r0, [r3, #3]
	stuff_data(data_buf, i + 5);
 8001b5e:	b2c9      	uxtb	r1, r1
 8001b60:	4668      	mov	r0, sp
	data_buf[i + 4] = 0x00;
 8001b62:	f80d 5006 	strb.w	r5, [sp, r6]
	stuff_data(data_buf, i + 5);
 8001b66:	f7ff ff93 	bl	8001a90 <stuff_data>
	for (int i = 0; i < size + 5; i++) {
 8001b6a:	466c      	mov	r4, sp
		putch(data_buf[i]);
 8001b6c:	f814 0b01 	ldrb.w	r0, [r4], #1
	for (int i = 0; i < size + 5; i++) {
 8001b70:	3501      	adds	r5, #1
		putch(data_buf[i]);
 8001b72:	f000 f935 	bl	8001de0 <putch>
	for (int i = 0; i < size + 5; i++) {
 8001b76:	42ae      	cmp	r6, r5
 8001b78:	daf8      	bge.n	8001b6c <simpleserial_put+0x44>
	}
}
 8001b7a:	b040      	add	sp, #256	; 0x100
 8001b7c:	bd70      	pop	{r4, r5, r6, pc}

08001b7e <check_version>:
{
 8001b7e:	b507      	push	{r0, r1, r2, lr}
	uint8_t ver = SS_VER;
 8001b80:	2303      	movs	r3, #3
	simpleserial_put('r', 1, &ver);
 8001b82:	f10d 0207 	add.w	r2, sp, #7
 8001b86:	2101      	movs	r1, #1
 8001b88:	2072      	movs	r0, #114	; 0x72
	uint8_t ver = SS_VER;
 8001b8a:	f88d 3007 	strb.w	r3, [sp, #7]
	simpleserial_put('r', 1, &ver);
 8001b8e:	f7ff ffcb 	bl	8001b28 <simpleserial_put>
}
 8001b92:	2000      	movs	r0, #0
 8001b94:	b003      	add	sp, #12
 8001b96:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b9a:	0000      	movs	r0, r0

08001b9c <ss_get_commands>:
{
 8001b9c:	b530      	push	{r4, r5, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8001b9e:	480d      	ldr	r0, [pc, #52]	; (8001bd4 <ss_get_commands+0x38>)
 8001ba0:	7801      	ldrb	r1, [r0, #0]
{
 8001ba2:	b085      	sub	sp, #20
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8001ba4:	2200      	movs	r2, #0
        cmd_chars[i] = commands[i].c;
 8001ba6:	240c      	movs	r4, #12
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8001ba8:	b2d3      	uxtb	r3, r2
 8001baa:	428b      	cmp	r3, r1
 8001bac:	f102 0201 	add.w	r2, r2, #1
 8001bb0:	db06      	blt.n	8001bc0 <ss_get_commands+0x24>
    simpleserial_put('r', num_commands & 0xFF, (void *)cmd_chars);
 8001bb2:	466a      	mov	r2, sp
 8001bb4:	2072      	movs	r0, #114	; 0x72
 8001bb6:	f7ff ffb7 	bl	8001b28 <simpleserial_put>
}
 8001bba:	2000      	movs	r0, #0
 8001bbc:	b005      	add	sp, #20
 8001bbe:	bd30      	pop	{r4, r5, pc}
        cmd_chars[i] = commands[i].c;
 8001bc0:	f103 0510 	add.w	r5, r3, #16
 8001bc4:	fb04 0303 	mla	r3, r4, r3, r0
 8001bc8:	446d      	add	r5, sp
 8001bca:	791b      	ldrb	r3, [r3, #4]
 8001bcc:	f805 3c10 	strb.w	r3, [r5, #-16]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8001bd0:	e7ea      	b.n	8001ba8 <ss_get_commands+0xc>
 8001bd2:	bf00      	nop
 8001bd4:	200001d8 	.word	0x200001d8

08001bd8 <simpleserial_get>:
{
 8001bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bdc:	b0c2      	sub	sp, #264	; 0x108
	uint8_t err = 0;
 8001bde:	2500      	movs	r5, #0
 8001be0:	ae02      	add	r6, sp, #8
 8001be2:	f88d 5007 	strb.w	r5, [sp, #7]
	for (int i = 0; i < 4; i++) {
 8001be6:	4634      	mov	r4, r6
		data_buf[i] = getch(); //PTR, cmd, scmd, len
 8001be8:	f000 f8e0 	bl	8001dac <getch>
 8001bec:	f806 0b01 	strb.w	r0, [r6], #1
		if (data_buf[i] == FRAME_BYTE) {
 8001bf0:	b958      	cbnz	r0, 8001c0a <simpleserial_get+0x32>
			goto ERROR;
 8001bf2:	2005      	movs	r0, #5
			err = SS_ERR_FRAME_BYTE;
 8001bf4:	f88d 0007 	strb.w	r0, [sp, #7]
	simpleserial_put('e', 0x01, &err);
 8001bf8:	f10d 0207 	add.w	r2, sp, #7
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	2065      	movs	r0, #101	; 0x65
 8001c00:	f7ff ff92 	bl	8001b28 <simpleserial_put>
}
 8001c04:	b042      	add	sp, #264	; 0x108
 8001c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int i = 0; i < 4; i++) {
 8001c0a:	3501      	adds	r5, #1
 8001c0c:	2d04      	cmp	r5, #4
 8001c0e:	d1eb      	bne.n	8001be8 <simpleserial_get+0x10>
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8001c10:	4629      	mov	r1, r5
 8001c12:	4620      	mov	r0, r4
 8001c14:	f7ff ff4d 	bl	8001ab2 <unstuff_data>
	for(c = 0; c < num_commands; c++)
 8001c18:	4f24      	ldr	r7, [pc, #144]	; (8001cac <simpleserial_get+0xd4>)
		if(commands[c].c == data_buf[1])
 8001c1a:	7861      	ldrb	r1, [r4, #1]
	for(c = 0; c < num_commands; c++)
 8001c1c:	683a      	ldr	r2, [r7, #0]
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8001c1e:	4680      	mov	r8, r0
	for(c = 0; c < num_commands; c++)
 8001c20:	2300      	movs	r3, #0
		if(commands[c].c == data_buf[1])
 8001c22:	200c      	movs	r0, #12
	for(c = 0; c < num_commands; c++)
 8001c24:	fa5f f983 	uxtb.w	r9, r3
 8001c28:	4591      	cmp	r9, r2
 8001c2a:	db02      	blt.n	8001c32 <simpleserial_get+0x5a>
	if (c == num_commands) {
 8001c2c:	d107      	bne.n	8001c3e <simpleserial_get+0x66>
 8001c2e:	2001      	movs	r0, #1
 8001c30:	e7e0      	b.n	8001bf4 <simpleserial_get+0x1c>
		if(commands[c].c == data_buf[1])
 8001c32:	fb00 7609 	mla	r6, r0, r9, r7
 8001c36:	3301      	adds	r3, #1
 8001c38:	7936      	ldrb	r6, [r6, #4]
 8001c3a:	428e      	cmp	r6, r1
 8001c3c:	d1f2      	bne.n	8001c24 <simpleserial_get+0x4c>
	if ((data_buf[3] + 5) < next_frame) {
 8001c3e:	78e3      	ldrb	r3, [r4, #3]
 8001c40:	3305      	adds	r3, #5
 8001c42:	4543      	cmp	r3, r8
 8001c44:	da02      	bge.n	8001c4c <simpleserial_get+0x74>
		goto ERROR;
 8001c46:	2004      	movs	r0, #4
 8001c48:	e7d4      	b.n	8001bf4 <simpleserial_get+0x1c>
	for (; i < data_buf[3] + 5; i++) {
 8001c4a:	4635      	mov	r5, r6
		data_buf[i] = getch();
 8001c4c:	f000 f8ae 	bl	8001dac <getch>
 8001c50:	5560      	strb	r0, [r4, r5]
		if (data_buf[i] == FRAME_BYTE) {
 8001c52:	2800      	cmp	r0, #0
 8001c54:	d0cd      	beq.n	8001bf2 <simpleserial_get+0x1a>
	for (; i < data_buf[3] + 5; i++) {
 8001c56:	78e3      	ldrb	r3, [r4, #3]
 8001c58:	1c6e      	adds	r6, r5, #1
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	42b3      	cmp	r3, r6
 8001c5e:	daf4      	bge.n	8001c4a <simpleserial_get+0x72>
	data_buf[i] = getch();
 8001c60:	f000 f8a4 	bl	8001dac <getch>
 8001c64:	55a0      	strb	r0, [r4, r6]
	if (data_buf[i] != FRAME_BYTE) {
 8001c66:	2800      	cmp	r0, #0
 8001c68:	d1ed      	bne.n	8001c46 <simpleserial_get+0x6e>
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 8001c6a:	f1c8 0301 	rsb	r3, r8, #1
 8001c6e:	fa53 f186 	uxtab	r1, r3, r6
 8001c72:	b2c9      	uxtb	r1, r1
 8001c74:	fa5f fa86 	uxtb.w	sl, r6
 8001c78:	eb04 0008 	add.w	r0, r4, r8
 8001c7c:	f7ff ff19 	bl	8001ab2 <unstuff_data>
	uint8_t crc = ss_crc(data_buf+1, i-2);
 8001c80:	f1aa 0102 	sub.w	r1, sl, #2
 8001c84:	b2c9      	uxtb	r1, r1
 8001c86:	f10d 0009 	add.w	r0, sp, #9
 8001c8a:	f7ff feeb 	bl	8001a64 <ss_crc>
	if (crc != data_buf[i-1]) {
 8001c8e:	5d63      	ldrb	r3, [r4, r5]
 8001c90:	4283      	cmp	r3, r0
 8001c92:	d109      	bne.n	8001ca8 <simpleserial_get+0xd0>
	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 8001c94:	230c      	movs	r3, #12
 8001c96:	fb03 7709 	mla	r7, r3, r9, r7
 8001c9a:	78e2      	ldrb	r2, [r4, #3]
 8001c9c:	68fd      	ldr	r5, [r7, #12]
 8001c9e:	78a1      	ldrb	r1, [r4, #2]
 8001ca0:	7860      	ldrb	r0, [r4, #1]
 8001ca2:	446b      	add	r3, sp
 8001ca4:	47a8      	blx	r5
 8001ca6:	e7a5      	b.n	8001bf4 <simpleserial_get+0x1c>
 8001ca8:	2002      	movs	r0, #2
 8001caa:	e7a3      	b.n	8001bf4 <simpleserial_get+0x1c>
 8001cac:	200001d8 	.word	0x200001d8

08001cb0 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 8001cb0:	b570      	push	{r4, r5, r6, lr}
 8001cb2:	b096      	sub	sp, #88	; 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8001cb4:	2400      	movs	r4, #0
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8001cb6:	2603      	movs	r6, #3
 8001cb8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001cbc:	a80c      	add	r0, sp, #48	; 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8001cbe:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8001cc0:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8001cc4:	9410      	str	r4, [sp, #64]	; 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 8001cc6:	9414      	str	r4, [sp, #80]	; 0x50
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001cc8:	f000 f8a2 	bl	8001e10 <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8001ccc:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8001cce:	4621      	mov	r1, r4
 8001cd0:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8001cd2:	e9cd 3502 	strd	r3, r5, [sp, #8]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cd6:	e9cd 4404 	strd	r4, r4, [sp, #16]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cda:	9406      	str	r4, [sp, #24]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8001cdc:	f000 faea 	bl	80022b4 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <platform_init+0x78>)
 8001ce2:	695a      	ldr	r2, [r3, #20]
 8001ce4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001ce8:	615a      	str	r2, [r3, #20]
 8001cea:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001cec:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8001cf4:	4c0d      	ldr	r4, [pc, #52]	; (8001d2c <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf6:	9301      	str	r3, [sp, #4]
 8001cf8:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8001cfa:	a907      	add	r1, sp, #28
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8001cfc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8001d00:	4620      	mov	r0, r4
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8001d02:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8001d06:	f000 fb75 	bl	80023f4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8001d0a:	462a      	mov	r2, r5
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d12:	f000 fc2f 	bl	8002574 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8001d16:	462a      	mov	r2, r5
 8001d18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d1c:	4620      	mov	r0, r4
 8001d1e:	f000 fc29 	bl	8002574 <HAL_GPIO_WritePin>
#endif
}
 8001d22:	b016      	add	sp, #88	; 0x58
 8001d24:	bd70      	pop	{r4, r5, r6, pc}
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	48000800 	.word	0x48000800

08001d30 <init_uart>:

void init_uart(void)
{
 8001d30:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8001d32:	f44f 62c0 	mov.w	r2, #1536	; 0x600
{
 8001d36:	b088      	sub	sp, #32
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GpioInit.Pull      = GPIO_PULLUP;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001d3e:	2101      	movs	r1, #1
 8001d40:	2303      	movs	r3, #3
 8001d42:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 8001d46:	4c16      	ldr	r4, [pc, #88]	; (8001da0 <init_uart+0x70>)
  GpioInit.Alternate = GPIO_AF7_USART1;
 8001d48:	2307      	movs	r3, #7
 8001d4a:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 8001d4c:	6963      	ldr	r3, [r4, #20]
 8001d4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d52:	6163      	str	r3, [r4, #20]
 8001d54:	6963      	ldr	r3, [r4, #20]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8001d5c:	a903      	add	r1, sp, #12
 8001d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __GPIOA_CLK_ENABLE();
 8001d62:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8001d64:	f000 fb46 	bl	80023f4 <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 8001d68:	480e      	ldr	r0, [pc, #56]	; (8001da4 <init_uart+0x74>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 8001d6a:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8001da8 <init_uart+0x78>
 8001d6e:	f44f 3361 	mov.w	r3, #230400	; 0x38400
 8001d72:	e9c0 c300 	strd	ip, r3, [r0]
  #else
  UartHandle.Init.BaudRate   = 38400;
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8001d76:	2300      	movs	r3, #0
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8001d78:	e9c0 3302 	strd	r3, r3, [r0, #8]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8001d7c:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8001d7e:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8001d80:	230c      	movs	r3, #12
 8001d82:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 8001d84:	69a3      	ldr	r3, [r4, #24]
 8001d86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d8a:	61a3      	str	r3, [r4, #24]
 8001d8c:	69a3      	ldr	r3, [r4, #24]
 8001d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d92:	9302      	str	r3, [sp, #8]
 8001d94:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 8001d96:	f000 fd29 	bl	80027ec <HAL_UART_Init>
}
 8001d9a:	b008      	add	sp, #32
 8001d9c:	bd10      	pop	{r4, pc}
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000
 8001da4:	2000029c 	.word	0x2000029c
 8001da8:	40013800 	.word	0x40013800

08001dac <getch>:
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
}

char getch(void)
{
 8001dac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8001dae:	4d0a      	ldr	r5, [pc, #40]	; (8001dd8 <getch+0x2c>)
    USART1->ICR |= (1 << 3);
 8001db0:	4c0a      	ldr	r4, [pc, #40]	; (8001ddc <getch+0x30>)
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8001db2:	f241 3388 	movw	r3, #5000	; 0x1388
 8001db6:	2201      	movs	r2, #1
 8001db8:	f10d 0107 	add.w	r1, sp, #7
 8001dbc:	4628      	mov	r0, r5
 8001dbe:	f000 fd95 	bl	80028ec <HAL_UART_Receive>
 8001dc2:	b918      	cbnz	r0, 8001dcc <getch+0x20>
  //putch(d);
  return d;
}
 8001dc4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001dc8:	b003      	add	sp, #12
 8001dca:	bd30      	pop	{r4, r5, pc}
    USART1->ICR |= (1 << 3);
 8001dcc:	6a23      	ldr	r3, [r4, #32]
 8001dce:	f043 0308 	orr.w	r3, r3, #8
 8001dd2:	6223      	str	r3, [r4, #32]
 8001dd4:	e7ed      	b.n	8001db2 <getch+0x6>
 8001dd6:	bf00      	nop
 8001dd8:	2000029c 	.word	0x2000029c
 8001ddc:	40013800 	.word	0x40013800

08001de0 <putch>:

void putch(char c)
{
 8001de0:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8001de2:	f241 3388 	movw	r3, #5000	; 0x1388
  uint8_t d  = c;
 8001de6:	f88d 0007 	strb.w	r0, [sp, #7]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8001dea:	2201      	movs	r2, #1
 8001dec:	f10d 0107 	add.w	r1, sp, #7
 8001df0:	4802      	ldr	r0, [pc, #8]	; (8001dfc <putch+0x1c>)
 8001df2:	f000 fd25 	bl	8002840 <HAL_UART_Transmit>
}
 8001df6:	b003      	add	sp, #12
 8001df8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001dfc:	2000029c 	.word	0x2000029c

08001e00 <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 8001e00:	4b02      	ldr	r3, [pc, #8]	; (8001e0c <HAL_GetTick+0xc>)
 8001e02:	6818      	ldr	r0, [r3, #0]
 8001e04:	1c42      	adds	r2, r0, #1
 8001e06:	601a      	str	r2, [r3, #0]
}
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	2000030c 	.word	0x2000030c

08001e10 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e10:	6803      	ldr	r3, [r0, #0]
{
 8001e12:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e16:	07d9      	lsls	r1, r3, #31
{
 8001e18:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1a:	d411      	bmi.n	8001e40 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e1c:	6823      	ldr	r3, [r4, #0]
 8001e1e:	079a      	lsls	r2, r3, #30
 8001e20:	f100 808b 	bmi.w	8001f3a <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e24:	6823      	ldr	r3, [r4, #0]
 8001e26:	071e      	lsls	r6, r3, #28
 8001e28:	f100 80f3 	bmi.w	8002012 <HAL_RCC_OscConfig+0x202>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e2c:	6823      	ldr	r3, [r4, #0]
 8001e2e:	075d      	lsls	r5, r3, #29
 8001e30:	f100 8136 	bmi.w	80020a0 <HAL_RCC_OscConfig+0x290>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e34:	69e2      	ldr	r2, [r4, #28]
 8001e36:	2a00      	cmp	r2, #0
 8001e38:	f040 81b8 	bne.w	80021ac <HAL_RCC_OscConfig+0x39c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	e01f      	b.n	8001e80 <HAL_RCC_OscConfig+0x70>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e40:	49b3      	ldr	r1, [pc, #716]	; (8002110 <HAL_RCC_OscConfig+0x300>)
 8001e42:	684b      	ldr	r3, [r1, #4]
 8001e44:	f003 030c 	and.w	r3, r3, #12
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d007      	beq.n	8001e5c <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e4c:	684b      	ldr	r3, [r1, #4]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d117      	bne.n	8001e86 <HAL_RCC_OscConfig+0x76>
 8001e56:	684b      	ldr	r3, [r1, #4]
 8001e58:	03db      	lsls	r3, r3, #15
 8001e5a:	d514      	bpl.n	8001e86 <HAL_RCC_OscConfig+0x76>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e60:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e64:	6809      	ldr	r1, [r1, #0]
 8001e66:	fa93 f3a3 	rbit	r3, r3
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	fab3 f383 	clz	r3, r3
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	420b      	tst	r3, r1
 8001e76:	d0d1      	beq.n	8001e1c <HAL_RCC_OscConfig+0xc>
 8001e78:	6863      	ldr	r3, [r4, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1ce      	bne.n	8001e1c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001e7e:	2001      	movs	r0, #1
}
 8001e80:	b003      	add	sp, #12
 8001e82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e86:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e8e:	d120      	bne.n	8001ed2 <HAL_RCC_OscConfig+0xc2>
 8001e90:	680b      	ldr	r3, [r1, #0]
 8001e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e96:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e98:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001e9a:	f023 030f 	bic.w	r3, r3, #15
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	62cb      	str	r3, [r1, #44]	; 0x2c
        tickstart = HAL_GetTick();
 8001ea2:	f7ff ffad 	bl	8001e00 <HAL_GetTick>
 8001ea6:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001eaa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eac:	2701      	movs	r7, #1
 8001eae:	fa96 f3a6 	rbit	r3, r6
 8001eb2:	680a      	ldr	r2, [r1, #0]
 8001eb4:	fa96 f3a6 	rbit	r3, r6
 8001eb8:	fab3 f383 	clz	r3, r3
 8001ebc:	fa07 f303 	lsl.w	r3, r7, r3
 8001ec0:	4213      	tst	r3, r2
 8001ec2:	d1ab      	bne.n	8001e1c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec4:	f7ff ff9c 	bl	8001e00 <HAL_GetTick>
 8001ec8:	1b40      	subs	r0, r0, r5
 8001eca:	2864      	cmp	r0, #100	; 0x64
 8001ecc:	d9ef      	bls.n	8001eae <HAL_RCC_OscConfig+0x9e>
            return HAL_TIMEOUT;
 8001ece:	2003      	movs	r0, #3
 8001ed0:	e7d6      	b.n	8001e80 <HAL_RCC_OscConfig+0x70>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed2:	bb1b      	cbnz	r3, 8001f1c <HAL_RCC_OscConfig+0x10c>
 8001ed4:	680b      	ldr	r3, [r1, #0]
 8001ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eda:	600b      	str	r3, [r1, #0]
 8001edc:	680b      	ldr	r3, [r1, #0]
 8001ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee2:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ee4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001ee6:	f023 030f 	bic.w	r3, r3, #15
 8001eea:	4313      	orrs	r3, r2
 8001eec:	62cb      	str	r3, [r1, #44]	; 0x2c
        tickstart = HAL_GetTick();
 8001eee:	f7ff ff87 	bl	8001e00 <HAL_GetTick>
 8001ef2:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001ef6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef8:	2701      	movs	r7, #1
 8001efa:	fa96 f3a6 	rbit	r3, r6
 8001efe:	680a      	ldr	r2, [r1, #0]
 8001f00:	fa96 f3a6 	rbit	r3, r6
 8001f04:	fab3 f383 	clz	r3, r3
 8001f08:	fa07 f303 	lsl.w	r3, r7, r3
 8001f0c:	4213      	tst	r3, r2
 8001f0e:	d085      	beq.n	8001e1c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f10:	f7ff ff76 	bl	8001e00 <HAL_GetTick>
 8001f14:	1b40      	subs	r0, r0, r5
 8001f16:	2864      	cmp	r0, #100	; 0x64
 8001f18:	d9ef      	bls.n	8001efa <HAL_RCC_OscConfig+0xea>
 8001f1a:	e7d8      	b.n	8001ece <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f20:	680b      	ldr	r3, [r1, #0]
 8001f22:	d103      	bne.n	8001f2c <HAL_RCC_OscConfig+0x11c>
 8001f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f28:	600b      	str	r3, [r1, #0]
 8001f2a:	e7b1      	b.n	8001e90 <HAL_RCC_OscConfig+0x80>
 8001f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f30:	600b      	str	r3, [r1, #0]
 8001f32:	680b      	ldr	r3, [r1, #0]
 8001f34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f38:	e7ad      	b.n	8001e96 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f3a:	4975      	ldr	r1, [pc, #468]	; (8002110 <HAL_RCC_OscConfig+0x300>)
 8001f3c:	684b      	ldr	r3, [r1, #4]
 8001f3e:	f013 0f0c 	tst.w	r3, #12
 8001f42:	d007      	beq.n	8001f54 <HAL_RCC_OscConfig+0x144>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f44:	684b      	ldr	r3, [r1, #4]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d11f      	bne.n	8001f8e <HAL_RCC_OscConfig+0x17e>
 8001f4e:	684b      	ldr	r3, [r1, #4]
 8001f50:	03df      	lsls	r7, r3, #15
 8001f52:	d41c      	bmi.n	8001f8e <HAL_RCC_OscConfig+0x17e>
 8001f54:	2302      	movs	r3, #2
 8001f56:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5a:	6808      	ldr	r0, [r1, #0]
 8001f5c:	fa93 f3a3 	rbit	r3, r3
 8001f60:	2201      	movs	r2, #1
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	4203      	tst	r3, r0
 8001f6c:	d002      	beq.n	8001f74 <HAL_RCC_OscConfig+0x164>
 8001f6e:	6923      	ldr	r3, [r4, #16]
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d184      	bne.n	8001e7e <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f74:	6808      	ldr	r0, [r1, #0]
 8001f76:	22f8      	movs	r2, #248	; 0xf8
 8001f78:	fa92 f2a2 	rbit	r2, r2
 8001f7c:	6963      	ldr	r3, [r4, #20]
 8001f7e:	fab2 f282 	clz	r2, r2
 8001f82:	4093      	lsls	r3, r2
 8001f84:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	600b      	str	r3, [r1, #0]
 8001f8c:	e74a      	b.n	8001e24 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f8e:	6922      	ldr	r2, [r4, #16]
 8001f90:	2501      	movs	r5, #1
 8001f92:	b1f2      	cbz	r2, 8001fd2 <HAL_RCC_OscConfig+0x1c2>
 8001f94:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8001f98:	fab3 f383 	clz	r3, r3
 8001f9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fa0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	2702      	movs	r7, #2
 8001fa8:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8001faa:	f7ff ff29 	bl	8001e00 <HAL_GetTick>
 8001fae:	4606      	mov	r6, r0
 8001fb0:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb4:	680a      	ldr	r2, [r1, #0]
 8001fb6:	fa97 f3a7 	rbit	r3, r7
 8001fba:	fab3 f383 	clz	r3, r3
 8001fbe:	fa05 f303 	lsl.w	r3, r5, r3
 8001fc2:	4213      	tst	r3, r2
 8001fc4:	d1d6      	bne.n	8001f74 <HAL_RCC_OscConfig+0x164>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc6:	f7ff ff1b 	bl	8001e00 <HAL_GetTick>
 8001fca:	1b80      	subs	r0, r0, r6
 8001fcc:	2802      	cmp	r0, #2
 8001fce:	d9ef      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x1a0>
 8001fd0:	e77d      	b.n	8001ece <HAL_RCC_OscConfig+0xbe>
 8001fd2:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8001fd6:	fab3 f383 	clz	r3, r3
 8001fda:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fde:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	2702      	movs	r7, #2
 8001fe6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001fe8:	f7ff ff0a 	bl	8001e00 <HAL_GetTick>
 8001fec:	4606      	mov	r6, r0
 8001fee:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff2:	680a      	ldr	r2, [r1, #0]
 8001ff4:	fa97 f3a7 	rbit	r3, r7
 8001ff8:	fab3 f383 	clz	r3, r3
 8001ffc:	fa05 f303 	lsl.w	r3, r5, r3
 8002000:	4213      	tst	r3, r2
 8002002:	f43f af0f 	beq.w	8001e24 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002006:	f7ff fefb 	bl	8001e00 <HAL_GetTick>
 800200a:	1b80      	subs	r0, r0, r6
 800200c:	2802      	cmp	r0, #2
 800200e:	d9ee      	bls.n	8001fee <HAL_RCC_OscConfig+0x1de>
 8002010:	e75d      	b.n	8001ece <HAL_RCC_OscConfig+0xbe>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002012:	69a2      	ldr	r2, [r4, #24]
 8002014:	4d3e      	ldr	r5, [pc, #248]	; (8002110 <HAL_RCC_OscConfig+0x300>)
 8002016:	483f      	ldr	r0, [pc, #252]	; (8002114 <HAL_RCC_OscConfig+0x304>)
 8002018:	2101      	movs	r1, #1
 800201a:	b302      	cbz	r2, 800205e <HAL_RCC_OscConfig+0x24e>
 800201c:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_ENABLE();
 8002020:	fab3 f383 	clz	r3, r3
 8002024:	4403      	add	r3, r0
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	2602      	movs	r6, #2
 800202a:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 800202c:	f7ff fee8 	bl	8001e00 <HAL_GetTick>
 8002030:	4607      	mov	r7, r0
 8002032:	fa96 f3a6 	rbit	r3, r6
 8002036:	fa96 f3a6 	rbit	r3, r6
 800203a:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002040:	fa96 f3a6 	rbit	r3, r6
 8002044:	fab3 f383 	clz	r3, r3
 8002048:	fa01 f303 	lsl.w	r3, r1, r3
 800204c:	4213      	tst	r3, r2
 800204e:	f47f aeed 	bne.w	8001e2c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002052:	f7ff fed5 	bl	8001e00 <HAL_GetTick>
 8002056:	1bc0      	subs	r0, r0, r7
 8002058:	2802      	cmp	r0, #2
 800205a:	d9ea      	bls.n	8002032 <HAL_RCC_OscConfig+0x222>
 800205c:	e737      	b.n	8001ece <HAL_RCC_OscConfig+0xbe>
 800205e:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_DISABLE();
 8002062:	fab3 f383 	clz	r3, r3
 8002066:	4403      	add	r3, r0
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	2602      	movs	r6, #2
 800206c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800206e:	f7ff fec7 	bl	8001e00 <HAL_GetTick>
 8002072:	4607      	mov	r7, r0
 8002074:	fa96 f3a6 	rbit	r3, r6
 8002078:	fa96 f3a6 	rbit	r3, r6
 800207c:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002080:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002082:	fa96 f3a6 	rbit	r3, r6
 8002086:	fab3 f383 	clz	r3, r3
 800208a:	fa01 f303 	lsl.w	r3, r1, r3
 800208e:	4213      	tst	r3, r2
 8002090:	f43f aecc 	beq.w	8001e2c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002094:	f7ff feb4 	bl	8001e00 <HAL_GetTick>
 8002098:	1bc0      	subs	r0, r0, r7
 800209a:	2802      	cmp	r0, #2
 800209c:	d9ea      	bls.n	8002074 <HAL_RCC_OscConfig+0x264>
 800209e:	e716      	b.n	8001ece <HAL_RCC_OscConfig+0xbe>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020a0:	491b      	ldr	r1, [pc, #108]	; (8002110 <HAL_RCC_OscConfig+0x300>)
 80020a2:	69cb      	ldr	r3, [r1, #28]
 80020a4:	00d8      	lsls	r0, r3, #3
 80020a6:	d431      	bmi.n	800210c <HAL_RCC_OscConfig+0x2fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a8:	69cb      	ldr	r3, [r1, #28]
 80020aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ae:	61cb      	str	r3, [r1, #28]
 80020b0:	69cb      	ldr	r3, [r1, #28]
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	9301      	str	r3, [sp, #4]
 80020b8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80020ba:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020bc:	4e16      	ldr	r6, [pc, #88]	; (8002118 <HAL_RCC_OscConfig+0x308>)
 80020be:	6833      	ldr	r3, [r6, #0]
 80020c0:	05da      	lsls	r2, r3, #23
 80020c2:	d52b      	bpl.n	800211c <HAL_RCC_OscConfig+0x30c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c4:	68e3      	ldr	r3, [r4, #12]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d138      	bne.n	800213c <HAL_RCC_OscConfig+0x32c>
 80020ca:	6a0b      	ldr	r3, [r1, #32]
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 80020d2:	f7ff fe95 	bl	8001e00 <HAL_GetTick>
 80020d6:	2602      	movs	r6, #2
 80020d8:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020da:	f04f 0801 	mov.w	r8, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020de:	f241 3988 	movw	r9, #5000	; 0x1388
 80020e2:	fa96 f3a6 	rbit	r3, r6
 80020e6:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ea:	6a0a      	ldr	r2, [r1, #32]
 80020ec:	fa96 f3a6 	rbit	r3, r6
 80020f0:	fab3 f383 	clz	r3, r3
 80020f4:	fa08 f303 	lsl.w	r3, r8, r3
 80020f8:	4213      	tst	r3, r2
 80020fa:	d051      	beq.n	80021a0 <HAL_RCC_OscConfig+0x390>
    if(pwrclkchanged == SET)
 80020fc:	2d00      	cmp	r5, #0
 80020fe:	f43f ae99 	beq.w	8001e34 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002102:	69cb      	ldr	r3, [r1, #28]
 8002104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002108:	61cb      	str	r3, [r1, #28]
 800210a:	e693      	b.n	8001e34 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800210c:	2500      	movs	r5, #0
 800210e:	e7d5      	b.n	80020bc <HAL_RCC_OscConfig+0x2ac>
 8002110:	40021000 	.word	0x40021000
 8002114:	10908120 	.word	0x10908120
 8002118:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800211c:	6833      	ldr	r3, [r6, #0]
 800211e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002122:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002124:	f7ff fe6c 	bl	8001e00 <HAL_GetTick>
 8002128:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212a:	6833      	ldr	r3, [r6, #0]
 800212c:	05db      	lsls	r3, r3, #23
 800212e:	d4c9      	bmi.n	80020c4 <HAL_RCC_OscConfig+0x2b4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002130:	f7ff fe66 	bl	8001e00 <HAL_GetTick>
 8002134:	1bc0      	subs	r0, r0, r7
 8002136:	2864      	cmp	r0, #100	; 0x64
 8002138:	d9f7      	bls.n	800212a <HAL_RCC_OscConfig+0x31a>
 800213a:	e6c8      	b.n	8001ece <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800213c:	bb13      	cbnz	r3, 8002184 <HAL_RCC_OscConfig+0x374>
 800213e:	6a0b      	ldr	r3, [r1, #32]
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	620b      	str	r3, [r1, #32]
 8002146:	6a0b      	ldr	r3, [r1, #32]
 8002148:	f023 0304 	bic.w	r3, r3, #4
 800214c:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 800214e:	f7ff fe57 	bl	8001e00 <HAL_GetTick>
 8002152:	2602      	movs	r6, #2
 8002154:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002156:	f04f 0801 	mov.w	r8, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800215a:	f241 3988 	movw	r9, #5000	; 0x1388
 800215e:	fa96 f3a6 	rbit	r3, r6
 8002162:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002166:	6a0a      	ldr	r2, [r1, #32]
 8002168:	fa96 f3a6 	rbit	r3, r6
 800216c:	fab3 f383 	clz	r3, r3
 8002170:	fa08 f303 	lsl.w	r3, r8, r3
 8002174:	4213      	tst	r3, r2
 8002176:	d0c1      	beq.n	80020fc <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002178:	f7ff fe42 	bl	8001e00 <HAL_GetTick>
 800217c:	1bc0      	subs	r0, r0, r7
 800217e:	4548      	cmp	r0, r9
 8002180:	d9ed      	bls.n	800215e <HAL_RCC_OscConfig+0x34e>
 8002182:	e6a4      	b.n	8001ece <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002184:	2b05      	cmp	r3, #5
 8002186:	6a0b      	ldr	r3, [r1, #32]
 8002188:	d103      	bne.n	8002192 <HAL_RCC_OscConfig+0x382>
 800218a:	f043 0304 	orr.w	r3, r3, #4
 800218e:	620b      	str	r3, [r1, #32]
 8002190:	e79b      	b.n	80020ca <HAL_RCC_OscConfig+0x2ba>
 8002192:	f023 0301 	bic.w	r3, r3, #1
 8002196:	620b      	str	r3, [r1, #32]
 8002198:	6a0b      	ldr	r3, [r1, #32]
 800219a:	f023 0304 	bic.w	r3, r3, #4
 800219e:	e797      	b.n	80020d0 <HAL_RCC_OscConfig+0x2c0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a0:	f7ff fe2e 	bl	8001e00 <HAL_GetTick>
 80021a4:	1bc0      	subs	r0, r0, r7
 80021a6:	4548      	cmp	r0, r9
 80021a8:	d99b      	bls.n	80020e2 <HAL_RCC_OscConfig+0x2d2>
 80021aa:	e690      	b.n	8001ece <HAL_RCC_OscConfig+0xbe>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021ac:	493f      	ldr	r1, [pc, #252]	; (80022ac <HAL_RCC_OscConfig+0x49c>)
 80021ae:	684b      	ldr	r3, [r1, #4]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	f43f ae62 	beq.w	8001e7e <HAL_RCC_OscConfig+0x6e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ba:	2a02      	cmp	r2, #2
 80021bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021c0:	d150      	bne.n	8002264 <HAL_RCC_OscConfig+0x454>
 80021c2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80021c6:	fab3 f383 	clz	r3, r3
 80021ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80021d8:	f7ff fe12 	bl	8001e00 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80022b0 <HAL_RCC_OscConfig+0x4a0>
        tickstart = HAL_GetTick();
 80021e0:	4606      	mov	r6, r0
 80021e2:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e6:	2501      	movs	r5, #1
 80021e8:	fa97 f3a7 	rbit	r3, r7
 80021ec:	680a      	ldr	r2, [r1, #0]
 80021ee:	fa97 f3a7 	rbit	r3, r7
 80021f2:	fab3 f383 	clz	r3, r3
 80021f6:	fa05 f303 	lsl.w	r3, r5, r3
 80021fa:	4213      	tst	r3, r2
 80021fc:	d12c      	bne.n	8002258 <HAL_RCC_OscConfig+0x448>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021fe:	e9d4 0308 	ldrd	r0, r3, [r4, #32]
 8002202:	684a      	ldr	r2, [r1, #4]
 8002204:	4303      	orrs	r3, r0
 8002206:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800220a:	4313      	orrs	r3, r2
 800220c:	604b      	str	r3, [r1, #4]
 800220e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002212:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8002216:	fab3 f383 	clz	r3, r3
 800221a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800221e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002222:	009b      	lsls	r3, r3, #2
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002224:	4f22      	ldr	r7, [pc, #136]	; (80022b0 <HAL_RCC_OscConfig+0x4a0>)
        __HAL_RCC_PLL_ENABLE();
 8002226:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8002228:	f7ff fdea 	bl	8001e00 <HAL_GetTick>
 800222c:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8002230:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002232:	2601      	movs	r6, #1
 8002234:	fa95 f3a5 	rbit	r3, r5
 8002238:	680a      	ldr	r2, [r1, #0]
 800223a:	fa95 f3a5 	rbit	r3, r5
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	fa06 f303 	lsl.w	r3, r6, r3
 8002246:	4213      	tst	r3, r2
 8002248:	f47f adf8 	bne.w	8001e3c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800224c:	f7ff fdd8 	bl	8001e00 <HAL_GetTick>
 8002250:	1b00      	subs	r0, r0, r4
 8002252:	42b8      	cmp	r0, r7
 8002254:	d9ee      	bls.n	8002234 <HAL_RCC_OscConfig+0x424>
 8002256:	e63a      	b.n	8001ece <HAL_RCC_OscConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002258:	f7ff fdd2 	bl	8001e00 <HAL_GetTick>
 800225c:	1b83      	subs	r3, r0, r6
 800225e:	4543      	cmp	r3, r8
 8002260:	d9c2      	bls.n	80021e8 <HAL_RCC_OscConfig+0x3d8>
 8002262:	e634      	b.n	8001ece <HAL_RCC_OscConfig+0xbe>
 8002264:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002268:	fab3 f383 	clz	r3, r3
 800226c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002270:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800227a:	f7ff fdc1 	bl	8001e00 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800227e:	4f0c      	ldr	r7, [pc, #48]	; (80022b0 <HAL_RCC_OscConfig+0x4a0>)
        tickstart = HAL_GetTick();
 8002280:	4604      	mov	r4, r0
 8002282:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002286:	2601      	movs	r6, #1
 8002288:	fa95 f3a5 	rbit	r3, r5
 800228c:	680a      	ldr	r2, [r1, #0]
 800228e:	fa95 f3a5 	rbit	r3, r5
 8002292:	fab3 f383 	clz	r3, r3
 8002296:	fa06 f303 	lsl.w	r3, r6, r3
 800229a:	4213      	tst	r3, r2
 800229c:	f43f adce 	beq.w	8001e3c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a0:	f7ff fdae 	bl	8001e00 <HAL_GetTick>
 80022a4:	1b00      	subs	r0, r0, r4
 80022a6:	42b8      	cmp	r0, r7
 80022a8:	d9ee      	bls.n	8002288 <HAL_RCC_OscConfig+0x478>
 80022aa:	e610      	b.n	8001ece <HAL_RCC_OscConfig+0xbe>
 80022ac:	40021000 	.word	0x40021000
 80022b0:	00030d40 	.word	0x00030d40

080022b4 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80022b4:	4a4d      	ldr	r2, [pc, #308]	; (80023ec <HAL_RCC_ClockConfig+0x138>)
{
 80022b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80022b8:	6813      	ldr	r3, [r2, #0]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	428b      	cmp	r3, r1
{
 80022c0:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80022c2:	d311      	bcc.n	80022e8 <HAL_RCC_ClockConfig+0x34>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c4:	6822      	ldr	r2, [r4, #0]
 80022c6:	0795      	lsls	r5, r2, #30
 80022c8:	d41a      	bmi.n	8002300 <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ca:	07d0      	lsls	r0, r2, #31
 80022cc:	d420      	bmi.n	8002310 <HAL_RCC_ClockConfig+0x5c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80022ce:	4a47      	ldr	r2, [pc, #284]	; (80023ec <HAL_RCC_ClockConfig+0x138>)
 80022d0:	6813      	ldr	r3, [r2, #0]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	428b      	cmp	r3, r1
 80022d8:	d86c      	bhi.n	80023b4 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022da:	6822      	ldr	r2, [r4, #0]
 80022dc:	0751      	lsls	r1, r2, #29
 80022de:	d474      	bmi.n	80023ca <HAL_RCC_ClockConfig+0x116>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e0:	0713      	lsls	r3, r2, #28
 80022e2:	d47a      	bmi.n	80023da <HAL_RCC_ClockConfig+0x126>
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 80022e4:	2000      	movs	r0, #0
 80022e6:	e00a      	b.n	80022fe <HAL_RCC_ClockConfig+0x4a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e8:	6813      	ldr	r3, [r2, #0]
 80022ea:	f023 0307 	bic.w	r3, r3, #7
 80022ee:	430b      	orrs	r3, r1
 80022f0:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022f2:	6813      	ldr	r3, [r2, #0]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	428b      	cmp	r3, r1
 80022fa:	d0e3      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 80022fc:	2001      	movs	r0, #1
}
 80022fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002300:	483b      	ldr	r0, [pc, #236]	; (80023f0 <HAL_RCC_ClockConfig+0x13c>)
 8002302:	68a5      	ldr	r5, [r4, #8]
 8002304:	6843      	ldr	r3, [r0, #4]
 8002306:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800230a:	432b      	orrs	r3, r5
 800230c:	6043      	str	r3, [r0, #4]
 800230e:	e7dc      	b.n	80022ca <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002310:	6862      	ldr	r2, [r4, #4]
 8002312:	4d37      	ldr	r5, [pc, #220]	; (80023f0 <HAL_RCC_ClockConfig+0x13c>)
 8002314:	2a01      	cmp	r2, #1
 8002316:	d125      	bne.n	8002364 <HAL_RCC_ClockConfig+0xb0>
 8002318:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800231c:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002320:	6828      	ldr	r0, [r5, #0]
 8002322:	fa93 f3a3 	rbit	r3, r3
 8002326:	fab3 f383 	clz	r3, r3
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	4203      	tst	r3, r0
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002330:	d0e4      	beq.n	80022fc <HAL_RCC_ClockConfig+0x48>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002332:	686b      	ldr	r3, [r5, #4]
 8002334:	f023 0303 	bic.w	r3, r3, #3
 8002338:	4313      	orrs	r3, r2
 800233a:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800233c:	f7ff fd60 	bl	8001e00 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002340:	6863      	ldr	r3, [r4, #4]
 8002342:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8002344:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002346:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800234a:	d11c      	bne.n	8002386 <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800234c:	686b      	ldr	r3, [r5, #4]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b04      	cmp	r3, #4
 8002354:	d0bb      	beq.n	80022ce <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002356:	f7ff fd53 	bl	8001e00 <HAL_GetTick>
 800235a:	1b80      	subs	r0, r0, r6
 800235c:	42b8      	cmp	r0, r7
 800235e:	d9f5      	bls.n	800234c <HAL_RCC_ClockConfig+0x98>
          return HAL_TIMEOUT;
 8002360:	2003      	movs	r0, #3
 8002362:	e7cc      	b.n	80022fe <HAL_RCC_ClockConfig+0x4a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002364:	2a02      	cmp	r2, #2
 8002366:	bf0c      	ite	eq
 8002368:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 800236c:	2302      	movne	r3, #2
 800236e:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002372:	682e      	ldr	r6, [r5, #0]
 8002374:	fa93 f3a3 	rbit	r3, r3
 8002378:	2001      	movs	r0, #1
 800237a:	fab3 f383 	clz	r3, r3
 800237e:	fa00 f303 	lsl.w	r3, r0, r3
 8002382:	4233      	tst	r3, r6
 8002384:	e7d4      	b.n	8002330 <HAL_RCC_ClockConfig+0x7c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002386:	2b02      	cmp	r3, #2
 8002388:	d10f      	bne.n	80023aa <HAL_RCC_ClockConfig+0xf6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800238a:	686b      	ldr	r3, [r5, #4]
 800238c:	f003 030c 	and.w	r3, r3, #12
 8002390:	2b08      	cmp	r3, #8
 8002392:	d09c      	beq.n	80022ce <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002394:	f7ff fd34 	bl	8001e00 <HAL_GetTick>
 8002398:	1b80      	subs	r0, r0, r6
 800239a:	42b8      	cmp	r0, r7
 800239c:	d9f5      	bls.n	800238a <HAL_RCC_ClockConfig+0xd6>
 800239e:	e7df      	b.n	8002360 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a0:	f7ff fd2e 	bl	8001e00 <HAL_GetTick>
 80023a4:	1b80      	subs	r0, r0, r6
 80023a6:	42b8      	cmp	r0, r7
 80023a8:	d8da      	bhi.n	8002360 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80023aa:	686b      	ldr	r3, [r5, #4]
 80023ac:	f013 0f0c 	tst.w	r3, #12
 80023b0:	d1f6      	bne.n	80023a0 <HAL_RCC_ClockConfig+0xec>
 80023b2:	e78c      	b.n	80022ce <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b4:	6813      	ldr	r3, [r2, #0]
 80023b6:	f023 0307 	bic.w	r3, r3, #7
 80023ba:	430b      	orrs	r3, r1
 80023bc:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023be:	6813      	ldr	r3, [r2, #0]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	428b      	cmp	r3, r1
 80023c6:	d199      	bne.n	80022fc <HAL_RCC_ClockConfig+0x48>
 80023c8:	e787      	b.n	80022da <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ca:	4909      	ldr	r1, [pc, #36]	; (80023f0 <HAL_RCC_ClockConfig+0x13c>)
 80023cc:	68e0      	ldr	r0, [r4, #12]
 80023ce:	684b      	ldr	r3, [r1, #4]
 80023d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023d4:	4303      	orrs	r3, r0
 80023d6:	604b      	str	r3, [r1, #4]
 80023d8:	e782      	b.n	80022e0 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023da:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <HAL_RCC_ClockConfig+0x13c>)
 80023dc:	6921      	ldr	r1, [r4, #16]
 80023de:	6853      	ldr	r3, [r2, #4]
 80023e0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80023e4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80023e8:	6053      	str	r3, [r2, #4]
 80023ea:	e77b      	b.n	80022e4 <HAL_RCC_ClockConfig+0x30>
 80023ec:	40022000 	.word	0x40022000
 80023f0:	40021000 	.word	0x40021000

080023f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f8:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8002568 <HAL_GPIO_Init+0x174>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023fc:	4c5b      	ldr	r4, [pc, #364]	; (800256c <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00U;
 80023fe:	2300      	movs	r3, #0
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8002400:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002404:	680a      	ldr	r2, [r1, #0]
 8002406:	fa32 f503 	lsrs.w	r5, r2, r3
 800240a:	d102      	bne.n	8002412 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 800240c:	b003      	add	sp, #12
 800240e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002412:	2501      	movs	r5, #1
 8002414:	fa05 fa03 	lsl.w	sl, r5, r3
    if(iocurrent)
 8002418:	ea1a 0202 	ands.w	r2, sl, r2
 800241c:	f000 8099 	beq.w	8002552 <HAL_GPIO_Init+0x15e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002420:	684d      	ldr	r5, [r1, #4]
 8002422:	f025 0e10 	bic.w	lr, r5, #16
 8002426:	f1be 0f02 	cmp.w	lr, #2
 800242a:	d111      	bne.n	8002450 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3];
 800242c:	08df      	lsrs	r7, r3, #3
 800242e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002432:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8002436:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002438:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800243c:	fa09 fb0c 	lsl.w	fp, r9, ip
 8002440:	ea26 0b0b 	bic.w	fp, r6, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002444:	690e      	ldr	r6, [r1, #16]
 8002446:	fa06 f60c 	lsl.w	r6, r6, ip
 800244a:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->AFR[position >> 3] = temp;
 800244e:	623e      	str	r6, [r7, #32]
      temp = GPIOx->MODER;
 8002450:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002454:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002458:	2603      	movs	r6, #3
 800245a:	fa06 f70c 	lsl.w	r7, r6, ip
 800245e:	ea2b 0b07 	bic.w	fp, fp, r7
 8002462:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002464:	f005 0703 	and.w	r7, r5, #3
 8002468:	fa07 f70c 	lsl.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800246c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002470:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002474:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 8002478:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800247a:	d811      	bhi.n	80024a0 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 800247c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800247e:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002482:	68cf      	ldr	r7, [r1, #12]
 8002484:	fa07 f70c 	lsl.w	r7, r7, ip
 8002488:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800248c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800248e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002490:	ea27 0e0a 	bic.w	lr, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002494:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002498:	409f      	lsls	r7, r3
 800249a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800249e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80024a0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024a2:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024a4:	688e      	ldr	r6, [r1, #8]
 80024a6:	fa06 f60c 	lsl.w	r6, r6, ip
 80024aa:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 80024ac:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024ae:	00ee      	lsls	r6, r5, #3
 80024b0:	d54f      	bpl.n	8002552 <HAL_GPIO_Init+0x15e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b2:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80024b6:	f046 0601 	orr.w	r6, r6, #1
 80024ba:	f8c8 6018 	str.w	r6, [r8, #24]
 80024be:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80024c2:	f023 0703 	bic.w	r7, r3, #3
 80024c6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80024ca:	f006 0601 	and.w	r6, r6, #1
 80024ce:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80024d2:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80024d4:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d8:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80024da:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80024dc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80024e0:	fa09 fe0c 	lsl.w	lr, r9, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024e4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80024e8:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024ec:	d033      	beq.n	8002556 <HAL_GPIO_Init+0x162>
 80024ee:	4e20      	ldr	r6, [pc, #128]	; (8002570 <HAL_GPIO_Init+0x17c>)
 80024f0:	42b0      	cmp	r0, r6
 80024f2:	d032      	beq.n	800255a <HAL_GPIO_Init+0x166>
 80024f4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80024f8:	42b0      	cmp	r0, r6
 80024fa:	d030      	beq.n	800255e <HAL_GPIO_Init+0x16a>
 80024fc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002500:	42b0      	cmp	r0, r6
 8002502:	d02e      	beq.n	8002562 <HAL_GPIO_Init+0x16e>
 8002504:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002508:	42b0      	cmp	r0, r6
 800250a:	bf14      	ite	ne
 800250c:	2605      	movne	r6, #5
 800250e:	2604      	moveq	r6, #4
 8002510:	fa06 f60c 	lsl.w	r6, r6, ip
 8002514:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8002518:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800251a:	6826      	ldr	r6, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800251c:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800251e:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8002522:	bf0c      	ite	eq
 8002524:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002526:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 8002528:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 800252a:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800252c:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8002530:	bf0c      	ite	eq
 8002532:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002534:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 8002536:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8002538:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800253a:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800253e:	bf0c      	ite	eq
 8002540:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002542:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 8002544:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8002546:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002548:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 800254a:	bf54      	ite	pl
 800254c:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800254e:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 8002550:	60e6      	str	r6, [r4, #12]
    position++;
 8002552:	3301      	adds	r3, #1
 8002554:	e756      	b.n	8002404 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002556:	2600      	movs	r6, #0
 8002558:	e7da      	b.n	8002510 <HAL_GPIO_Init+0x11c>
 800255a:	2601      	movs	r6, #1
 800255c:	e7d8      	b.n	8002510 <HAL_GPIO_Init+0x11c>
 800255e:	2602      	movs	r6, #2
 8002560:	e7d6      	b.n	8002510 <HAL_GPIO_Init+0x11c>
 8002562:	2603      	movs	r6, #3
 8002564:	e7d4      	b.n	8002510 <HAL_GPIO_Init+0x11c>
 8002566:	bf00      	nop
 8002568:	40021000 	.word	0x40021000
 800256c:	40010400 	.word	0x40010400
 8002570:	48000400 	.word	0x48000400

08002574 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002574:	b10a      	cbz	r2, 800257a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002576:	6181      	str	r1, [r0, #24]
 8002578:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800257a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800257c:	4770      	bx	lr
 800257e:	0000      	movs	r0, r0

08002580 <UART_SetConfig>:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002580:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002582:	6883      	ldr	r3, [r0, #8]
 8002584:	69c1      	ldr	r1, [r0, #28]
{
 8002586:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002588:	6905      	ldr	r5, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800258a:	6814      	ldr	r4, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800258c:	432b      	orrs	r3, r5
 800258e:	6945      	ldr	r5, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002590:	f424 4416 	bic.w	r4, r4, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002594:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002596:	f024 040c 	bic.w	r4, r4, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800259a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800259c:	4323      	orrs	r3, r4
 800259e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025a0:	6853      	ldr	r3, [r2, #4]
 80025a2:	68c4      	ldr	r4, [r0, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80025a4:	6a05      	ldr	r5, [r0, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025aa:	4323      	orrs	r3, r4
 80025ac:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80025ae:	6894      	ldr	r4, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80025b0:	6983      	ldr	r3, [r0, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80025b2:	f424 6430 	bic.w	r4, r4, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80025b6:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80025b8:	4323      	orrs	r3, r4
 80025ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025bc:	4b54      	ldr	r3, [pc, #336]	; (8002710 <UART_SetConfig+0x190>)
 80025be:	429a      	cmp	r2, r3
 80025c0:	d112      	bne.n	80025e8 <UART_SetConfig+0x68>
 80025c2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80025c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c8:	f003 0303 	and.w	r3, r3, #3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d06b      	beq.n	80026a8 <UART_SetConfig+0x128>
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d01e      	beq.n	8002612 <UART_SetConfig+0x92>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80025d4:	6840      	ldr	r0, [r0, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025d6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80025da:	ea4f 0350 	mov.w	r3, r0, lsr #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025de:	f040 8089 	bne.w	80026f4 <UART_SetConfig+0x174>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80025e2:	f503 0361 	add.w	r3, r3, #14745600	; 0xe10000
 80025e6:	e01e      	b.n	8002626 <UART_SetConfig+0xa6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025e8:	4b4a      	ldr	r3, [pc, #296]	; (8002714 <UART_SetConfig+0x194>)
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d11e      	bne.n	800262c <UART_SetConfig+0xac>
 80025ee:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025fc:	d054      	beq.n	80026a8 <UART_SetConfig+0x128>
 80025fe:	d805      	bhi.n	800260c <UART_SetConfig+0x8c>
 8002600:	2b00      	cmp	r3, #0
 8002602:	d05a      	beq.n	80026ba <UART_SetConfig+0x13a>
 8002604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002608:	d0e4      	beq.n	80025d4 <UART_SetConfig+0x54>
 800260a:	e038      	b.n	800267e <UART_SetConfig+0xfe>
 800260c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002610:	d135      	bne.n	800267e <UART_SetConfig+0xfe>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002612:	6840      	ldr	r0, [r0, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002614:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002618:	ea4f 0350 	mov.w	r3, r0, lsr #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800261c:	d16f      	bne.n	80026fe <UART_SetConfig+0x17e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800261e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002622:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002626:	fbb3 f3f0 	udiv	r3, r3, r0
 800262a:	e050      	b.n	80026ce <UART_SetConfig+0x14e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800262c:	4b3a      	ldr	r3, [pc, #232]	; (8002718 <UART_SetConfig+0x198>)
 800262e:	429a      	cmp	r2, r3
 8002630:	d10f      	bne.n	8002652 <UART_SetConfig+0xd2>
 8002632:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8002636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002638:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800263c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002640:	d032      	beq.n	80026a8 <UART_SetConfig+0x128>
 8002642:	d803      	bhi.n	800264c <UART_SetConfig+0xcc>
 8002644:	b3cb      	cbz	r3, 80026ba <UART_SetConfig+0x13a>
 8002646:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800264a:	e7dd      	b.n	8002608 <UART_SetConfig+0x88>
 800264c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002650:	e7de      	b.n	8002610 <UART_SetConfig+0x90>
 8002652:	4b32      	ldr	r3, [pc, #200]	; (800271c <UART_SetConfig+0x19c>)
 8002654:	429a      	cmp	r2, r3
 8002656:	d10f      	bne.n	8002678 <UART_SetConfig+0xf8>
 8002658:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002662:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002666:	d01f      	beq.n	80026a8 <UART_SetConfig+0x128>
 8002668:	d803      	bhi.n	8002672 <UART_SetConfig+0xf2>
 800266a:	b333      	cbz	r3, 80026ba <UART_SetConfig+0x13a>
 800266c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002670:	e7ca      	b.n	8002608 <UART_SetConfig+0x88>
 8002672:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002676:	e7cb      	b.n	8002610 <UART_SetConfig+0x90>
 8002678:	4b29      	ldr	r3, [pc, #164]	; (8002720 <UART_SetConfig+0x1a0>)
 800267a:	429a      	cmp	r2, r3
 800267c:	d005      	beq.n	800268a <UART_SetConfig+0x10a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800267e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002682:	f04f 0001 	mov.w	r0, #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002686:	d02b      	beq.n	80026e0 <UART_SetConfig+0x160>
    }
  }

  return ret;

}
 8002688:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800268a:	4b26      	ldr	r3, [pc, #152]	; (8002724 <UART_SetConfig+0x1a4>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002692:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002696:	d007      	beq.n	80026a8 <UART_SetConfig+0x128>
 8002698:	d803      	bhi.n	80026a2 <UART_SetConfig+0x122>
 800269a:	b173      	cbz	r3, 80026ba <UART_SetConfig+0x13a>
 800269c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026a0:	e7b2      	b.n	8002608 <UART_SetConfig+0x88>
 80026a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026a6:	e7b3      	b.n	8002610 <UART_SetConfig+0x90>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80026a8:	6840      	ldr	r0, [r0, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026aa:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80026ae:	ea4f 0350 	mov.w	r3, r0, lsr #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026b2:	d129      	bne.n	8002708 <UART_SetConfig+0x188>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80026b4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80026b8:	e7b5      	b.n	8002626 <UART_SetConfig+0xa6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026ba:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80026be:	6841      	ldr	r1, [r0, #4]
 80026c0:	ea4f 0351 	mov.w	r3, r1, lsr #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026c4:	d10e      	bne.n	80026e4 <UART_SetConfig+0x164>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80026c6:	f503 0361 	add.w	r3, r3, #14745600	; 0xe10000
 80026ca:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80026ce:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80026d0:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80026d2:	f023 010f 	bic.w	r1, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026d6:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80026da:	430b      	orrs	r3, r1
 80026dc:	60d3      	str	r3, [r2, #12]
 80026de:	e7d3      	b.n	8002688 <UART_SetConfig+0x108>
  uint16_t usartdiv                   = 0x0000U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	e7f6      	b.n	80026d2 <UART_SetConfig+0x152>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80026e4:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 80026e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ec:	b29b      	uxth	r3, r3
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80026ee:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80026f0:	2000      	movs	r0, #0
 80026f2:	e7c9      	b.n	8002688 <UART_SetConfig+0x108>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80026f4:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 80026f8:	fbb3 f3f0 	udiv	r3, r3, r0
 80026fc:	e7f6      	b.n	80026ec <UART_SetConfig+0x16c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80026fe:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002702:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002706:	e7f7      	b.n	80026f8 <UART_SetConfig+0x178>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002708:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800270c:	e7f4      	b.n	80026f8 <UART_SetConfig+0x178>
 800270e:	bf00      	nop
 8002710:	40013800 	.word	0x40013800
 8002714:	40004400 	.word	0x40004400
 8002718:	40004800 	.word	0x40004800
 800271c:	40004c00 	.word	0x40004c00
 8002720:	40005000 	.word	0x40005000
 8002724:	40021000 	.word	0x40021000

08002728 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800272c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8002730:	4604      	mov	r4, r0
 8002732:	4616      	mov	r6, r2
 8002734:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002736:	6825      	ldr	r5, [r4, #0]
 8002738:	69eb      	ldr	r3, [r5, #28]
 800273a:	ea31 0303 	bics.w	r3, r1, r3
 800273e:	bf0c      	ite	eq
 8002740:	2301      	moveq	r3, #1
 8002742:	2300      	movne	r3, #0
 8002744:	42b3      	cmp	r3, r6
 8002746:	d001      	beq.n	800274c <UART_WaitOnFlagUntilTimeout+0x24>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002748:	2000      	movs	r0, #0
 800274a:	e016      	b.n	800277a <UART_WaitOnFlagUntilTimeout+0x52>
    if(Timeout != HAL_MAX_DELAY)
 800274c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8002750:	d0f2      	beq.n	8002738 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002752:	f1b8 0f00 	cmp.w	r8, #0
 8002756:	d112      	bne.n	800277e <UART_WaitOnFlagUntilTimeout+0x56>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002758:	682b      	ldr	r3, [r5, #0]
 800275a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800275e:	602b      	str	r3, [r5, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002760:	68ab      	ldr	r3, [r5, #8]
 8002762:	f023 0301 	bic.w	r3, r3, #1
 8002766:	60ab      	str	r3, [r5, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002768:	2320      	movs	r3, #32
 800276a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800276e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002772:	2300      	movs	r3, #0
 8002774:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
        return HAL_TIMEOUT;
 8002778:	2003      	movs	r0, #3
}
 800277a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800277e:	f7ff fb3f 	bl	8001e00 <HAL_GetTick>
 8002782:	1bc0      	subs	r0, r0, r7
 8002784:	4540      	cmp	r0, r8
 8002786:	d9d6      	bls.n	8002736 <UART_WaitOnFlagUntilTimeout+0xe>
 8002788:	e7e6      	b.n	8002758 <UART_WaitOnFlagUntilTimeout+0x30>

0800278a <UART_CheckIdleState>:
{
 800278a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800278c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800278e:	2100      	movs	r1, #0
 8002790:	66c1      	str	r1, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002792:	f7ff fb35 	bl	8001e00 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002796:	6826      	ldr	r6, [r4, #0]
 8002798:	6833      	ldr	r3, [r6, #0]
 800279a:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800279c:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800279e:	d416      	bmi.n	80027ce <UART_CheckIdleState+0x44>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80027a0:	6833      	ldr	r3, [r6, #0]
 80027a2:	075b      	lsls	r3, r3, #29
 80027a4:	d50a      	bpl.n	80027bc <UART_CheckIdleState+0x32>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	2200      	movs	r2, #0
 80027ae:	462b      	mov	r3, r5
 80027b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80027b4:	4620      	mov	r0, r4
 80027b6:	f7ff ffb7 	bl	8002728 <UART_WaitOnFlagUntilTimeout>
 80027ba:	b9a0      	cbnz	r0, 80027e6 <UART_CheckIdleState+0x5c>
  huart->gState  = HAL_UART_STATE_READY;
 80027bc:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80027be:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80027c0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80027c4:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80027c8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 80027cc:	e00c      	b.n	80027e8 <UART_CheckIdleState+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	460a      	mov	r2, r1
 80027d6:	4603      	mov	r3, r0
 80027d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80027dc:	4620      	mov	r0, r4
 80027de:	f7ff ffa3 	bl	8002728 <UART_WaitOnFlagUntilTimeout>
 80027e2:	2800      	cmp	r0, #0
 80027e4:	d0dc      	beq.n	80027a0 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80027e6:	2003      	movs	r0, #3
}
 80027e8:	b002      	add	sp, #8
 80027ea:	bd70      	pop	{r4, r5, r6, pc}

080027ec <HAL_UART_Init>:
{
 80027ec:	b538      	push	{r3, r4, r5, lr}
  if(huart == NULL)
 80027ee:	4604      	mov	r4, r0
 80027f0:	b320      	cbz	r0, 800283c <HAL_UART_Init+0x50>
  if(huart->gState == HAL_UART_STATE_RESET)
 80027f2:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80027f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80027fa:	b90b      	cbnz	r3, 8002800 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 80027fc:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  __HAL_UART_DISABLE(huart);
 8002800:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002802:	2324      	movs	r3, #36	; 0x24
 8002804:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002808:	682b      	ldr	r3, [r5, #0]
 800280a:	f023 0301 	bic.w	r3, r3, #1
 800280e:	602b      	str	r3, [r5, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002810:	4620      	mov	r0, r4
 8002812:	f7ff feb5 	bl	8002580 <UART_SetConfig>
 8002816:	2801      	cmp	r0, #1
 8002818:	d010      	beq.n	800283c <HAL_UART_Init+0x50>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800281a:	686b      	ldr	r3, [r5, #4]
 800281c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002820:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002822:	68ab      	ldr	r3, [r5, #8]
 8002824:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002828:	60ab      	str	r3, [r5, #8]
  __HAL_UART_ENABLE(huart);
 800282a:	682b      	ldr	r3, [r5, #0]
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	602b      	str	r3, [r5, #0]
  return UART_CheckIdleState(huart);
 8002832:	4620      	mov	r0, r4
}
 8002834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return UART_CheckIdleState(huart);
 8002838:	f7ff bfa7 	b.w	800278a <UART_CheckIdleState>
}
 800283c:	2001      	movs	r0, #1
 800283e:	bd38      	pop	{r3, r4, r5, pc}

08002840 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002842:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002844:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002848:	2b20      	cmp	r3, #32
{
 800284a:	460d      	mov	r5, r1
 800284c:	4604      	mov	r4, r0
 800284e:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8002850:	d14a      	bne.n	80028e8 <HAL_UART_Transmit+0xa8>
  {
    if((pData == NULL ) || (Size == 0U))
 8002852:	2d00      	cmp	r5, #0
 8002854:	d046      	beq.n	80028e4 <HAL_UART_Transmit+0xa4>
 8002856:	2a00      	cmp	r2, #0
 8002858:	d044      	beq.n	80028e4 <HAL_UART_Transmit+0xa4>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800285a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800285e:	2b01      	cmp	r3, #1
 8002860:	d042      	beq.n	80028e8 <HAL_UART_Transmit+0xa8>
 8002862:	2301      	movs	r3, #1
 8002864:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002868:	2300      	movs	r3, #0
 800286a:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800286c:	2321      	movs	r3, #33	; 0x21
 800286e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002872:	f7ff fac5 	bl	8001e00 <HAL_GetTick>

    huart->TxXferSize = Size;
 8002876:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 800287a:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 800287c:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002880:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002884:	b292      	uxth	r2, r2
 8002886:	b962      	cbnz	r2, 80028a2 <HAL_UART_Transmit+0x62>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002888:	9600      	str	r6, [sp, #0]
 800288a:	463b      	mov	r3, r7
 800288c:	2140      	movs	r1, #64	; 0x40
 800288e:	4620      	mov	r0, r4
 8002890:	f7ff ff4a 	bl	8002728 <UART_WaitOnFlagUntilTimeout>
 8002894:	b998      	cbnz	r0, 80028be <HAL_UART_Transmit+0x7e>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002896:	2320      	movs	r3, #32
 8002898:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800289c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 80028a0:	e00e      	b.n	80028c0 <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 80028a2:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80028a6:	3a01      	subs	r2, #1
 80028a8:	b292      	uxth	r2, r2
 80028aa:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028ae:	463b      	mov	r3, r7
 80028b0:	9600      	str	r6, [sp, #0]
 80028b2:	2200      	movs	r2, #0
 80028b4:	2180      	movs	r1, #128	; 0x80
 80028b6:	4620      	mov	r0, r4
 80028b8:	f7ff ff36 	bl	8002728 <UART_WaitOnFlagUntilTimeout>
 80028bc:	b110      	cbz	r0, 80028c4 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 80028be:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80028c0:	b003      	add	sp, #12
 80028c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028c4:	68a3      	ldr	r3, [r4, #8]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80028c6:	6822      	ldr	r2, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028cc:	d107      	bne.n	80028de <HAL_UART_Transmit+0x9e>
 80028ce:	6923      	ldr	r3, [r4, #16]
 80028d0:	b92b      	cbnz	r3, 80028de <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80028d2:	f835 3b02 	ldrh.w	r3, [r5], #2
 80028d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80028da:	8513      	strh	r3, [r2, #40]	; 0x28
 80028dc:	e7d0      	b.n	8002880 <HAL_UART_Transmit+0x40>
 80028de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80028e2:	e7fa      	b.n	80028da <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 80028e4:	2001      	movs	r0, #1
 80028e6:	e7eb      	b.n	80028c0 <HAL_UART_Transmit+0x80>
    __HAL_LOCK(huart);
 80028e8:	2002      	movs	r0, #2
 80028ea:	e7e9      	b.n	80028c0 <HAL_UART_Transmit+0x80>

080028ec <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80028f0:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80028f2:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80028f6:	2b20      	cmp	r3, #32
{
 80028f8:	460d      	mov	r5, r1
 80028fa:	4604      	mov	r4, r0
 80028fc:	4611      	mov	r1, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 80028fe:	d15c      	bne.n	80029ba <HAL_UART_Receive+0xce>
  {
    if((pData == NULL ) || (Size == 0U))
 8002900:	2d00      	cmp	r5, #0
 8002902:	d058      	beq.n	80029b6 <HAL_UART_Receive+0xca>
 8002904:	2a00      	cmp	r2, #0
 8002906:	d056      	beq.n	80029b6 <HAL_UART_Receive+0xca>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002908:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800290c:	2b01      	cmp	r3, #1
 800290e:	d054      	beq.n	80029ba <HAL_UART_Receive+0xce>
 8002910:	2301      	movs	r3, #1
 8002912:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 8002916:	6803      	ldr	r3, [r0, #0]
 8002918:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800291c:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800291e:	2300      	movs	r3, #0
 8002920:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002922:	2322      	movs	r3, #34	; 0x22
 8002924:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002928:	f7ff fa6a 	bl	8001e00 <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800292c:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 800292e:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8002932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002936:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 8002938:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800293c:	d115      	bne.n	800296a <HAL_UART_Receive+0x7e>
 800293e:	6923      	ldr	r3, [r4, #16]
 8002940:	b98b      	cbnz	r3, 8002966 <HAL_UART_Receive+0x7a>
 8002942:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002946:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 800294a:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 800294e:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8002952:	b280      	uxth	r0, r0
 8002954:	b980      	cbnz	r0, 8002978 <HAL_UART_Receive+0x8c>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002956:	2320      	movs	r3, #32
 8002958:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800295c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002960:	b002      	add	sp, #8
 8002962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8002966:	23ff      	movs	r3, #255	; 0xff
 8002968:	e7ed      	b.n	8002946 <HAL_UART_Receive+0x5a>
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1ed      	bne.n	800294a <HAL_UART_Receive+0x5e>
 800296e:	6923      	ldr	r3, [r4, #16]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f8      	beq.n	8002966 <HAL_UART_Receive+0x7a>
 8002974:	237f      	movs	r3, #127	; 0x7f
 8002976:	e7e6      	b.n	8002946 <HAL_UART_Receive+0x5a>
      huart->RxXferCount--;
 8002978:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 800297c:	3a01      	subs	r2, #1
 800297e:	b292      	uxth	r2, r2
 8002980:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002984:	4643      	mov	r3, r8
 8002986:	9600      	str	r6, [sp, #0]
 8002988:	2200      	movs	r2, #0
 800298a:	2120      	movs	r1, #32
 800298c:	4620      	mov	r0, r4
 800298e:	f7ff fecb 	bl	8002728 <UART_WaitOnFlagUntilTimeout>
 8002992:	b9a0      	cbnz	r0, 80029be <HAL_UART_Receive+0xd2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002994:	68a2      	ldr	r2, [r4, #8]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002996:	6823      	ldr	r3, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002998:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800299c:	d106      	bne.n	80029ac <HAL_UART_Receive+0xc0>
 800299e:	6922      	ldr	r2, [r4, #16]
 80029a0:	b922      	cbnz	r2, 80029ac <HAL_UART_Receive+0xc0>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80029a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80029a4:	403b      	ands	r3, r7
 80029a6:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 80029aa:	e7d0      	b.n	800294e <HAL_UART_Receive+0x62>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80029ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80029ae:	403b      	ands	r3, r7
 80029b0:	f805 3b01 	strb.w	r3, [r5], #1
 80029b4:	e7cb      	b.n	800294e <HAL_UART_Receive+0x62>
      return  HAL_ERROR;
 80029b6:	2001      	movs	r0, #1
 80029b8:	e7d2      	b.n	8002960 <HAL_UART_Receive+0x74>
    __HAL_LOCK(huart);
 80029ba:	2002      	movs	r0, #2
 80029bc:	e7d0      	b.n	8002960 <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 80029be:	2003      	movs	r0, #3
 80029c0:	e7ce      	b.n	8002960 <HAL_UART_Receive+0x74>
 80029c2:	0000      	movs	r0, r0

080029c4 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80029c4:	4a0a      	ldr	r2, [pc, #40]	; (80029f0 <_sbrk+0x2c>)
 80029c6:	6811      	ldr	r1, [r2, #0]
{
 80029c8:	b508      	push	{r3, lr}
 80029ca:	4603      	mov	r3, r0
	if (heap_end == 0)
 80029cc:	b909      	cbnz	r1, 80029d2 <_sbrk+0xe>
		heap_end = &end;
 80029ce:	4909      	ldr	r1, [pc, #36]	; (80029f4 <_sbrk+0x30>)
 80029d0:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 80029d2:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80029d4:	4669      	mov	r1, sp
 80029d6:	4403      	add	r3, r0
 80029d8:	428b      	cmp	r3, r1
 80029da:	d906      	bls.n	80029ea <_sbrk+0x26>
	{
		errno = ENOMEM;
 80029dc:	f000 faec 	bl	8002fb8 <__errno>
 80029e0:	230c      	movs	r3, #12
 80029e2:	6003      	str	r3, [r0, #0]
		return (char *) -1;
 80029e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (char *) prev_heap_end;
}
 80029e8:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80029ea:	6013      	str	r3, [r2, #0]
	return (char *) prev_heap_end;
 80029ec:	e7fc      	b.n	80029e8 <_sbrk+0x24>
 80029ee:	bf00      	nop
 80029f0:	20000314 	.word	0x20000314
 80029f4:	20000480 	.word	0x20000480

080029f8 <Reset_Handler>:
 80029f8:	2100      	movs	r1, #0
 80029fa:	e003      	b.n	8002a04 <LoopCopyDataInit>

080029fc <CopyDataInit>:
 80029fc:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <LoopForever+0x2>)
 80029fe:	585b      	ldr	r3, [r3, r1]
 8002a00:	5043      	str	r3, [r0, r1]
 8002a02:	3104      	adds	r1, #4

08002a04 <LoopCopyDataInit>:
 8002a04:	480a      	ldr	r0, [pc, #40]	; (8002a30 <LoopForever+0x6>)
 8002a06:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <LoopForever+0xa>)
 8002a08:	1842      	adds	r2, r0, r1
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d3f6      	bcc.n	80029fc <CopyDataInit>
 8002a0e:	4a0a      	ldr	r2, [pc, #40]	; (8002a38 <LoopForever+0xe>)
 8002a10:	e002      	b.n	8002a18 <LoopFillZerobss>

08002a12 <FillZerobss>:
 8002a12:	2300      	movs	r3, #0
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	3204      	adds	r2, #4

08002a18 <LoopFillZerobss>:
 8002a18:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <LoopForever+0x12>)
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d3f9      	bcc.n	8002a12 <FillZerobss>
 8002a1e:	f3af 8000 	nop.w
 8002a22:	f000 f96d 	bl	8002d00 <__libc_init_array>
 8002a26:	f7fd fcfb 	bl	8000420 <main>

08002a2a <LoopForever>:
 8002a2a:	e7fe      	b.n	8002a2a <LoopForever>
 8002a2c:	08004300 	.word	0x08004300
 8002a30:	20000000 	.word	0x20000000
 8002a34:	200000b0 	.word	0x200000b0
 8002a38:	200000b0 	.word	0x200000b0
 8002a3c:	20000480 	.word	0x20000480

08002a40 <BusFault_Handler>:
 8002a40:	e7fe      	b.n	8002a40 <BusFault_Handler>
 8002a42:	0000      	movs	r0, r0

08002a44 <__udivmoddi4>:
 8002a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a48:	9d08      	ldr	r5, [sp, #32]
 8002a4a:	460c      	mov	r4, r1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d14e      	bne.n	8002aee <__udivmoddi4+0xaa>
 8002a50:	4694      	mov	ip, r2
 8002a52:	458c      	cmp	ip, r1
 8002a54:	4686      	mov	lr, r0
 8002a56:	fab2 f282 	clz	r2, r2
 8002a5a:	d962      	bls.n	8002b22 <__udivmoddi4+0xde>
 8002a5c:	b14a      	cbz	r2, 8002a72 <__udivmoddi4+0x2e>
 8002a5e:	f1c2 0320 	rsb	r3, r2, #32
 8002a62:	4091      	lsls	r1, r2
 8002a64:	fa20 f303 	lsr.w	r3, r0, r3
 8002a68:	fa0c fc02 	lsl.w	ip, ip, r2
 8002a6c:	4319      	orrs	r1, r3
 8002a6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8002a72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8002a76:	fa1f f68c 	uxth.w	r6, ip
 8002a7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8002a7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8002a82:	fb07 1114 	mls	r1, r7, r4, r1
 8002a86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002a8a:	fb04 f106 	mul.w	r1, r4, r6
 8002a8e:	4299      	cmp	r1, r3
 8002a90:	d90a      	bls.n	8002aa8 <__udivmoddi4+0x64>
 8002a92:	eb1c 0303 	adds.w	r3, ip, r3
 8002a96:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
 8002a9a:	f080 8113 	bcs.w	8002cc4 <__udivmoddi4+0x280>
 8002a9e:	4299      	cmp	r1, r3
 8002aa0:	f240 8110 	bls.w	8002cc4 <__udivmoddi4+0x280>
 8002aa4:	3c02      	subs	r4, #2
 8002aa6:	4463      	add	r3, ip
 8002aa8:	1a59      	subs	r1, r3, r1
 8002aaa:	fa1f f38e 	uxth.w	r3, lr
 8002aae:	fbb1 f0f7 	udiv	r0, r1, r7
 8002ab2:	fb07 1110 	mls	r1, r7, r0, r1
 8002ab6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002aba:	fb00 f606 	mul.w	r6, r0, r6
 8002abe:	429e      	cmp	r6, r3
 8002ac0:	d90a      	bls.n	8002ad8 <__udivmoddi4+0x94>
 8002ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8002ac6:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8002aca:	f080 80fd 	bcs.w	8002cc8 <__udivmoddi4+0x284>
 8002ace:	429e      	cmp	r6, r3
 8002ad0:	f240 80fa 	bls.w	8002cc8 <__udivmoddi4+0x284>
 8002ad4:	4463      	add	r3, ip
 8002ad6:	3802      	subs	r0, #2
 8002ad8:	1b9b      	subs	r3, r3, r6
 8002ada:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8002ade:	2100      	movs	r1, #0
 8002ae0:	b11d      	cbz	r5, 8002aea <__udivmoddi4+0xa6>
 8002ae2:	40d3      	lsrs	r3, r2
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	e9c5 3200 	strd	r3, r2, [r5]
 8002aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002aee:	428b      	cmp	r3, r1
 8002af0:	d905      	bls.n	8002afe <__udivmoddi4+0xba>
 8002af2:	b10d      	cbz	r5, 8002af8 <__udivmoddi4+0xb4>
 8002af4:	e9c5 0100 	strd	r0, r1, [r5]
 8002af8:	2100      	movs	r1, #0
 8002afa:	4608      	mov	r0, r1
 8002afc:	e7f5      	b.n	8002aea <__udivmoddi4+0xa6>
 8002afe:	fab3 f183 	clz	r1, r3
 8002b02:	2900      	cmp	r1, #0
 8002b04:	d146      	bne.n	8002b94 <__udivmoddi4+0x150>
 8002b06:	42a3      	cmp	r3, r4
 8002b08:	d302      	bcc.n	8002b10 <__udivmoddi4+0xcc>
 8002b0a:	4290      	cmp	r0, r2
 8002b0c:	f0c0 80f1 	bcc.w	8002cf2 <__udivmoddi4+0x2ae>
 8002b10:	1a86      	subs	r6, r0, r2
 8002b12:	eb64 0303 	sbc.w	r3, r4, r3
 8002b16:	2001      	movs	r0, #1
 8002b18:	2d00      	cmp	r5, #0
 8002b1a:	d0e6      	beq.n	8002aea <__udivmoddi4+0xa6>
 8002b1c:	e9c5 6300 	strd	r6, r3, [r5]
 8002b20:	e7e3      	b.n	8002aea <__udivmoddi4+0xa6>
 8002b22:	2a00      	cmp	r2, #0
 8002b24:	f040 8091 	bne.w	8002c4a <__udivmoddi4+0x206>
 8002b28:	eba1 040c 	sub.w	r4, r1, ip
 8002b2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8002b30:	fa1f f78c 	uxth.w	r7, ip
 8002b34:	2101      	movs	r1, #1
 8002b36:	fbb4 f6f8 	udiv	r6, r4, r8
 8002b3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8002b3e:	fb08 4416 	mls	r4, r8, r6, r4
 8002b42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8002b46:	fb07 f006 	mul.w	r0, r7, r6
 8002b4a:	4298      	cmp	r0, r3
 8002b4c:	d908      	bls.n	8002b60 <__udivmoddi4+0x11c>
 8002b4e:	eb1c 0303 	adds.w	r3, ip, r3
 8002b52:	f106 34ff 	add.w	r4, r6, #4294967295	; 0xffffffff
 8002b56:	d202      	bcs.n	8002b5e <__udivmoddi4+0x11a>
 8002b58:	4298      	cmp	r0, r3
 8002b5a:	f200 80ce 	bhi.w	8002cfa <__udivmoddi4+0x2b6>
 8002b5e:	4626      	mov	r6, r4
 8002b60:	1a1c      	subs	r4, r3, r0
 8002b62:	fa1f f38e 	uxth.w	r3, lr
 8002b66:	fbb4 f0f8 	udiv	r0, r4, r8
 8002b6a:	fb08 4410 	mls	r4, r8, r0, r4
 8002b6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8002b72:	fb00 f707 	mul.w	r7, r0, r7
 8002b76:	429f      	cmp	r7, r3
 8002b78:	d908      	bls.n	8002b8c <__udivmoddi4+0x148>
 8002b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8002b7e:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8002b82:	d202      	bcs.n	8002b8a <__udivmoddi4+0x146>
 8002b84:	429f      	cmp	r7, r3
 8002b86:	f200 80b1 	bhi.w	8002cec <__udivmoddi4+0x2a8>
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	1bdb      	subs	r3, r3, r7
 8002b8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8002b92:	e7a5      	b.n	8002ae0 <__udivmoddi4+0x9c>
 8002b94:	f1c1 0620 	rsb	r6, r1, #32
 8002b98:	408b      	lsls	r3, r1
 8002b9a:	fa22 f706 	lsr.w	r7, r2, r6
 8002b9e:	431f      	orrs	r7, r3
 8002ba0:	fa20 fc06 	lsr.w	ip, r0, r6
 8002ba4:	fa04 f301 	lsl.w	r3, r4, r1
 8002ba8:	ea43 030c 	orr.w	r3, r3, ip
 8002bac:	40f4      	lsrs	r4, r6
 8002bae:	fa00 f801 	lsl.w	r8, r0, r1
 8002bb2:	0c38      	lsrs	r0, r7, #16
 8002bb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8002bb8:	fbb4 fef0 	udiv	lr, r4, r0
 8002bbc:	fa1f fc87 	uxth.w	ip, r7
 8002bc0:	fb00 441e 	mls	r4, r0, lr, r4
 8002bc4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8002bc8:	fb0e f90c 	mul.w	r9, lr, ip
 8002bcc:	45a1      	cmp	r9, r4
 8002bce:	fa02 f201 	lsl.w	r2, r2, r1
 8002bd2:	d90a      	bls.n	8002bea <__udivmoddi4+0x1a6>
 8002bd4:	193c      	adds	r4, r7, r4
 8002bd6:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 8002bda:	f080 8085 	bcs.w	8002ce8 <__udivmoddi4+0x2a4>
 8002bde:	45a1      	cmp	r9, r4
 8002be0:	f240 8082 	bls.w	8002ce8 <__udivmoddi4+0x2a4>
 8002be4:	f1ae 0e02 	sub.w	lr, lr, #2
 8002be8:	443c      	add	r4, r7
 8002bea:	eba4 0409 	sub.w	r4, r4, r9
 8002bee:	fa1f f983 	uxth.w	r9, r3
 8002bf2:	fbb4 f3f0 	udiv	r3, r4, r0
 8002bf6:	fb00 4413 	mls	r4, r0, r3, r4
 8002bfa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8002bfe:	fb03 fc0c 	mul.w	ip, r3, ip
 8002c02:	45a4      	cmp	ip, r4
 8002c04:	d907      	bls.n	8002c16 <__udivmoddi4+0x1d2>
 8002c06:	193c      	adds	r4, r7, r4
 8002c08:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8002c0c:	d268      	bcs.n	8002ce0 <__udivmoddi4+0x29c>
 8002c0e:	45a4      	cmp	ip, r4
 8002c10:	d966      	bls.n	8002ce0 <__udivmoddi4+0x29c>
 8002c12:	3b02      	subs	r3, #2
 8002c14:	443c      	add	r4, r7
 8002c16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8002c1a:	fba0 9302 	umull	r9, r3, r0, r2
 8002c1e:	eba4 040c 	sub.w	r4, r4, ip
 8002c22:	429c      	cmp	r4, r3
 8002c24:	46ce      	mov	lr, r9
 8002c26:	469c      	mov	ip, r3
 8002c28:	d352      	bcc.n	8002cd0 <__udivmoddi4+0x28c>
 8002c2a:	d04f      	beq.n	8002ccc <__udivmoddi4+0x288>
 8002c2c:	b155      	cbz	r5, 8002c44 <__udivmoddi4+0x200>
 8002c2e:	ebb8 030e 	subs.w	r3, r8, lr
 8002c32:	eb64 040c 	sbc.w	r4, r4, ip
 8002c36:	fa04 f606 	lsl.w	r6, r4, r6
 8002c3a:	40cb      	lsrs	r3, r1
 8002c3c:	40cc      	lsrs	r4, r1
 8002c3e:	431e      	orrs	r6, r3
 8002c40:	e9c5 6400 	strd	r6, r4, [r5]
 8002c44:	2100      	movs	r1, #0
 8002c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c4a:	f1c2 0320 	rsb	r3, r2, #32
 8002c4e:	fa20 f103 	lsr.w	r1, r0, r3
 8002c52:	fa0c fc02 	lsl.w	ip, ip, r2
 8002c56:	fa24 f303 	lsr.w	r3, r4, r3
 8002c5a:	4094      	lsls	r4, r2
 8002c5c:	430c      	orrs	r4, r1
 8002c5e:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8002c62:	fa00 fe02 	lsl.w	lr, r0, r2
 8002c66:	fa1f f78c 	uxth.w	r7, ip
 8002c6a:	fbb3 f0f8 	udiv	r0, r3, r8
 8002c6e:	fb08 3110 	mls	r1, r8, r0, r3
 8002c72:	0c23      	lsrs	r3, r4, #16
 8002c74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002c78:	fb00 f107 	mul.w	r1, r0, r7
 8002c7c:	4299      	cmp	r1, r3
 8002c7e:	d908      	bls.n	8002c92 <__udivmoddi4+0x24e>
 8002c80:	eb1c 0303 	adds.w	r3, ip, r3
 8002c84:	f100 36ff 	add.w	r6, r0, #4294967295	; 0xffffffff
 8002c88:	d22c      	bcs.n	8002ce4 <__udivmoddi4+0x2a0>
 8002c8a:	4299      	cmp	r1, r3
 8002c8c:	d92a      	bls.n	8002ce4 <__udivmoddi4+0x2a0>
 8002c8e:	3802      	subs	r0, #2
 8002c90:	4463      	add	r3, ip
 8002c92:	1a5b      	subs	r3, r3, r1
 8002c94:	b2a4      	uxth	r4, r4
 8002c96:	fbb3 f1f8 	udiv	r1, r3, r8
 8002c9a:	fb08 3311 	mls	r3, r8, r1, r3
 8002c9e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8002ca2:	fb01 f307 	mul.w	r3, r1, r7
 8002ca6:	42a3      	cmp	r3, r4
 8002ca8:	d908      	bls.n	8002cbc <__udivmoddi4+0x278>
 8002caa:	eb1c 0404 	adds.w	r4, ip, r4
 8002cae:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 8002cb2:	d213      	bcs.n	8002cdc <__udivmoddi4+0x298>
 8002cb4:	42a3      	cmp	r3, r4
 8002cb6:	d911      	bls.n	8002cdc <__udivmoddi4+0x298>
 8002cb8:	3902      	subs	r1, #2
 8002cba:	4464      	add	r4, ip
 8002cbc:	1ae4      	subs	r4, r4, r3
 8002cbe:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8002cc2:	e738      	b.n	8002b36 <__udivmoddi4+0xf2>
 8002cc4:	4604      	mov	r4, r0
 8002cc6:	e6ef      	b.n	8002aa8 <__udivmoddi4+0x64>
 8002cc8:	4608      	mov	r0, r1
 8002cca:	e705      	b.n	8002ad8 <__udivmoddi4+0x94>
 8002ccc:	45c8      	cmp	r8, r9
 8002cce:	d2ad      	bcs.n	8002c2c <__udivmoddi4+0x1e8>
 8002cd0:	ebb9 0e02 	subs.w	lr, r9, r2
 8002cd4:	eb63 0c07 	sbc.w	ip, r3, r7
 8002cd8:	3801      	subs	r0, #1
 8002cda:	e7a7      	b.n	8002c2c <__udivmoddi4+0x1e8>
 8002cdc:	4631      	mov	r1, r6
 8002cde:	e7ed      	b.n	8002cbc <__udivmoddi4+0x278>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	e798      	b.n	8002c16 <__udivmoddi4+0x1d2>
 8002ce4:	4630      	mov	r0, r6
 8002ce6:	e7d4      	b.n	8002c92 <__udivmoddi4+0x24e>
 8002ce8:	46d6      	mov	lr, sl
 8002cea:	e77e      	b.n	8002bea <__udivmoddi4+0x1a6>
 8002cec:	4463      	add	r3, ip
 8002cee:	3802      	subs	r0, #2
 8002cf0:	e74c      	b.n	8002b8c <__udivmoddi4+0x148>
 8002cf2:	4606      	mov	r6, r0
 8002cf4:	4623      	mov	r3, r4
 8002cf6:	4608      	mov	r0, r1
 8002cf8:	e70e      	b.n	8002b18 <__udivmoddi4+0xd4>
 8002cfa:	3e02      	subs	r6, #2
 8002cfc:	4463      	add	r3, ip
 8002cfe:	e72f      	b.n	8002b60 <__udivmoddi4+0x11c>

08002d00 <__libc_init_array>:
 8002d00:	b570      	push	{r4, r5, r6, lr}
 8002d02:	4d0d      	ldr	r5, [pc, #52]	; (8002d38 <__libc_init_array+0x38>)
 8002d04:	4c0d      	ldr	r4, [pc, #52]	; (8002d3c <__libc_init_array+0x3c>)
 8002d06:	1b64      	subs	r4, r4, r5
 8002d08:	10a4      	asrs	r4, r4, #2
 8002d0a:	2600      	movs	r6, #0
 8002d0c:	42a6      	cmp	r6, r4
 8002d0e:	d109      	bne.n	8002d24 <__libc_init_array+0x24>
 8002d10:	4d0b      	ldr	r5, [pc, #44]	; (8002d40 <__libc_init_array+0x40>)
 8002d12:	4c0c      	ldr	r4, [pc, #48]	; (8002d44 <__libc_init_array+0x44>)
 8002d14:	f000 ffea 	bl	8003cec <_init>
 8002d18:	1b64      	subs	r4, r4, r5
 8002d1a:	10a4      	asrs	r4, r4, #2
 8002d1c:	2600      	movs	r6, #0
 8002d1e:	42a6      	cmp	r6, r4
 8002d20:	d105      	bne.n	8002d2e <__libc_init_array+0x2e>
 8002d22:	bd70      	pop	{r4, r5, r6, pc}
 8002d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d28:	4798      	blx	r3
 8002d2a:	3601      	adds	r6, #1
 8002d2c:	e7ee      	b.n	8002d0c <__libc_init_array+0xc>
 8002d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d32:	4798      	blx	r3
 8002d34:	3601      	adds	r6, #1
 8002d36:	e7f2      	b.n	8002d1e <__libc_init_array+0x1e>
 8002d38:	080042f8 	.word	0x080042f8
 8002d3c:	080042f8 	.word	0x080042f8
 8002d40:	080042f8 	.word	0x080042f8
 8002d44:	080042fc 	.word	0x080042fc

08002d48 <memcpy>:
 8002d48:	440a      	add	r2, r1
 8002d4a:	4291      	cmp	r1, r2
 8002d4c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002d50:	d100      	bne.n	8002d54 <memcpy+0xc>
 8002d52:	4770      	bx	lr
 8002d54:	b510      	push	{r4, lr}
 8002d56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d5e:	4291      	cmp	r1, r2
 8002d60:	d1f9      	bne.n	8002d56 <memcpy+0xe>
 8002d62:	bd10      	pop	{r4, pc}

08002d64 <__assert_func>:
 8002d64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002d66:	4614      	mov	r4, r2
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <__assert_func+0x2c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4605      	mov	r5, r0
 8002d70:	68d8      	ldr	r0, [r3, #12]
 8002d72:	b954      	cbnz	r4, 8002d8a <__assert_func+0x26>
 8002d74:	4b07      	ldr	r3, [pc, #28]	; (8002d94 <__assert_func+0x30>)
 8002d76:	461c      	mov	r4, r3
 8002d78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002d7c:	9100      	str	r1, [sp, #0]
 8002d7e:	462b      	mov	r3, r5
 8002d80:	4905      	ldr	r1, [pc, #20]	; (8002d98 <__assert_func+0x34>)
 8002d82:	f000 f8b1 	bl	8002ee8 <fiprintf>
 8002d86:	f000 fe15 	bl	80039b4 <abort>
 8002d8a:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <__assert_func+0x38>)
 8002d8c:	e7f4      	b.n	8002d78 <__assert_func+0x14>
 8002d8e:	bf00      	nop
 8002d90:	20000060 	.word	0x20000060
 8002d94:	080042bc 	.word	0x080042bc
 8002d98:	0800428e 	.word	0x0800428e
 8002d9c:	08004281 	.word	0x08004281

08002da0 <std>:
 8002da0:	2300      	movs	r3, #0
 8002da2:	b510      	push	{r4, lr}
 8002da4:	4604      	mov	r4, r0
 8002da6:	e9c0 3300 	strd	r3, r3, [r0]
 8002daa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002dae:	6083      	str	r3, [r0, #8]
 8002db0:	8181      	strh	r1, [r0, #12]
 8002db2:	6643      	str	r3, [r0, #100]	; 0x64
 8002db4:	81c2      	strh	r2, [r0, #14]
 8002db6:	6183      	str	r3, [r0, #24]
 8002db8:	4619      	mov	r1, r3
 8002dba:	2208      	movs	r2, #8
 8002dbc:	305c      	adds	r0, #92	; 0x5c
 8002dbe:	f000 f92f 	bl	8003020 <memset>
 8002dc2:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <std+0x58>)
 8002dc4:	6263      	str	r3, [r4, #36]	; 0x24
 8002dc6:	4b0d      	ldr	r3, [pc, #52]	; (8002dfc <std+0x5c>)
 8002dc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8002dca:	4b0d      	ldr	r3, [pc, #52]	; (8002e00 <std+0x60>)
 8002dcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002dce:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <std+0x64>)
 8002dd0:	6323      	str	r3, [r4, #48]	; 0x30
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <std+0x68>)
 8002dd4:	6224      	str	r4, [r4, #32]
 8002dd6:	429c      	cmp	r4, r3
 8002dd8:	d006      	beq.n	8002de8 <std+0x48>
 8002dda:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002dde:	4294      	cmp	r4, r2
 8002de0:	d002      	beq.n	8002de8 <std+0x48>
 8002de2:	33d0      	adds	r3, #208	; 0xd0
 8002de4:	429c      	cmp	r4, r3
 8002de6:	d105      	bne.n	8002df4 <std+0x54>
 8002de8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002df0:	f000 b91e 	b.w	8003030 <__retarget_lock_init_recursive>
 8002df4:	bd10      	pop	{r4, pc}
 8002df6:	bf00      	nop
 8002df8:	08002f0d 	.word	0x08002f0d
 8002dfc:	08002f2f 	.word	0x08002f2f
 8002e00:	08002f67 	.word	0x08002f67
 8002e04:	08002f8b 	.word	0x08002f8b
 8002e08:	20000334 	.word	0x20000334

08002e0c <stdio_exit_handler>:
 8002e0c:	4a02      	ldr	r2, [pc, #8]	; (8002e18 <stdio_exit_handler+0xc>)
 8002e0e:	4903      	ldr	r1, [pc, #12]	; (8002e1c <stdio_exit_handler+0x10>)
 8002e10:	4803      	ldr	r0, [pc, #12]	; (8002e20 <stdio_exit_handler+0x14>)
 8002e12:	f000 b8d7 	b.w	8002fc4 <_fwalk_sglue>
 8002e16:	bf00      	nop
 8002e18:	20000054 	.word	0x20000054
 8002e1c:	08003831 	.word	0x08003831
 8002e20:	20000064 	.word	0x20000064

08002e24 <cleanup_stdio>:
 8002e24:	6841      	ldr	r1, [r0, #4]
 8002e26:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <cleanup_stdio+0x34>)
 8002e28:	4299      	cmp	r1, r3
 8002e2a:	b510      	push	{r4, lr}
 8002e2c:	4604      	mov	r4, r0
 8002e2e:	d001      	beq.n	8002e34 <cleanup_stdio+0x10>
 8002e30:	f000 fcfe 	bl	8003830 <_fflush_r>
 8002e34:	68a1      	ldr	r1, [r4, #8]
 8002e36:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <cleanup_stdio+0x38>)
 8002e38:	4299      	cmp	r1, r3
 8002e3a:	d002      	beq.n	8002e42 <cleanup_stdio+0x1e>
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	f000 fcf7 	bl	8003830 <_fflush_r>
 8002e42:	68e1      	ldr	r1, [r4, #12]
 8002e44:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <cleanup_stdio+0x3c>)
 8002e46:	4299      	cmp	r1, r3
 8002e48:	d004      	beq.n	8002e54 <cleanup_stdio+0x30>
 8002e4a:	4620      	mov	r0, r4
 8002e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e50:	f000 bcee 	b.w	8003830 <_fflush_r>
 8002e54:	bd10      	pop	{r4, pc}
 8002e56:	bf00      	nop
 8002e58:	20000334 	.word	0x20000334
 8002e5c:	2000039c 	.word	0x2000039c
 8002e60:	20000404 	.word	0x20000404

08002e64 <global_stdio_init.part.0>:
 8002e64:	b510      	push	{r4, lr}
 8002e66:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <global_stdio_init.part.0+0x30>)
 8002e68:	4c0b      	ldr	r4, [pc, #44]	; (8002e98 <global_stdio_init.part.0+0x34>)
 8002e6a:	4a0c      	ldr	r2, [pc, #48]	; (8002e9c <global_stdio_init.part.0+0x38>)
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	4620      	mov	r0, r4
 8002e70:	2200      	movs	r2, #0
 8002e72:	2104      	movs	r1, #4
 8002e74:	f7ff ff94 	bl	8002da0 <std>
 8002e78:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	2109      	movs	r1, #9
 8002e80:	f7ff ff8e 	bl	8002da0 <std>
 8002e84:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002e88:	2202      	movs	r2, #2
 8002e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e8e:	2112      	movs	r1, #18
 8002e90:	f7ff bf86 	b.w	8002da0 <std>
 8002e94:	2000046c 	.word	0x2000046c
 8002e98:	20000334 	.word	0x20000334
 8002e9c:	08002e0d 	.word	0x08002e0d

08002ea0 <__sfp_lock_acquire>:
 8002ea0:	4801      	ldr	r0, [pc, #4]	; (8002ea8 <__sfp_lock_acquire+0x8>)
 8002ea2:	f000 b8c6 	b.w	8003032 <__retarget_lock_acquire_recursive>
 8002ea6:	bf00      	nop
 8002ea8:	20000471 	.word	0x20000471

08002eac <__sfp_lock_release>:
 8002eac:	4801      	ldr	r0, [pc, #4]	; (8002eb4 <__sfp_lock_release+0x8>)
 8002eae:	f000 b8c1 	b.w	8003034 <__retarget_lock_release_recursive>
 8002eb2:	bf00      	nop
 8002eb4:	20000471 	.word	0x20000471

08002eb8 <__sinit>:
 8002eb8:	b510      	push	{r4, lr}
 8002eba:	4604      	mov	r4, r0
 8002ebc:	f7ff fff0 	bl	8002ea0 <__sfp_lock_acquire>
 8002ec0:	6a23      	ldr	r3, [r4, #32]
 8002ec2:	b11b      	cbz	r3, 8002ecc <__sinit+0x14>
 8002ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ec8:	f7ff bff0 	b.w	8002eac <__sfp_lock_release>
 8002ecc:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <__sinit+0x28>)
 8002ece:	6223      	str	r3, [r4, #32]
 8002ed0:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <__sinit+0x2c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1f5      	bne.n	8002ec4 <__sinit+0xc>
 8002ed8:	f7ff ffc4 	bl	8002e64 <global_stdio_init.part.0>
 8002edc:	e7f2      	b.n	8002ec4 <__sinit+0xc>
 8002ede:	bf00      	nop
 8002ee0:	08002e25 	.word	0x08002e25
 8002ee4:	2000046c 	.word	0x2000046c

08002ee8 <fiprintf>:
 8002ee8:	b40e      	push	{r1, r2, r3}
 8002eea:	b503      	push	{r0, r1, lr}
 8002eec:	4601      	mov	r1, r0
 8002eee:	ab03      	add	r3, sp, #12
 8002ef0:	4805      	ldr	r0, [pc, #20]	; (8002f08 <fiprintf+0x20>)
 8002ef2:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ef6:	6800      	ldr	r0, [r0, #0]
 8002ef8:	9301      	str	r3, [sp, #4]
 8002efa:	f000 f8c3 	bl	8003084 <_vfiprintf_r>
 8002efe:	b002      	add	sp, #8
 8002f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f04:	b003      	add	sp, #12
 8002f06:	4770      	bx	lr
 8002f08:	20000060 	.word	0x20000060

08002f0c <__sread>:
 8002f0c:	b510      	push	{r4, lr}
 8002f0e:	460c      	mov	r4, r1
 8002f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f14:	f000 fd68 	bl	80039e8 <_read_r>
 8002f18:	2800      	cmp	r0, #0
 8002f1a:	bfab      	itete	ge
 8002f1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002f1e:	89a3      	ldrhlt	r3, [r4, #12]
 8002f20:	181b      	addge	r3, r3, r0
 8002f22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002f26:	bfac      	ite	ge
 8002f28:	6563      	strge	r3, [r4, #84]	; 0x54
 8002f2a:	81a3      	strhlt	r3, [r4, #12]
 8002f2c:	bd10      	pop	{r4, pc}

08002f2e <__swrite>:
 8002f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f32:	461f      	mov	r7, r3
 8002f34:	898b      	ldrh	r3, [r1, #12]
 8002f36:	05db      	lsls	r3, r3, #23
 8002f38:	4605      	mov	r5, r0
 8002f3a:	460c      	mov	r4, r1
 8002f3c:	4616      	mov	r6, r2
 8002f3e:	d505      	bpl.n	8002f4c <__swrite+0x1e>
 8002f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f44:	2302      	movs	r3, #2
 8002f46:	2200      	movs	r2, #0
 8002f48:	f000 fd3c 	bl	80039c4 <_lseek_r>
 8002f4c:	89a3      	ldrh	r3, [r4, #12]
 8002f4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f56:	81a3      	strh	r3, [r4, #12]
 8002f58:	4632      	mov	r2, r6
 8002f5a:	463b      	mov	r3, r7
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f62:	f000 b817 	b.w	8002f94 <_write_r>

08002f66 <__sseek>:
 8002f66:	b510      	push	{r4, lr}
 8002f68:	460c      	mov	r4, r1
 8002f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f6e:	f000 fd29 	bl	80039c4 <_lseek_r>
 8002f72:	1c43      	adds	r3, r0, #1
 8002f74:	89a3      	ldrh	r3, [r4, #12]
 8002f76:	bf15      	itete	ne
 8002f78:	6560      	strne	r0, [r4, #84]	; 0x54
 8002f7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002f7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002f82:	81a3      	strheq	r3, [r4, #12]
 8002f84:	bf18      	it	ne
 8002f86:	81a3      	strhne	r3, [r4, #12]
 8002f88:	bd10      	pop	{r4, pc}

08002f8a <__sclose>:
 8002f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f8e:	f000 bbbf 	b.w	8003710 <_close_r>
 8002f92:	0000      	movs	r0, r0

08002f94 <_write_r>:
 8002f94:	b538      	push	{r3, r4, r5, lr}
 8002f96:	4d07      	ldr	r5, [pc, #28]	; (8002fb4 <_write_r+0x20>)
 8002f98:	4604      	mov	r4, r0
 8002f9a:	4608      	mov	r0, r1
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	602a      	str	r2, [r5, #0]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f000 fe98 	bl	8003cd8 <_write>
 8002fa8:	1c43      	adds	r3, r0, #1
 8002faa:	d102      	bne.n	8002fb2 <_write_r+0x1e>
 8002fac:	682b      	ldr	r3, [r5, #0]
 8002fae:	b103      	cbz	r3, 8002fb2 <_write_r+0x1e>
 8002fb0:	6023      	str	r3, [r4, #0]
 8002fb2:	bd38      	pop	{r3, r4, r5, pc}
 8002fb4:	20000474 	.word	0x20000474

08002fb8 <__errno>:
 8002fb8:	4b01      	ldr	r3, [pc, #4]	; (8002fc0 <__errno+0x8>)
 8002fba:	6818      	ldr	r0, [r3, #0]
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	20000060 	.word	0x20000060

08002fc4 <_fwalk_sglue>:
 8002fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fc8:	4607      	mov	r7, r0
 8002fca:	4688      	mov	r8, r1
 8002fcc:	4614      	mov	r4, r2
 8002fce:	2600      	movs	r6, #0
 8002fd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002fd4:	f1b9 0901 	subs.w	r9, r9, #1
 8002fd8:	d505      	bpl.n	8002fe6 <_fwalk_sglue+0x22>
 8002fda:	6824      	ldr	r4, [r4, #0]
 8002fdc:	2c00      	cmp	r4, #0
 8002fde:	d1f7      	bne.n	8002fd0 <_fwalk_sglue+0xc>
 8002fe0:	4630      	mov	r0, r6
 8002fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fe6:	89ab      	ldrh	r3, [r5, #12]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d907      	bls.n	8002ffc <_fwalk_sglue+0x38>
 8002fec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	d003      	beq.n	8002ffc <_fwalk_sglue+0x38>
 8002ff4:	4629      	mov	r1, r5
 8002ff6:	4638      	mov	r0, r7
 8002ff8:	47c0      	blx	r8
 8002ffa:	4306      	orrs	r6, r0
 8002ffc:	3568      	adds	r5, #104	; 0x68
 8002ffe:	e7e9      	b.n	8002fd4 <_fwalk_sglue+0x10>

08003000 <memcmp>:
 8003000:	b510      	push	{r4, lr}
 8003002:	3901      	subs	r1, #1
 8003004:	4402      	add	r2, r0
 8003006:	4290      	cmp	r0, r2
 8003008:	d101      	bne.n	800300e <memcmp+0xe>
 800300a:	2000      	movs	r0, #0
 800300c:	e005      	b.n	800301a <memcmp+0x1a>
 800300e:	7803      	ldrb	r3, [r0, #0]
 8003010:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003014:	42a3      	cmp	r3, r4
 8003016:	d001      	beq.n	800301c <memcmp+0x1c>
 8003018:	1b18      	subs	r0, r3, r4
 800301a:	bd10      	pop	{r4, pc}
 800301c:	3001      	adds	r0, #1
 800301e:	e7f2      	b.n	8003006 <memcmp+0x6>

08003020 <memset>:
 8003020:	4402      	add	r2, r0
 8003022:	4603      	mov	r3, r0
 8003024:	4293      	cmp	r3, r2
 8003026:	d100      	bne.n	800302a <memset+0xa>
 8003028:	4770      	bx	lr
 800302a:	f803 1b01 	strb.w	r1, [r3], #1
 800302e:	e7f9      	b.n	8003024 <memset+0x4>

08003030 <__retarget_lock_init_recursive>:
 8003030:	4770      	bx	lr

08003032 <__retarget_lock_acquire_recursive>:
 8003032:	4770      	bx	lr

08003034 <__retarget_lock_release_recursive>:
 8003034:	4770      	bx	lr

08003036 <__sfputc_r>:
 8003036:	6893      	ldr	r3, [r2, #8]
 8003038:	3b01      	subs	r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	b410      	push	{r4}
 800303e:	6093      	str	r3, [r2, #8]
 8003040:	da07      	bge.n	8003052 <__sfputc_r+0x1c>
 8003042:	6994      	ldr	r4, [r2, #24]
 8003044:	42a3      	cmp	r3, r4
 8003046:	db01      	blt.n	800304c <__sfputc_r+0x16>
 8003048:	290a      	cmp	r1, #10
 800304a:	d102      	bne.n	8003052 <__sfputc_r+0x1c>
 800304c:	bc10      	pop	{r4}
 800304e:	f000 b931 	b.w	80032b4 <__swbuf_r>
 8003052:	6813      	ldr	r3, [r2, #0]
 8003054:	1c58      	adds	r0, r3, #1
 8003056:	6010      	str	r0, [r2, #0]
 8003058:	7019      	strb	r1, [r3, #0]
 800305a:	4608      	mov	r0, r1
 800305c:	bc10      	pop	{r4}
 800305e:	4770      	bx	lr

08003060 <__sfputs_r>:
 8003060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003062:	4606      	mov	r6, r0
 8003064:	460f      	mov	r7, r1
 8003066:	4614      	mov	r4, r2
 8003068:	18d5      	adds	r5, r2, r3
 800306a:	42ac      	cmp	r4, r5
 800306c:	d101      	bne.n	8003072 <__sfputs_r+0x12>
 800306e:	2000      	movs	r0, #0
 8003070:	e007      	b.n	8003082 <__sfputs_r+0x22>
 8003072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003076:	463a      	mov	r2, r7
 8003078:	4630      	mov	r0, r6
 800307a:	f7ff ffdc 	bl	8003036 <__sfputc_r>
 800307e:	1c43      	adds	r3, r0, #1
 8003080:	d1f3      	bne.n	800306a <__sfputs_r+0xa>
 8003082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003084 <_vfiprintf_r>:
 8003084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003088:	460d      	mov	r5, r1
 800308a:	b09d      	sub	sp, #116	; 0x74
 800308c:	4614      	mov	r4, r2
 800308e:	4698      	mov	r8, r3
 8003090:	4606      	mov	r6, r0
 8003092:	b118      	cbz	r0, 800309c <_vfiprintf_r+0x18>
 8003094:	6a03      	ldr	r3, [r0, #32]
 8003096:	b90b      	cbnz	r3, 800309c <_vfiprintf_r+0x18>
 8003098:	f7ff ff0e 	bl	8002eb8 <__sinit>
 800309c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800309e:	07d9      	lsls	r1, r3, #31
 80030a0:	d405      	bmi.n	80030ae <_vfiprintf_r+0x2a>
 80030a2:	89ab      	ldrh	r3, [r5, #12]
 80030a4:	059a      	lsls	r2, r3, #22
 80030a6:	d402      	bmi.n	80030ae <_vfiprintf_r+0x2a>
 80030a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80030aa:	f7ff ffc2 	bl	8003032 <__retarget_lock_acquire_recursive>
 80030ae:	89ab      	ldrh	r3, [r5, #12]
 80030b0:	071b      	lsls	r3, r3, #28
 80030b2:	d501      	bpl.n	80030b8 <_vfiprintf_r+0x34>
 80030b4:	692b      	ldr	r3, [r5, #16]
 80030b6:	b99b      	cbnz	r3, 80030e0 <_vfiprintf_r+0x5c>
 80030b8:	4629      	mov	r1, r5
 80030ba:	4630      	mov	r0, r6
 80030bc:	f000 f938 	bl	8003330 <__swsetup_r>
 80030c0:	b170      	cbz	r0, 80030e0 <_vfiprintf_r+0x5c>
 80030c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80030c4:	07dc      	lsls	r4, r3, #31
 80030c6:	d504      	bpl.n	80030d2 <_vfiprintf_r+0x4e>
 80030c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030cc:	b01d      	add	sp, #116	; 0x74
 80030ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030d2:	89ab      	ldrh	r3, [r5, #12]
 80030d4:	0598      	lsls	r0, r3, #22
 80030d6:	d4f7      	bmi.n	80030c8 <_vfiprintf_r+0x44>
 80030d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80030da:	f7ff ffab 	bl	8003034 <__retarget_lock_release_recursive>
 80030de:	e7f3      	b.n	80030c8 <_vfiprintf_r+0x44>
 80030e0:	2300      	movs	r3, #0
 80030e2:	9309      	str	r3, [sp, #36]	; 0x24
 80030e4:	2320      	movs	r3, #32
 80030e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80030ee:	2330      	movs	r3, #48	; 0x30
 80030f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80032a0 <_vfiprintf_r+0x21c>
 80030f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030f8:	f04f 0901 	mov.w	r9, #1
 80030fc:	4623      	mov	r3, r4
 80030fe:	469a      	mov	sl, r3
 8003100:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003104:	b10a      	cbz	r2, 800310a <_vfiprintf_r+0x86>
 8003106:	2a25      	cmp	r2, #37	; 0x25
 8003108:	d1f9      	bne.n	80030fe <_vfiprintf_r+0x7a>
 800310a:	ebba 0b04 	subs.w	fp, sl, r4
 800310e:	d00b      	beq.n	8003128 <_vfiprintf_r+0xa4>
 8003110:	465b      	mov	r3, fp
 8003112:	4622      	mov	r2, r4
 8003114:	4629      	mov	r1, r5
 8003116:	4630      	mov	r0, r6
 8003118:	f7ff ffa2 	bl	8003060 <__sfputs_r>
 800311c:	3001      	adds	r0, #1
 800311e:	f000 80a7 	beq.w	8003270 <_vfiprintf_r+0x1ec>
 8003122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003124:	445a      	add	r2, fp
 8003126:	9209      	str	r2, [sp, #36]	; 0x24
 8003128:	f89a 3000 	ldrb.w	r3, [sl]
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 809f 	beq.w	8003270 <_vfiprintf_r+0x1ec>
 8003132:	2300      	movs	r3, #0
 8003134:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003138:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800313c:	f10a 0a01 	add.w	sl, sl, #1
 8003140:	9304      	str	r3, [sp, #16]
 8003142:	9307      	str	r3, [sp, #28]
 8003144:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003148:	931a      	str	r3, [sp, #104]	; 0x68
 800314a:	4654      	mov	r4, sl
 800314c:	2205      	movs	r2, #5
 800314e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003152:	4853      	ldr	r0, [pc, #332]	; (80032a0 <_vfiprintf_r+0x21c>)
 8003154:	f7fd f83c 	bl	80001d0 <memchr>
 8003158:	9a04      	ldr	r2, [sp, #16]
 800315a:	b9d8      	cbnz	r0, 8003194 <_vfiprintf_r+0x110>
 800315c:	06d1      	lsls	r1, r2, #27
 800315e:	bf44      	itt	mi
 8003160:	2320      	movmi	r3, #32
 8003162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003166:	0713      	lsls	r3, r2, #28
 8003168:	bf44      	itt	mi
 800316a:	232b      	movmi	r3, #43	; 0x2b
 800316c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003170:	f89a 3000 	ldrb.w	r3, [sl]
 8003174:	2b2a      	cmp	r3, #42	; 0x2a
 8003176:	d015      	beq.n	80031a4 <_vfiprintf_r+0x120>
 8003178:	9a07      	ldr	r2, [sp, #28]
 800317a:	4654      	mov	r4, sl
 800317c:	2000      	movs	r0, #0
 800317e:	f04f 0c0a 	mov.w	ip, #10
 8003182:	4621      	mov	r1, r4
 8003184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003188:	3b30      	subs	r3, #48	; 0x30
 800318a:	2b09      	cmp	r3, #9
 800318c:	d94b      	bls.n	8003226 <_vfiprintf_r+0x1a2>
 800318e:	b1b0      	cbz	r0, 80031be <_vfiprintf_r+0x13a>
 8003190:	9207      	str	r2, [sp, #28]
 8003192:	e014      	b.n	80031be <_vfiprintf_r+0x13a>
 8003194:	eba0 0308 	sub.w	r3, r0, r8
 8003198:	fa09 f303 	lsl.w	r3, r9, r3
 800319c:	4313      	orrs	r3, r2
 800319e:	9304      	str	r3, [sp, #16]
 80031a0:	46a2      	mov	sl, r4
 80031a2:	e7d2      	b.n	800314a <_vfiprintf_r+0xc6>
 80031a4:	9b03      	ldr	r3, [sp, #12]
 80031a6:	1d19      	adds	r1, r3, #4
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	9103      	str	r1, [sp, #12]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	bfbb      	ittet	lt
 80031b0:	425b      	neglt	r3, r3
 80031b2:	f042 0202 	orrlt.w	r2, r2, #2
 80031b6:	9307      	strge	r3, [sp, #28]
 80031b8:	9307      	strlt	r3, [sp, #28]
 80031ba:	bfb8      	it	lt
 80031bc:	9204      	strlt	r2, [sp, #16]
 80031be:	7823      	ldrb	r3, [r4, #0]
 80031c0:	2b2e      	cmp	r3, #46	; 0x2e
 80031c2:	d10a      	bne.n	80031da <_vfiprintf_r+0x156>
 80031c4:	7863      	ldrb	r3, [r4, #1]
 80031c6:	2b2a      	cmp	r3, #42	; 0x2a
 80031c8:	d132      	bne.n	8003230 <_vfiprintf_r+0x1ac>
 80031ca:	9b03      	ldr	r3, [sp, #12]
 80031cc:	1d1a      	adds	r2, r3, #4
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	9203      	str	r2, [sp, #12]
 80031d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80031d6:	3402      	adds	r4, #2
 80031d8:	9305      	str	r3, [sp, #20]
 80031da:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80032a4 <_vfiprintf_r+0x220>
 80031de:	7821      	ldrb	r1, [r4, #0]
 80031e0:	2203      	movs	r2, #3
 80031e2:	4650      	mov	r0, sl
 80031e4:	f7fc fff4 	bl	80001d0 <memchr>
 80031e8:	b138      	cbz	r0, 80031fa <_vfiprintf_r+0x176>
 80031ea:	9b04      	ldr	r3, [sp, #16]
 80031ec:	eba0 000a 	sub.w	r0, r0, sl
 80031f0:	2240      	movs	r2, #64	; 0x40
 80031f2:	4082      	lsls	r2, r0
 80031f4:	4313      	orrs	r3, r2
 80031f6:	3401      	adds	r4, #1
 80031f8:	9304      	str	r3, [sp, #16]
 80031fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031fe:	482a      	ldr	r0, [pc, #168]	; (80032a8 <_vfiprintf_r+0x224>)
 8003200:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003204:	2206      	movs	r2, #6
 8003206:	f7fc ffe3 	bl	80001d0 <memchr>
 800320a:	2800      	cmp	r0, #0
 800320c:	d03f      	beq.n	800328e <_vfiprintf_r+0x20a>
 800320e:	4b27      	ldr	r3, [pc, #156]	; (80032ac <_vfiprintf_r+0x228>)
 8003210:	bb1b      	cbnz	r3, 800325a <_vfiprintf_r+0x1d6>
 8003212:	9b03      	ldr	r3, [sp, #12]
 8003214:	3307      	adds	r3, #7
 8003216:	f023 0307 	bic.w	r3, r3, #7
 800321a:	3308      	adds	r3, #8
 800321c:	9303      	str	r3, [sp, #12]
 800321e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003220:	443b      	add	r3, r7
 8003222:	9309      	str	r3, [sp, #36]	; 0x24
 8003224:	e76a      	b.n	80030fc <_vfiprintf_r+0x78>
 8003226:	fb0c 3202 	mla	r2, ip, r2, r3
 800322a:	460c      	mov	r4, r1
 800322c:	2001      	movs	r0, #1
 800322e:	e7a8      	b.n	8003182 <_vfiprintf_r+0xfe>
 8003230:	2300      	movs	r3, #0
 8003232:	3401      	adds	r4, #1
 8003234:	9305      	str	r3, [sp, #20]
 8003236:	4619      	mov	r1, r3
 8003238:	f04f 0c0a 	mov.w	ip, #10
 800323c:	4620      	mov	r0, r4
 800323e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003242:	3a30      	subs	r2, #48	; 0x30
 8003244:	2a09      	cmp	r2, #9
 8003246:	d903      	bls.n	8003250 <_vfiprintf_r+0x1cc>
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0c6      	beq.n	80031da <_vfiprintf_r+0x156>
 800324c:	9105      	str	r1, [sp, #20]
 800324e:	e7c4      	b.n	80031da <_vfiprintf_r+0x156>
 8003250:	fb0c 2101 	mla	r1, ip, r1, r2
 8003254:	4604      	mov	r4, r0
 8003256:	2301      	movs	r3, #1
 8003258:	e7f0      	b.n	800323c <_vfiprintf_r+0x1b8>
 800325a:	ab03      	add	r3, sp, #12
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	462a      	mov	r2, r5
 8003260:	4b13      	ldr	r3, [pc, #76]	; (80032b0 <_vfiprintf_r+0x22c>)
 8003262:	a904      	add	r1, sp, #16
 8003264:	4630      	mov	r0, r6
 8003266:	f3af 8000 	nop.w
 800326a:	4607      	mov	r7, r0
 800326c:	1c78      	adds	r0, r7, #1
 800326e:	d1d6      	bne.n	800321e <_vfiprintf_r+0x19a>
 8003270:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003272:	07d9      	lsls	r1, r3, #31
 8003274:	d405      	bmi.n	8003282 <_vfiprintf_r+0x1fe>
 8003276:	89ab      	ldrh	r3, [r5, #12]
 8003278:	059a      	lsls	r2, r3, #22
 800327a:	d402      	bmi.n	8003282 <_vfiprintf_r+0x1fe>
 800327c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800327e:	f7ff fed9 	bl	8003034 <__retarget_lock_release_recursive>
 8003282:	89ab      	ldrh	r3, [r5, #12]
 8003284:	065b      	lsls	r3, r3, #25
 8003286:	f53f af1f 	bmi.w	80030c8 <_vfiprintf_r+0x44>
 800328a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800328c:	e71e      	b.n	80030cc <_vfiprintf_r+0x48>
 800328e:	ab03      	add	r3, sp, #12
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	462a      	mov	r2, r5
 8003294:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <_vfiprintf_r+0x22c>)
 8003296:	a904      	add	r1, sp, #16
 8003298:	4630      	mov	r0, r6
 800329a:	f000 f90d 	bl	80034b8 <_printf_i>
 800329e:	e7e4      	b.n	800326a <_vfiprintf_r+0x1e6>
 80032a0:	080042bd 	.word	0x080042bd
 80032a4:	080042c3 	.word	0x080042c3
 80032a8:	080042c7 	.word	0x080042c7
 80032ac:	00000000 	.word	0x00000000
 80032b0:	08003061 	.word	0x08003061

080032b4 <__swbuf_r>:
 80032b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032b6:	460e      	mov	r6, r1
 80032b8:	4614      	mov	r4, r2
 80032ba:	4605      	mov	r5, r0
 80032bc:	b118      	cbz	r0, 80032c6 <__swbuf_r+0x12>
 80032be:	6a03      	ldr	r3, [r0, #32]
 80032c0:	b90b      	cbnz	r3, 80032c6 <__swbuf_r+0x12>
 80032c2:	f7ff fdf9 	bl	8002eb8 <__sinit>
 80032c6:	69a3      	ldr	r3, [r4, #24]
 80032c8:	60a3      	str	r3, [r4, #8]
 80032ca:	89a3      	ldrh	r3, [r4, #12]
 80032cc:	071a      	lsls	r2, r3, #28
 80032ce:	d501      	bpl.n	80032d4 <__swbuf_r+0x20>
 80032d0:	6923      	ldr	r3, [r4, #16]
 80032d2:	b943      	cbnz	r3, 80032e6 <__swbuf_r+0x32>
 80032d4:	4621      	mov	r1, r4
 80032d6:	4628      	mov	r0, r5
 80032d8:	f000 f82a 	bl	8003330 <__swsetup_r>
 80032dc:	b118      	cbz	r0, 80032e6 <__swbuf_r+0x32>
 80032de:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80032e2:	4638      	mov	r0, r7
 80032e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032e6:	6823      	ldr	r3, [r4, #0]
 80032e8:	6922      	ldr	r2, [r4, #16]
 80032ea:	1a98      	subs	r0, r3, r2
 80032ec:	6963      	ldr	r3, [r4, #20]
 80032ee:	b2f6      	uxtb	r6, r6
 80032f0:	4283      	cmp	r3, r0
 80032f2:	4637      	mov	r7, r6
 80032f4:	dc05      	bgt.n	8003302 <__swbuf_r+0x4e>
 80032f6:	4621      	mov	r1, r4
 80032f8:	4628      	mov	r0, r5
 80032fa:	f000 fa99 	bl	8003830 <_fflush_r>
 80032fe:	2800      	cmp	r0, #0
 8003300:	d1ed      	bne.n	80032de <__swbuf_r+0x2a>
 8003302:	68a3      	ldr	r3, [r4, #8]
 8003304:	3b01      	subs	r3, #1
 8003306:	60a3      	str	r3, [r4, #8]
 8003308:	6823      	ldr	r3, [r4, #0]
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	6022      	str	r2, [r4, #0]
 800330e:	701e      	strb	r6, [r3, #0]
 8003310:	6962      	ldr	r2, [r4, #20]
 8003312:	1c43      	adds	r3, r0, #1
 8003314:	429a      	cmp	r2, r3
 8003316:	d004      	beq.n	8003322 <__swbuf_r+0x6e>
 8003318:	89a3      	ldrh	r3, [r4, #12]
 800331a:	07db      	lsls	r3, r3, #31
 800331c:	d5e1      	bpl.n	80032e2 <__swbuf_r+0x2e>
 800331e:	2e0a      	cmp	r6, #10
 8003320:	d1df      	bne.n	80032e2 <__swbuf_r+0x2e>
 8003322:	4621      	mov	r1, r4
 8003324:	4628      	mov	r0, r5
 8003326:	f000 fa83 	bl	8003830 <_fflush_r>
 800332a:	2800      	cmp	r0, #0
 800332c:	d0d9      	beq.n	80032e2 <__swbuf_r+0x2e>
 800332e:	e7d6      	b.n	80032de <__swbuf_r+0x2a>

08003330 <__swsetup_r>:
 8003330:	b538      	push	{r3, r4, r5, lr}
 8003332:	4b29      	ldr	r3, [pc, #164]	; (80033d8 <__swsetup_r+0xa8>)
 8003334:	4605      	mov	r5, r0
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	460c      	mov	r4, r1
 800333a:	b118      	cbz	r0, 8003344 <__swsetup_r+0x14>
 800333c:	6a03      	ldr	r3, [r0, #32]
 800333e:	b90b      	cbnz	r3, 8003344 <__swsetup_r+0x14>
 8003340:	f7ff fdba 	bl	8002eb8 <__sinit>
 8003344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003348:	0719      	lsls	r1, r3, #28
 800334a:	d422      	bmi.n	8003392 <__swsetup_r+0x62>
 800334c:	06da      	lsls	r2, r3, #27
 800334e:	d407      	bmi.n	8003360 <__swsetup_r+0x30>
 8003350:	2209      	movs	r2, #9
 8003352:	602a      	str	r2, [r5, #0]
 8003354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003358:	81a3      	strh	r3, [r4, #12]
 800335a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800335e:	e033      	b.n	80033c8 <__swsetup_r+0x98>
 8003360:	0758      	lsls	r0, r3, #29
 8003362:	d512      	bpl.n	800338a <__swsetup_r+0x5a>
 8003364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003366:	b141      	cbz	r1, 800337a <__swsetup_r+0x4a>
 8003368:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800336c:	4299      	cmp	r1, r3
 800336e:	d002      	beq.n	8003376 <__swsetup_r+0x46>
 8003370:	4628      	mov	r0, r5
 8003372:	f000 fb67 	bl	8003a44 <_free_r>
 8003376:	2300      	movs	r3, #0
 8003378:	6363      	str	r3, [r4, #52]	; 0x34
 800337a:	89a3      	ldrh	r3, [r4, #12]
 800337c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003380:	81a3      	strh	r3, [r4, #12]
 8003382:	2300      	movs	r3, #0
 8003384:	6063      	str	r3, [r4, #4]
 8003386:	6923      	ldr	r3, [r4, #16]
 8003388:	6023      	str	r3, [r4, #0]
 800338a:	89a3      	ldrh	r3, [r4, #12]
 800338c:	f043 0308 	orr.w	r3, r3, #8
 8003390:	81a3      	strh	r3, [r4, #12]
 8003392:	6923      	ldr	r3, [r4, #16]
 8003394:	b94b      	cbnz	r3, 80033aa <__swsetup_r+0x7a>
 8003396:	89a3      	ldrh	r3, [r4, #12]
 8003398:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800339c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033a0:	d003      	beq.n	80033aa <__swsetup_r+0x7a>
 80033a2:	4621      	mov	r1, r4
 80033a4:	4628      	mov	r0, r5
 80033a6:	f000 fbbd 	bl	8003b24 <__smakebuf_r>
 80033aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033ae:	f013 0201 	ands.w	r2, r3, #1
 80033b2:	d00a      	beq.n	80033ca <__swsetup_r+0x9a>
 80033b4:	2200      	movs	r2, #0
 80033b6:	60a2      	str	r2, [r4, #8]
 80033b8:	6962      	ldr	r2, [r4, #20]
 80033ba:	4252      	negs	r2, r2
 80033bc:	61a2      	str	r2, [r4, #24]
 80033be:	6922      	ldr	r2, [r4, #16]
 80033c0:	b942      	cbnz	r2, 80033d4 <__swsetup_r+0xa4>
 80033c2:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80033c6:	d1c5      	bne.n	8003354 <__swsetup_r+0x24>
 80033c8:	bd38      	pop	{r3, r4, r5, pc}
 80033ca:	0799      	lsls	r1, r3, #30
 80033cc:	bf58      	it	pl
 80033ce:	6962      	ldrpl	r2, [r4, #20]
 80033d0:	60a2      	str	r2, [r4, #8]
 80033d2:	e7f4      	b.n	80033be <__swsetup_r+0x8e>
 80033d4:	2000      	movs	r0, #0
 80033d6:	e7f7      	b.n	80033c8 <__swsetup_r+0x98>
 80033d8:	20000060 	.word	0x20000060

080033dc <_printf_common>:
 80033dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033e0:	4616      	mov	r6, r2
 80033e2:	4698      	mov	r8, r3
 80033e4:	688a      	ldr	r2, [r1, #8]
 80033e6:	690b      	ldr	r3, [r1, #16]
 80033e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80033ec:	4293      	cmp	r3, r2
 80033ee:	bfb8      	it	lt
 80033f0:	4613      	movlt	r3, r2
 80033f2:	6033      	str	r3, [r6, #0]
 80033f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033f8:	4607      	mov	r7, r0
 80033fa:	460c      	mov	r4, r1
 80033fc:	b10a      	cbz	r2, 8003402 <_printf_common+0x26>
 80033fe:	3301      	adds	r3, #1
 8003400:	6033      	str	r3, [r6, #0]
 8003402:	6823      	ldr	r3, [r4, #0]
 8003404:	0699      	lsls	r1, r3, #26
 8003406:	bf42      	ittt	mi
 8003408:	6833      	ldrmi	r3, [r6, #0]
 800340a:	3302      	addmi	r3, #2
 800340c:	6033      	strmi	r3, [r6, #0]
 800340e:	6825      	ldr	r5, [r4, #0]
 8003410:	f015 0506 	ands.w	r5, r5, #6
 8003414:	d106      	bne.n	8003424 <_printf_common+0x48>
 8003416:	f104 0a19 	add.w	sl, r4, #25
 800341a:	68e3      	ldr	r3, [r4, #12]
 800341c:	6832      	ldr	r2, [r6, #0]
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	42ab      	cmp	r3, r5
 8003422:	dc26      	bgt.n	8003472 <_printf_common+0x96>
 8003424:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003428:	6822      	ldr	r2, [r4, #0]
 800342a:	3b00      	subs	r3, #0
 800342c:	bf18      	it	ne
 800342e:	2301      	movne	r3, #1
 8003430:	0692      	lsls	r2, r2, #26
 8003432:	d42b      	bmi.n	800348c <_printf_common+0xb0>
 8003434:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003438:	4641      	mov	r1, r8
 800343a:	4638      	mov	r0, r7
 800343c:	47c8      	blx	r9
 800343e:	3001      	adds	r0, #1
 8003440:	d01e      	beq.n	8003480 <_printf_common+0xa4>
 8003442:	6823      	ldr	r3, [r4, #0]
 8003444:	6922      	ldr	r2, [r4, #16]
 8003446:	f003 0306 	and.w	r3, r3, #6
 800344a:	2b04      	cmp	r3, #4
 800344c:	bf02      	ittt	eq
 800344e:	68e5      	ldreq	r5, [r4, #12]
 8003450:	6833      	ldreq	r3, [r6, #0]
 8003452:	1aed      	subeq	r5, r5, r3
 8003454:	68a3      	ldr	r3, [r4, #8]
 8003456:	bf0c      	ite	eq
 8003458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800345c:	2500      	movne	r5, #0
 800345e:	4293      	cmp	r3, r2
 8003460:	bfc4      	itt	gt
 8003462:	1a9b      	subgt	r3, r3, r2
 8003464:	18ed      	addgt	r5, r5, r3
 8003466:	2600      	movs	r6, #0
 8003468:	341a      	adds	r4, #26
 800346a:	42b5      	cmp	r5, r6
 800346c:	d11a      	bne.n	80034a4 <_printf_common+0xc8>
 800346e:	2000      	movs	r0, #0
 8003470:	e008      	b.n	8003484 <_printf_common+0xa8>
 8003472:	2301      	movs	r3, #1
 8003474:	4652      	mov	r2, sl
 8003476:	4641      	mov	r1, r8
 8003478:	4638      	mov	r0, r7
 800347a:	47c8      	blx	r9
 800347c:	3001      	adds	r0, #1
 800347e:	d103      	bne.n	8003488 <_printf_common+0xac>
 8003480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003488:	3501      	adds	r5, #1
 800348a:	e7c6      	b.n	800341a <_printf_common+0x3e>
 800348c:	18e1      	adds	r1, r4, r3
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	2030      	movs	r0, #48	; 0x30
 8003492:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003496:	4422      	add	r2, r4
 8003498:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800349c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034a0:	3302      	adds	r3, #2
 80034a2:	e7c7      	b.n	8003434 <_printf_common+0x58>
 80034a4:	2301      	movs	r3, #1
 80034a6:	4622      	mov	r2, r4
 80034a8:	4641      	mov	r1, r8
 80034aa:	4638      	mov	r0, r7
 80034ac:	47c8      	blx	r9
 80034ae:	3001      	adds	r0, #1
 80034b0:	d0e6      	beq.n	8003480 <_printf_common+0xa4>
 80034b2:	3601      	adds	r6, #1
 80034b4:	e7d9      	b.n	800346a <_printf_common+0x8e>
 80034b6:	0000      	movs	r0, r0

080034b8 <_printf_i>:
 80034b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034bc:	7e0f      	ldrb	r7, [r1, #24]
 80034be:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80034c0:	2f78      	cmp	r7, #120	; 0x78
 80034c2:	4691      	mov	r9, r2
 80034c4:	4680      	mov	r8, r0
 80034c6:	460c      	mov	r4, r1
 80034c8:	469a      	mov	sl, r3
 80034ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80034ce:	d807      	bhi.n	80034e0 <_printf_i+0x28>
 80034d0:	2f62      	cmp	r7, #98	; 0x62
 80034d2:	d80a      	bhi.n	80034ea <_printf_i+0x32>
 80034d4:	2f00      	cmp	r7, #0
 80034d6:	f000 80dd 	beq.w	8003694 <_printf_i+0x1dc>
 80034da:	2f58      	cmp	r7, #88	; 0x58
 80034dc:	f000 80c3 	beq.w	8003666 <_printf_i+0x1ae>
 80034e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80034e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80034e8:	e03a      	b.n	8003560 <_printf_i+0xa8>
 80034ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80034ee:	2b15      	cmp	r3, #21
 80034f0:	d8f6      	bhi.n	80034e0 <_printf_i+0x28>
 80034f2:	a101      	add	r1, pc, #4	; (adr r1, 80034f8 <_printf_i+0x40>)
 80034f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034f8:	08003551 	.word	0x08003551
 80034fc:	08003565 	.word	0x08003565
 8003500:	080034e1 	.word	0x080034e1
 8003504:	080034e1 	.word	0x080034e1
 8003508:	080034e1 	.word	0x080034e1
 800350c:	080034e1 	.word	0x080034e1
 8003510:	08003565 	.word	0x08003565
 8003514:	080034e1 	.word	0x080034e1
 8003518:	080034e1 	.word	0x080034e1
 800351c:	080034e1 	.word	0x080034e1
 8003520:	080034e1 	.word	0x080034e1
 8003524:	0800367b 	.word	0x0800367b
 8003528:	080035f3 	.word	0x080035f3
 800352c:	08003633 	.word	0x08003633
 8003530:	080034e1 	.word	0x080034e1
 8003534:	080034e1 	.word	0x080034e1
 8003538:	0800369d 	.word	0x0800369d
 800353c:	080034e1 	.word	0x080034e1
 8003540:	080035f3 	.word	0x080035f3
 8003544:	080034e1 	.word	0x080034e1
 8003548:	080034e1 	.word	0x080034e1
 800354c:	0800363b 	.word	0x0800363b
 8003550:	6833      	ldr	r3, [r6, #0]
 8003552:	1d1a      	adds	r2, r3, #4
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6032      	str	r2, [r6, #0]
 8003558:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800355c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003560:	2301      	movs	r3, #1
 8003562:	e0a8      	b.n	80036b6 <_printf_i+0x1fe>
 8003564:	6831      	ldr	r1, [r6, #0]
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	1d08      	adds	r0, r1, #4
 800356a:	6030      	str	r0, [r6, #0]
 800356c:	061e      	lsls	r6, r3, #24
 800356e:	d501      	bpl.n	8003574 <_printf_i+0xbc>
 8003570:	680d      	ldr	r5, [r1, #0]
 8003572:	e003      	b.n	800357c <_printf_i+0xc4>
 8003574:	065d      	lsls	r5, r3, #25
 8003576:	d5fb      	bpl.n	8003570 <_printf_i+0xb8>
 8003578:	f9b1 5000 	ldrsh.w	r5, [r1]
 800357c:	6861      	ldr	r1, [r4, #4]
 800357e:	2d00      	cmp	r5, #0
 8003580:	da78      	bge.n	8003674 <_printf_i+0x1bc>
 8003582:	202d      	movs	r0, #45	; 0x2d
 8003584:	2900      	cmp	r1, #0
 8003586:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800358a:	60a1      	str	r1, [r4, #8]
 800358c:	da2d      	bge.n	80035ea <_printf_i+0x132>
 800358e:	485e      	ldr	r0, [pc, #376]	; (8003708 <_printf_i+0x250>)
 8003590:	426d      	negs	r5, r5
 8003592:	230a      	movs	r3, #10
 8003594:	4616      	mov	r6, r2
 8003596:	fbb5 f1f3 	udiv	r1, r5, r3
 800359a:	fb03 5711 	mls	r7, r3, r1, r5
 800359e:	5dc7      	ldrb	r7, [r0, r7]
 80035a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80035a4:	462f      	mov	r7, r5
 80035a6:	42bb      	cmp	r3, r7
 80035a8:	460d      	mov	r5, r1
 80035aa:	d9f4      	bls.n	8003596 <_printf_i+0xde>
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d10b      	bne.n	80035c8 <_printf_i+0x110>
 80035b0:	6823      	ldr	r3, [r4, #0]
 80035b2:	07df      	lsls	r7, r3, #31
 80035b4:	d508      	bpl.n	80035c8 <_printf_i+0x110>
 80035b6:	6923      	ldr	r3, [r4, #16]
 80035b8:	6861      	ldr	r1, [r4, #4]
 80035ba:	4299      	cmp	r1, r3
 80035bc:	bfde      	ittt	le
 80035be:	2330      	movle	r3, #48	; 0x30
 80035c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80035c4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80035c8:	1b92      	subs	r2, r2, r6
 80035ca:	6122      	str	r2, [r4, #16]
 80035cc:	f8cd a000 	str.w	sl, [sp]
 80035d0:	464b      	mov	r3, r9
 80035d2:	aa03      	add	r2, sp, #12
 80035d4:	4621      	mov	r1, r4
 80035d6:	4640      	mov	r0, r8
 80035d8:	f7ff ff00 	bl	80033dc <_printf_common>
 80035dc:	3001      	adds	r0, #1
 80035de:	d16f      	bne.n	80036c0 <_printf_i+0x208>
 80035e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035e4:	b004      	add	sp, #16
 80035e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ea:	f023 0304 	bic.w	r3, r3, #4
 80035ee:	6023      	str	r3, [r4, #0]
 80035f0:	e7cd      	b.n	800358e <_printf_i+0xd6>
 80035f2:	6821      	ldr	r1, [r4, #0]
 80035f4:	6833      	ldr	r3, [r6, #0]
 80035f6:	0608      	lsls	r0, r1, #24
 80035f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80035fc:	d402      	bmi.n	8003604 <_printf_i+0x14c>
 80035fe:	0649      	lsls	r1, r1, #25
 8003600:	bf48      	it	mi
 8003602:	b2ad      	uxthmi	r5, r5
 8003604:	2f6f      	cmp	r7, #111	; 0x6f
 8003606:	4840      	ldr	r0, [pc, #256]	; (8003708 <_printf_i+0x250>)
 8003608:	6033      	str	r3, [r6, #0]
 800360a:	bf14      	ite	ne
 800360c:	230a      	movne	r3, #10
 800360e:	2308      	moveq	r3, #8
 8003610:	2100      	movs	r1, #0
 8003612:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003616:	6866      	ldr	r6, [r4, #4]
 8003618:	60a6      	str	r6, [r4, #8]
 800361a:	2e00      	cmp	r6, #0
 800361c:	dbba      	blt.n	8003594 <_printf_i+0xdc>
 800361e:	6821      	ldr	r1, [r4, #0]
 8003620:	f021 0104 	bic.w	r1, r1, #4
 8003624:	6021      	str	r1, [r4, #0]
 8003626:	2d00      	cmp	r5, #0
 8003628:	d1b4      	bne.n	8003594 <_printf_i+0xdc>
 800362a:	2e00      	cmp	r6, #0
 800362c:	d1b2      	bne.n	8003594 <_printf_i+0xdc>
 800362e:	4616      	mov	r6, r2
 8003630:	e7bc      	b.n	80035ac <_printf_i+0xf4>
 8003632:	6823      	ldr	r3, [r4, #0]
 8003634:	f043 0320 	orr.w	r3, r3, #32
 8003638:	6023      	str	r3, [r4, #0]
 800363a:	4834      	ldr	r0, [pc, #208]	; (800370c <_printf_i+0x254>)
 800363c:	2778      	movs	r7, #120	; 0x78
 800363e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003642:	6823      	ldr	r3, [r4, #0]
 8003644:	6831      	ldr	r1, [r6, #0]
 8003646:	061f      	lsls	r7, r3, #24
 8003648:	f851 5b04 	ldr.w	r5, [r1], #4
 800364c:	d402      	bmi.n	8003654 <_printf_i+0x19c>
 800364e:	065f      	lsls	r7, r3, #25
 8003650:	bf48      	it	mi
 8003652:	b2ad      	uxthmi	r5, r5
 8003654:	6031      	str	r1, [r6, #0]
 8003656:	07d9      	lsls	r1, r3, #31
 8003658:	bf44      	itt	mi
 800365a:	f043 0320 	orrmi.w	r3, r3, #32
 800365e:	6023      	strmi	r3, [r4, #0]
 8003660:	b11d      	cbz	r5, 800366a <_printf_i+0x1b2>
 8003662:	2310      	movs	r3, #16
 8003664:	e7d4      	b.n	8003610 <_printf_i+0x158>
 8003666:	4828      	ldr	r0, [pc, #160]	; (8003708 <_printf_i+0x250>)
 8003668:	e7e9      	b.n	800363e <_printf_i+0x186>
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	f023 0320 	bic.w	r3, r3, #32
 8003670:	6023      	str	r3, [r4, #0]
 8003672:	e7f6      	b.n	8003662 <_printf_i+0x1aa>
 8003674:	4824      	ldr	r0, [pc, #144]	; (8003708 <_printf_i+0x250>)
 8003676:	230a      	movs	r3, #10
 8003678:	e7cd      	b.n	8003616 <_printf_i+0x15e>
 800367a:	6833      	ldr	r3, [r6, #0]
 800367c:	6825      	ldr	r5, [r4, #0]
 800367e:	6961      	ldr	r1, [r4, #20]
 8003680:	1d18      	adds	r0, r3, #4
 8003682:	6030      	str	r0, [r6, #0]
 8003684:	062e      	lsls	r6, r5, #24
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	d501      	bpl.n	800368e <_printf_i+0x1d6>
 800368a:	6019      	str	r1, [r3, #0]
 800368c:	e002      	b.n	8003694 <_printf_i+0x1dc>
 800368e:	0668      	lsls	r0, r5, #25
 8003690:	d5fb      	bpl.n	800368a <_printf_i+0x1d2>
 8003692:	8019      	strh	r1, [r3, #0]
 8003694:	2300      	movs	r3, #0
 8003696:	6123      	str	r3, [r4, #16]
 8003698:	4616      	mov	r6, r2
 800369a:	e797      	b.n	80035cc <_printf_i+0x114>
 800369c:	6833      	ldr	r3, [r6, #0]
 800369e:	1d1a      	adds	r2, r3, #4
 80036a0:	6032      	str	r2, [r6, #0]
 80036a2:	681e      	ldr	r6, [r3, #0]
 80036a4:	6862      	ldr	r2, [r4, #4]
 80036a6:	2100      	movs	r1, #0
 80036a8:	4630      	mov	r0, r6
 80036aa:	f7fc fd91 	bl	80001d0 <memchr>
 80036ae:	b108      	cbz	r0, 80036b4 <_printf_i+0x1fc>
 80036b0:	1b80      	subs	r0, r0, r6
 80036b2:	6060      	str	r0, [r4, #4]
 80036b4:	6863      	ldr	r3, [r4, #4]
 80036b6:	6123      	str	r3, [r4, #16]
 80036b8:	2300      	movs	r3, #0
 80036ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036be:	e785      	b.n	80035cc <_printf_i+0x114>
 80036c0:	6923      	ldr	r3, [r4, #16]
 80036c2:	4632      	mov	r2, r6
 80036c4:	4649      	mov	r1, r9
 80036c6:	4640      	mov	r0, r8
 80036c8:	47d0      	blx	sl
 80036ca:	3001      	adds	r0, #1
 80036cc:	d088      	beq.n	80035e0 <_printf_i+0x128>
 80036ce:	6823      	ldr	r3, [r4, #0]
 80036d0:	079b      	lsls	r3, r3, #30
 80036d2:	d414      	bmi.n	80036fe <_printf_i+0x246>
 80036d4:	68e0      	ldr	r0, [r4, #12]
 80036d6:	9b03      	ldr	r3, [sp, #12]
 80036d8:	4298      	cmp	r0, r3
 80036da:	bfb8      	it	lt
 80036dc:	4618      	movlt	r0, r3
 80036de:	e781      	b.n	80035e4 <_printf_i+0x12c>
 80036e0:	2301      	movs	r3, #1
 80036e2:	4632      	mov	r2, r6
 80036e4:	4649      	mov	r1, r9
 80036e6:	4640      	mov	r0, r8
 80036e8:	47d0      	blx	sl
 80036ea:	3001      	adds	r0, #1
 80036ec:	f43f af78 	beq.w	80035e0 <_printf_i+0x128>
 80036f0:	3501      	adds	r5, #1
 80036f2:	68e3      	ldr	r3, [r4, #12]
 80036f4:	9903      	ldr	r1, [sp, #12]
 80036f6:	1a5b      	subs	r3, r3, r1
 80036f8:	42ab      	cmp	r3, r5
 80036fa:	dcf1      	bgt.n	80036e0 <_printf_i+0x228>
 80036fc:	e7ea      	b.n	80036d4 <_printf_i+0x21c>
 80036fe:	2500      	movs	r5, #0
 8003700:	f104 0619 	add.w	r6, r4, #25
 8003704:	e7f5      	b.n	80036f2 <_printf_i+0x23a>
 8003706:	bf00      	nop
 8003708:	080042ce 	.word	0x080042ce
 800370c:	080042df 	.word	0x080042df

08003710 <_close_r>:
 8003710:	b538      	push	{r3, r4, r5, lr}
 8003712:	4d06      	ldr	r5, [pc, #24]	; (800372c <_close_r+0x1c>)
 8003714:	2300      	movs	r3, #0
 8003716:	4604      	mov	r4, r0
 8003718:	4608      	mov	r0, r1
 800371a:	602b      	str	r3, [r5, #0]
 800371c:	f000 faa4 	bl	8003c68 <_close>
 8003720:	1c43      	adds	r3, r0, #1
 8003722:	d102      	bne.n	800372a <_close_r+0x1a>
 8003724:	682b      	ldr	r3, [r5, #0]
 8003726:	b103      	cbz	r3, 800372a <_close_r+0x1a>
 8003728:	6023      	str	r3, [r4, #0]
 800372a:	bd38      	pop	{r3, r4, r5, pc}
 800372c:	20000474 	.word	0x20000474

08003730 <__sflush_r>:
 8003730:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003736:	0717      	lsls	r7, r2, #28
 8003738:	4605      	mov	r5, r0
 800373a:	460c      	mov	r4, r1
 800373c:	d456      	bmi.n	80037ec <__sflush_r+0xbc>
 800373e:	684b      	ldr	r3, [r1, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	dc02      	bgt.n	800374a <__sflush_r+0x1a>
 8003744:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	dd3d      	ble.n	80037c6 <__sflush_r+0x96>
 800374a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800374c:	2e00      	cmp	r6, #0
 800374e:	d03a      	beq.n	80037c6 <__sflush_r+0x96>
 8003750:	2300      	movs	r3, #0
 8003752:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003756:	682f      	ldr	r7, [r5, #0]
 8003758:	6a21      	ldr	r1, [r4, #32]
 800375a:	602b      	str	r3, [r5, #0]
 800375c:	d025      	beq.n	80037aa <__sflush_r+0x7a>
 800375e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003760:	89a3      	ldrh	r3, [r4, #12]
 8003762:	0758      	lsls	r0, r3, #29
 8003764:	d505      	bpl.n	8003772 <__sflush_r+0x42>
 8003766:	6863      	ldr	r3, [r4, #4]
 8003768:	1ad2      	subs	r2, r2, r3
 800376a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800376c:	b10b      	cbz	r3, 8003772 <__sflush_r+0x42>
 800376e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003770:	1ad2      	subs	r2, r2, r3
 8003772:	6a21      	ldr	r1, [r4, #32]
 8003774:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003776:	2300      	movs	r3, #0
 8003778:	4628      	mov	r0, r5
 800377a:	47b0      	blx	r6
 800377c:	1c41      	adds	r1, r0, #1
 800377e:	d024      	beq.n	80037ca <__sflush_r+0x9a>
 8003780:	2300      	movs	r3, #0
 8003782:	6063      	str	r3, [r4, #4]
 8003784:	6923      	ldr	r3, [r4, #16]
 8003786:	6023      	str	r3, [r4, #0]
 8003788:	89a3      	ldrh	r3, [r4, #12]
 800378a:	04da      	lsls	r2, r3, #19
 800378c:	d500      	bpl.n	8003790 <__sflush_r+0x60>
 800378e:	6560      	str	r0, [r4, #84]	; 0x54
 8003790:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003792:	602f      	str	r7, [r5, #0]
 8003794:	b1b9      	cbz	r1, 80037c6 <__sflush_r+0x96>
 8003796:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800379a:	4299      	cmp	r1, r3
 800379c:	d002      	beq.n	80037a4 <__sflush_r+0x74>
 800379e:	4628      	mov	r0, r5
 80037a0:	f000 f950 	bl	8003a44 <_free_r>
 80037a4:	2300      	movs	r3, #0
 80037a6:	6363      	str	r3, [r4, #52]	; 0x34
 80037a8:	e00d      	b.n	80037c6 <__sflush_r+0x96>
 80037aa:	2301      	movs	r3, #1
 80037ac:	4628      	mov	r0, r5
 80037ae:	47b0      	blx	r6
 80037b0:	1c46      	adds	r6, r0, #1
 80037b2:	4602      	mov	r2, r0
 80037b4:	d1d4      	bne.n	8003760 <__sflush_r+0x30>
 80037b6:	682b      	ldr	r3, [r5, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0d1      	beq.n	8003760 <__sflush_r+0x30>
 80037bc:	2b1d      	cmp	r3, #29
 80037be:	d001      	beq.n	80037c4 <__sflush_r+0x94>
 80037c0:	2b16      	cmp	r3, #22
 80037c2:	d12a      	bne.n	800381a <__sflush_r+0xea>
 80037c4:	602f      	str	r7, [r5, #0]
 80037c6:	2000      	movs	r0, #0
 80037c8:	e02e      	b.n	8003828 <__sflush_r+0xf8>
 80037ca:	682a      	ldr	r2, [r5, #0]
 80037cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037d0:	b142      	cbz	r2, 80037e4 <__sflush_r+0xb4>
 80037d2:	2a1d      	cmp	r2, #29
 80037d4:	d001      	beq.n	80037da <__sflush_r+0xaa>
 80037d6:	2a16      	cmp	r2, #22
 80037d8:	d121      	bne.n	800381e <__sflush_r+0xee>
 80037da:	2300      	movs	r3, #0
 80037dc:	6063      	str	r3, [r4, #4]
 80037de:	6923      	ldr	r3, [r4, #16]
 80037e0:	6023      	str	r3, [r4, #0]
 80037e2:	e7d5      	b.n	8003790 <__sflush_r+0x60>
 80037e4:	6062      	str	r2, [r4, #4]
 80037e6:	6922      	ldr	r2, [r4, #16]
 80037e8:	6022      	str	r2, [r4, #0]
 80037ea:	e7ce      	b.n	800378a <__sflush_r+0x5a>
 80037ec:	690f      	ldr	r7, [r1, #16]
 80037ee:	2f00      	cmp	r7, #0
 80037f0:	d0e9      	beq.n	80037c6 <__sflush_r+0x96>
 80037f2:	0793      	lsls	r3, r2, #30
 80037f4:	680e      	ldr	r6, [r1, #0]
 80037f6:	bf08      	it	eq
 80037f8:	694b      	ldreq	r3, [r1, #20]
 80037fa:	600f      	str	r7, [r1, #0]
 80037fc:	bf18      	it	ne
 80037fe:	2300      	movne	r3, #0
 8003800:	1bf6      	subs	r6, r6, r7
 8003802:	608b      	str	r3, [r1, #8]
 8003804:	2e00      	cmp	r6, #0
 8003806:	ddde      	ble.n	80037c6 <__sflush_r+0x96>
 8003808:	6a21      	ldr	r1, [r4, #32]
 800380a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800380e:	4633      	mov	r3, r6
 8003810:	463a      	mov	r2, r7
 8003812:	4628      	mov	r0, r5
 8003814:	47e0      	blx	ip
 8003816:	2800      	cmp	r0, #0
 8003818:	dc07      	bgt.n	800382a <__sflush_r+0xfa>
 800381a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800381e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003822:	81a3      	strh	r3, [r4, #12]
 8003824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800382a:	4407      	add	r7, r0
 800382c:	1a36      	subs	r6, r6, r0
 800382e:	e7e9      	b.n	8003804 <__sflush_r+0xd4>

08003830 <_fflush_r>:
 8003830:	b538      	push	{r3, r4, r5, lr}
 8003832:	690b      	ldr	r3, [r1, #16]
 8003834:	4605      	mov	r5, r0
 8003836:	460c      	mov	r4, r1
 8003838:	b913      	cbnz	r3, 8003840 <_fflush_r+0x10>
 800383a:	2500      	movs	r5, #0
 800383c:	4628      	mov	r0, r5
 800383e:	bd38      	pop	{r3, r4, r5, pc}
 8003840:	b118      	cbz	r0, 800384a <_fflush_r+0x1a>
 8003842:	6a03      	ldr	r3, [r0, #32]
 8003844:	b90b      	cbnz	r3, 800384a <_fflush_r+0x1a>
 8003846:	f7ff fb37 	bl	8002eb8 <__sinit>
 800384a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0f3      	beq.n	800383a <_fflush_r+0xa>
 8003852:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003854:	07d0      	lsls	r0, r2, #31
 8003856:	d404      	bmi.n	8003862 <_fflush_r+0x32>
 8003858:	0599      	lsls	r1, r3, #22
 800385a:	d402      	bmi.n	8003862 <_fflush_r+0x32>
 800385c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800385e:	f7ff fbe8 	bl	8003032 <__retarget_lock_acquire_recursive>
 8003862:	4628      	mov	r0, r5
 8003864:	4621      	mov	r1, r4
 8003866:	f7ff ff63 	bl	8003730 <__sflush_r>
 800386a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800386c:	07da      	lsls	r2, r3, #31
 800386e:	4605      	mov	r5, r0
 8003870:	d4e4      	bmi.n	800383c <_fflush_r+0xc>
 8003872:	89a3      	ldrh	r3, [r4, #12]
 8003874:	059b      	lsls	r3, r3, #22
 8003876:	d4e1      	bmi.n	800383c <_fflush_r+0xc>
 8003878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800387a:	f7ff fbdb 	bl	8003034 <__retarget_lock_release_recursive>
 800387e:	e7dd      	b.n	800383c <_fflush_r+0xc>

08003880 <sbrk_aligned>:
 8003880:	b570      	push	{r4, r5, r6, lr}
 8003882:	4e0f      	ldr	r6, [pc, #60]	; (80038c0 <sbrk_aligned+0x40>)
 8003884:	460c      	mov	r4, r1
 8003886:	6831      	ldr	r1, [r6, #0]
 8003888:	4605      	mov	r5, r0
 800388a:	b911      	cbnz	r1, 8003892 <sbrk_aligned+0x12>
 800388c:	f000 f8ca 	bl	8003a24 <_sbrk_r>
 8003890:	6030      	str	r0, [r6, #0]
 8003892:	4621      	mov	r1, r4
 8003894:	4628      	mov	r0, r5
 8003896:	f000 f8c5 	bl	8003a24 <_sbrk_r>
 800389a:	1c43      	adds	r3, r0, #1
 800389c:	d103      	bne.n	80038a6 <sbrk_aligned+0x26>
 800389e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80038a2:	4620      	mov	r0, r4
 80038a4:	bd70      	pop	{r4, r5, r6, pc}
 80038a6:	1cc4      	adds	r4, r0, #3
 80038a8:	f024 0403 	bic.w	r4, r4, #3
 80038ac:	42a0      	cmp	r0, r4
 80038ae:	d0f8      	beq.n	80038a2 <sbrk_aligned+0x22>
 80038b0:	1a21      	subs	r1, r4, r0
 80038b2:	4628      	mov	r0, r5
 80038b4:	f000 f8b6 	bl	8003a24 <_sbrk_r>
 80038b8:	3001      	adds	r0, #1
 80038ba:	d1f2      	bne.n	80038a2 <sbrk_aligned+0x22>
 80038bc:	e7ef      	b.n	800389e <sbrk_aligned+0x1e>
 80038be:	bf00      	nop
 80038c0:	20000478 	.word	0x20000478

080038c4 <_malloc_r>:
 80038c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038c8:	1ccd      	adds	r5, r1, #3
 80038ca:	f025 0503 	bic.w	r5, r5, #3
 80038ce:	3508      	adds	r5, #8
 80038d0:	2d0c      	cmp	r5, #12
 80038d2:	bf38      	it	cc
 80038d4:	250c      	movcc	r5, #12
 80038d6:	2d00      	cmp	r5, #0
 80038d8:	4606      	mov	r6, r0
 80038da:	db01      	blt.n	80038e0 <_malloc_r+0x1c>
 80038dc:	42a9      	cmp	r1, r5
 80038de:	d904      	bls.n	80038ea <_malloc_r+0x26>
 80038e0:	230c      	movs	r3, #12
 80038e2:	6033      	str	r3, [r6, #0]
 80038e4:	2000      	movs	r0, #0
 80038e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038ea:	4f31      	ldr	r7, [pc, #196]	; (80039b0 <_malloc_r+0xec>)
 80038ec:	f000 f88e 	bl	8003a0c <__malloc_lock>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	461c      	mov	r4, r3
 80038f4:	bb44      	cbnz	r4, 8003948 <_malloc_r+0x84>
 80038f6:	4629      	mov	r1, r5
 80038f8:	4630      	mov	r0, r6
 80038fa:	f7ff ffc1 	bl	8003880 <sbrk_aligned>
 80038fe:	1c43      	adds	r3, r0, #1
 8003900:	4604      	mov	r4, r0
 8003902:	d150      	bne.n	80039a6 <_malloc_r+0xe2>
 8003904:	683c      	ldr	r4, [r7, #0]
 8003906:	4621      	mov	r1, r4
 8003908:	2900      	cmp	r1, #0
 800390a:	d141      	bne.n	8003990 <_malloc_r+0xcc>
 800390c:	2c00      	cmp	r4, #0
 800390e:	d044      	beq.n	800399a <_malloc_r+0xd6>
 8003910:	6823      	ldr	r3, [r4, #0]
 8003912:	4630      	mov	r0, r6
 8003914:	eb04 0803 	add.w	r8, r4, r3
 8003918:	f000 f884 	bl	8003a24 <_sbrk_r>
 800391c:	4580      	cmp	r8, r0
 800391e:	d13c      	bne.n	800399a <_malloc_r+0xd6>
 8003920:	6821      	ldr	r1, [r4, #0]
 8003922:	1a6d      	subs	r5, r5, r1
 8003924:	4629      	mov	r1, r5
 8003926:	4630      	mov	r0, r6
 8003928:	f7ff ffaa 	bl	8003880 <sbrk_aligned>
 800392c:	3001      	adds	r0, #1
 800392e:	d034      	beq.n	800399a <_malloc_r+0xd6>
 8003930:	6823      	ldr	r3, [r4, #0]
 8003932:	442b      	add	r3, r5
 8003934:	6023      	str	r3, [r4, #0]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d036      	beq.n	80039aa <_malloc_r+0xe6>
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	42a2      	cmp	r2, r4
 8003940:	d129      	bne.n	8003996 <_malloc_r+0xd2>
 8003942:	2200      	movs	r2, #0
 8003944:	605a      	str	r2, [r3, #4]
 8003946:	e00e      	b.n	8003966 <_malloc_r+0xa2>
 8003948:	6822      	ldr	r2, [r4, #0]
 800394a:	1b52      	subs	r2, r2, r5
 800394c:	d41d      	bmi.n	800398a <_malloc_r+0xc6>
 800394e:	2a0b      	cmp	r2, #11
 8003950:	d916      	bls.n	8003980 <_malloc_r+0xbc>
 8003952:	1961      	adds	r1, r4, r5
 8003954:	42a3      	cmp	r3, r4
 8003956:	6025      	str	r5, [r4, #0]
 8003958:	bf18      	it	ne
 800395a:	6059      	strne	r1, [r3, #4]
 800395c:	6863      	ldr	r3, [r4, #4]
 800395e:	bf08      	it	eq
 8003960:	6039      	streq	r1, [r7, #0]
 8003962:	5162      	str	r2, [r4, r5]
 8003964:	604b      	str	r3, [r1, #4]
 8003966:	4630      	mov	r0, r6
 8003968:	f000 f856 	bl	8003a18 <__malloc_unlock>
 800396c:	f104 000b 	add.w	r0, r4, #11
 8003970:	1d23      	adds	r3, r4, #4
 8003972:	f020 0007 	bic.w	r0, r0, #7
 8003976:	1ac2      	subs	r2, r0, r3
 8003978:	d0b5      	beq.n	80038e6 <_malloc_r+0x22>
 800397a:	1a1b      	subs	r3, r3, r0
 800397c:	50a3      	str	r3, [r4, r2]
 800397e:	e7b2      	b.n	80038e6 <_malloc_r+0x22>
 8003980:	42a3      	cmp	r3, r4
 8003982:	6862      	ldr	r2, [r4, #4]
 8003984:	d1de      	bne.n	8003944 <_malloc_r+0x80>
 8003986:	603a      	str	r2, [r7, #0]
 8003988:	e7ed      	b.n	8003966 <_malloc_r+0xa2>
 800398a:	4623      	mov	r3, r4
 800398c:	6864      	ldr	r4, [r4, #4]
 800398e:	e7b1      	b.n	80038f4 <_malloc_r+0x30>
 8003990:	460c      	mov	r4, r1
 8003992:	6849      	ldr	r1, [r1, #4]
 8003994:	e7b8      	b.n	8003908 <_malloc_r+0x44>
 8003996:	4613      	mov	r3, r2
 8003998:	e7ce      	b.n	8003938 <_malloc_r+0x74>
 800399a:	230c      	movs	r3, #12
 800399c:	6033      	str	r3, [r6, #0]
 800399e:	4630      	mov	r0, r6
 80039a0:	f000 f83a 	bl	8003a18 <__malloc_unlock>
 80039a4:	e79e      	b.n	80038e4 <_malloc_r+0x20>
 80039a6:	6005      	str	r5, [r0, #0]
 80039a8:	e7dd      	b.n	8003966 <_malloc_r+0xa2>
 80039aa:	605b      	str	r3, [r3, #4]
 80039ac:	deff      	udf	#255	; 0xff
 80039ae:	bf00      	nop
 80039b0:	2000047c 	.word	0x2000047c

080039b4 <abort>:
 80039b4:	b508      	push	{r3, lr}
 80039b6:	2006      	movs	r0, #6
 80039b8:	f000 f918 	bl	8003bec <raise>
 80039bc:	2001      	movs	r0, #1
 80039be:	f000 f993 	bl	8003ce8 <_exit>
 80039c2:	0000      	movs	r0, r0

080039c4 <_lseek_r>:
 80039c4:	b538      	push	{r3, r4, r5, lr}
 80039c6:	4d07      	ldr	r5, [pc, #28]	; (80039e4 <_lseek_r+0x20>)
 80039c8:	4604      	mov	r4, r0
 80039ca:	4608      	mov	r0, r1
 80039cc:	4611      	mov	r1, r2
 80039ce:	2200      	movs	r2, #0
 80039d0:	602a      	str	r2, [r5, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	f000 f970 	bl	8003cb8 <_lseek>
 80039d8:	1c43      	adds	r3, r0, #1
 80039da:	d102      	bne.n	80039e2 <_lseek_r+0x1e>
 80039dc:	682b      	ldr	r3, [r5, #0]
 80039de:	b103      	cbz	r3, 80039e2 <_lseek_r+0x1e>
 80039e0:	6023      	str	r3, [r4, #0]
 80039e2:	bd38      	pop	{r3, r4, r5, pc}
 80039e4:	20000474 	.word	0x20000474

080039e8 <_read_r>:
 80039e8:	b538      	push	{r3, r4, r5, lr}
 80039ea:	4d07      	ldr	r5, [pc, #28]	; (8003a08 <_read_r+0x20>)
 80039ec:	4604      	mov	r4, r0
 80039ee:	4608      	mov	r0, r1
 80039f0:	4611      	mov	r1, r2
 80039f2:	2200      	movs	r2, #0
 80039f4:	602a      	str	r2, [r5, #0]
 80039f6:	461a      	mov	r2, r3
 80039f8:	f000 f966 	bl	8003cc8 <_read>
 80039fc:	1c43      	adds	r3, r0, #1
 80039fe:	d102      	bne.n	8003a06 <_read_r+0x1e>
 8003a00:	682b      	ldr	r3, [r5, #0]
 8003a02:	b103      	cbz	r3, 8003a06 <_read_r+0x1e>
 8003a04:	6023      	str	r3, [r4, #0]
 8003a06:	bd38      	pop	{r3, r4, r5, pc}
 8003a08:	20000474 	.word	0x20000474

08003a0c <__malloc_lock>:
 8003a0c:	4801      	ldr	r0, [pc, #4]	; (8003a14 <__malloc_lock+0x8>)
 8003a0e:	f7ff bb10 	b.w	8003032 <__retarget_lock_acquire_recursive>
 8003a12:	bf00      	nop
 8003a14:	20000470 	.word	0x20000470

08003a18 <__malloc_unlock>:
 8003a18:	4801      	ldr	r0, [pc, #4]	; (8003a20 <__malloc_unlock+0x8>)
 8003a1a:	f7ff bb0b 	b.w	8003034 <__retarget_lock_release_recursive>
 8003a1e:	bf00      	nop
 8003a20:	20000470 	.word	0x20000470

08003a24 <_sbrk_r>:
 8003a24:	b538      	push	{r3, r4, r5, lr}
 8003a26:	4d06      	ldr	r5, [pc, #24]	; (8003a40 <_sbrk_r+0x1c>)
 8003a28:	2300      	movs	r3, #0
 8003a2a:	4604      	mov	r4, r0
 8003a2c:	4608      	mov	r0, r1
 8003a2e:	602b      	str	r3, [r5, #0]
 8003a30:	f7fe ffc8 	bl	80029c4 <_sbrk>
 8003a34:	1c43      	adds	r3, r0, #1
 8003a36:	d102      	bne.n	8003a3e <_sbrk_r+0x1a>
 8003a38:	682b      	ldr	r3, [r5, #0]
 8003a3a:	b103      	cbz	r3, 8003a3e <_sbrk_r+0x1a>
 8003a3c:	6023      	str	r3, [r4, #0]
 8003a3e:	bd38      	pop	{r3, r4, r5, pc}
 8003a40:	20000474 	.word	0x20000474

08003a44 <_free_r>:
 8003a44:	b538      	push	{r3, r4, r5, lr}
 8003a46:	4605      	mov	r5, r0
 8003a48:	2900      	cmp	r1, #0
 8003a4a:	d041      	beq.n	8003ad0 <_free_r+0x8c>
 8003a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a50:	1f0c      	subs	r4, r1, #4
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	bfb8      	it	lt
 8003a56:	18e4      	addlt	r4, r4, r3
 8003a58:	f7ff ffd8 	bl	8003a0c <__malloc_lock>
 8003a5c:	4a1d      	ldr	r2, [pc, #116]	; (8003ad4 <_free_r+0x90>)
 8003a5e:	6813      	ldr	r3, [r2, #0]
 8003a60:	b933      	cbnz	r3, 8003a70 <_free_r+0x2c>
 8003a62:	6063      	str	r3, [r4, #4]
 8003a64:	6014      	str	r4, [r2, #0]
 8003a66:	4628      	mov	r0, r5
 8003a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a6c:	f7ff bfd4 	b.w	8003a18 <__malloc_unlock>
 8003a70:	42a3      	cmp	r3, r4
 8003a72:	d908      	bls.n	8003a86 <_free_r+0x42>
 8003a74:	6820      	ldr	r0, [r4, #0]
 8003a76:	1821      	adds	r1, r4, r0
 8003a78:	428b      	cmp	r3, r1
 8003a7a:	bf01      	itttt	eq
 8003a7c:	6819      	ldreq	r1, [r3, #0]
 8003a7e:	685b      	ldreq	r3, [r3, #4]
 8003a80:	1809      	addeq	r1, r1, r0
 8003a82:	6021      	streq	r1, [r4, #0]
 8003a84:	e7ed      	b.n	8003a62 <_free_r+0x1e>
 8003a86:	461a      	mov	r2, r3
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	b10b      	cbz	r3, 8003a90 <_free_r+0x4c>
 8003a8c:	42a3      	cmp	r3, r4
 8003a8e:	d9fa      	bls.n	8003a86 <_free_r+0x42>
 8003a90:	6811      	ldr	r1, [r2, #0]
 8003a92:	1850      	adds	r0, r2, r1
 8003a94:	42a0      	cmp	r0, r4
 8003a96:	d10b      	bne.n	8003ab0 <_free_r+0x6c>
 8003a98:	6820      	ldr	r0, [r4, #0]
 8003a9a:	4401      	add	r1, r0
 8003a9c:	1850      	adds	r0, r2, r1
 8003a9e:	4283      	cmp	r3, r0
 8003aa0:	6011      	str	r1, [r2, #0]
 8003aa2:	d1e0      	bne.n	8003a66 <_free_r+0x22>
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	6053      	str	r3, [r2, #4]
 8003aaa:	4408      	add	r0, r1
 8003aac:	6010      	str	r0, [r2, #0]
 8003aae:	e7da      	b.n	8003a66 <_free_r+0x22>
 8003ab0:	d902      	bls.n	8003ab8 <_free_r+0x74>
 8003ab2:	230c      	movs	r3, #12
 8003ab4:	602b      	str	r3, [r5, #0]
 8003ab6:	e7d6      	b.n	8003a66 <_free_r+0x22>
 8003ab8:	6820      	ldr	r0, [r4, #0]
 8003aba:	1821      	adds	r1, r4, r0
 8003abc:	428b      	cmp	r3, r1
 8003abe:	bf04      	itt	eq
 8003ac0:	6819      	ldreq	r1, [r3, #0]
 8003ac2:	685b      	ldreq	r3, [r3, #4]
 8003ac4:	6063      	str	r3, [r4, #4]
 8003ac6:	bf04      	itt	eq
 8003ac8:	1809      	addeq	r1, r1, r0
 8003aca:	6021      	streq	r1, [r4, #0]
 8003acc:	6054      	str	r4, [r2, #4]
 8003ace:	e7ca      	b.n	8003a66 <_free_r+0x22>
 8003ad0:	bd38      	pop	{r3, r4, r5, pc}
 8003ad2:	bf00      	nop
 8003ad4:	2000047c 	.word	0x2000047c

08003ad8 <__swhatbuf_r>:
 8003ad8:	b570      	push	{r4, r5, r6, lr}
 8003ada:	460c      	mov	r4, r1
 8003adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ae0:	2900      	cmp	r1, #0
 8003ae2:	b096      	sub	sp, #88	; 0x58
 8003ae4:	4615      	mov	r5, r2
 8003ae6:	461e      	mov	r6, r3
 8003ae8:	da0d      	bge.n	8003b06 <__swhatbuf_r+0x2e>
 8003aea:	89a3      	ldrh	r3, [r4, #12]
 8003aec:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003af0:	f04f 0100 	mov.w	r1, #0
 8003af4:	bf14      	ite	ne
 8003af6:	2340      	movne	r3, #64	; 0x40
 8003af8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003afc:	2000      	movs	r0, #0
 8003afe:	6031      	str	r1, [r6, #0]
 8003b00:	602b      	str	r3, [r5, #0]
 8003b02:	b016      	add	sp, #88	; 0x58
 8003b04:	bd70      	pop	{r4, r5, r6, pc}
 8003b06:	466a      	mov	r2, sp
 8003b08:	f000 f878 	bl	8003bfc <_fstat_r>
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	dbec      	blt.n	8003aea <__swhatbuf_r+0x12>
 8003b10:	9901      	ldr	r1, [sp, #4]
 8003b12:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003b16:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003b1a:	4259      	negs	r1, r3
 8003b1c:	4159      	adcs	r1, r3
 8003b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b22:	e7eb      	b.n	8003afc <__swhatbuf_r+0x24>

08003b24 <__smakebuf_r>:
 8003b24:	898b      	ldrh	r3, [r1, #12]
 8003b26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b28:	079d      	lsls	r5, r3, #30
 8003b2a:	4606      	mov	r6, r0
 8003b2c:	460c      	mov	r4, r1
 8003b2e:	d507      	bpl.n	8003b40 <__smakebuf_r+0x1c>
 8003b30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b34:	6023      	str	r3, [r4, #0]
 8003b36:	6123      	str	r3, [r4, #16]
 8003b38:	2301      	movs	r3, #1
 8003b3a:	6163      	str	r3, [r4, #20]
 8003b3c:	b003      	add	sp, #12
 8003b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b40:	ab01      	add	r3, sp, #4
 8003b42:	466a      	mov	r2, sp
 8003b44:	f7ff ffc8 	bl	8003ad8 <__swhatbuf_r>
 8003b48:	9f00      	ldr	r7, [sp, #0]
 8003b4a:	4605      	mov	r5, r0
 8003b4c:	4639      	mov	r1, r7
 8003b4e:	4630      	mov	r0, r6
 8003b50:	f7ff feb8 	bl	80038c4 <_malloc_r>
 8003b54:	b948      	cbnz	r0, 8003b6a <__smakebuf_r+0x46>
 8003b56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b5a:	059a      	lsls	r2, r3, #22
 8003b5c:	d4ee      	bmi.n	8003b3c <__smakebuf_r+0x18>
 8003b5e:	f023 0303 	bic.w	r3, r3, #3
 8003b62:	f043 0302 	orr.w	r3, r3, #2
 8003b66:	81a3      	strh	r3, [r4, #12]
 8003b68:	e7e2      	b.n	8003b30 <__smakebuf_r+0xc>
 8003b6a:	89a3      	ldrh	r3, [r4, #12]
 8003b6c:	6020      	str	r0, [r4, #0]
 8003b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b72:	81a3      	strh	r3, [r4, #12]
 8003b74:	9b01      	ldr	r3, [sp, #4]
 8003b76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003b7a:	b15b      	cbz	r3, 8003b94 <__smakebuf_r+0x70>
 8003b7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b80:	4630      	mov	r0, r6
 8003b82:	f000 f84d 	bl	8003c20 <_isatty_r>
 8003b86:	b128      	cbz	r0, 8003b94 <__smakebuf_r+0x70>
 8003b88:	89a3      	ldrh	r3, [r4, #12]
 8003b8a:	f023 0303 	bic.w	r3, r3, #3
 8003b8e:	f043 0301 	orr.w	r3, r3, #1
 8003b92:	81a3      	strh	r3, [r4, #12]
 8003b94:	89a3      	ldrh	r3, [r4, #12]
 8003b96:	431d      	orrs	r5, r3
 8003b98:	81a5      	strh	r5, [r4, #12]
 8003b9a:	e7cf      	b.n	8003b3c <__smakebuf_r+0x18>

08003b9c <_raise_r>:
 8003b9c:	291f      	cmp	r1, #31
 8003b9e:	b538      	push	{r3, r4, r5, lr}
 8003ba0:	4605      	mov	r5, r0
 8003ba2:	460c      	mov	r4, r1
 8003ba4:	d904      	bls.n	8003bb0 <_raise_r+0x14>
 8003ba6:	2316      	movs	r3, #22
 8003ba8:	6003      	str	r3, [r0, #0]
 8003baa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bae:	bd38      	pop	{r3, r4, r5, pc}
 8003bb0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003bb2:	b112      	cbz	r2, 8003bba <_raise_r+0x1e>
 8003bb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003bb8:	b94b      	cbnz	r3, 8003bce <_raise_r+0x32>
 8003bba:	4628      	mov	r0, r5
 8003bbc:	f000 f852 	bl	8003c64 <_getpid_r>
 8003bc0:	4622      	mov	r2, r4
 8003bc2:	4601      	mov	r1, r0
 8003bc4:	4628      	mov	r0, r5
 8003bc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bca:	f000 b839 	b.w	8003c40 <_kill_r>
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d00a      	beq.n	8003be8 <_raise_r+0x4c>
 8003bd2:	1c59      	adds	r1, r3, #1
 8003bd4:	d103      	bne.n	8003bde <_raise_r+0x42>
 8003bd6:	2316      	movs	r3, #22
 8003bd8:	6003      	str	r3, [r0, #0]
 8003bda:	2001      	movs	r0, #1
 8003bdc:	e7e7      	b.n	8003bae <_raise_r+0x12>
 8003bde:	2100      	movs	r1, #0
 8003be0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8003be4:	4620      	mov	r0, r4
 8003be6:	4798      	blx	r3
 8003be8:	2000      	movs	r0, #0
 8003bea:	e7e0      	b.n	8003bae <_raise_r+0x12>

08003bec <raise>:
 8003bec:	4b02      	ldr	r3, [pc, #8]	; (8003bf8 <raise+0xc>)
 8003bee:	4601      	mov	r1, r0
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	f7ff bfd3 	b.w	8003b9c <_raise_r>
 8003bf6:	bf00      	nop
 8003bf8:	20000060 	.word	0x20000060

08003bfc <_fstat_r>:
 8003bfc:	b538      	push	{r3, r4, r5, lr}
 8003bfe:	4d07      	ldr	r5, [pc, #28]	; (8003c1c <_fstat_r+0x20>)
 8003c00:	2300      	movs	r3, #0
 8003c02:	4604      	mov	r4, r0
 8003c04:	4608      	mov	r0, r1
 8003c06:	4611      	mov	r1, r2
 8003c08:	602b      	str	r3, [r5, #0]
 8003c0a:	f000 f835 	bl	8003c78 <_fstat>
 8003c0e:	1c43      	adds	r3, r0, #1
 8003c10:	d102      	bne.n	8003c18 <_fstat_r+0x1c>
 8003c12:	682b      	ldr	r3, [r5, #0]
 8003c14:	b103      	cbz	r3, 8003c18 <_fstat_r+0x1c>
 8003c16:	6023      	str	r3, [r4, #0]
 8003c18:	bd38      	pop	{r3, r4, r5, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20000474 	.word	0x20000474

08003c20 <_isatty_r>:
 8003c20:	b538      	push	{r3, r4, r5, lr}
 8003c22:	4d06      	ldr	r5, [pc, #24]	; (8003c3c <_isatty_r+0x1c>)
 8003c24:	2300      	movs	r3, #0
 8003c26:	4604      	mov	r4, r0
 8003c28:	4608      	mov	r0, r1
 8003c2a:	602b      	str	r3, [r5, #0]
 8003c2c:	f000 f834 	bl	8003c98 <_isatty>
 8003c30:	1c43      	adds	r3, r0, #1
 8003c32:	d102      	bne.n	8003c3a <_isatty_r+0x1a>
 8003c34:	682b      	ldr	r3, [r5, #0]
 8003c36:	b103      	cbz	r3, 8003c3a <_isatty_r+0x1a>
 8003c38:	6023      	str	r3, [r4, #0]
 8003c3a:	bd38      	pop	{r3, r4, r5, pc}
 8003c3c:	20000474 	.word	0x20000474

08003c40 <_kill_r>:
 8003c40:	b538      	push	{r3, r4, r5, lr}
 8003c42:	4d07      	ldr	r5, [pc, #28]	; (8003c60 <_kill_r+0x20>)
 8003c44:	2300      	movs	r3, #0
 8003c46:	4604      	mov	r4, r0
 8003c48:	4608      	mov	r0, r1
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	602b      	str	r3, [r5, #0]
 8003c4e:	f000 f82b 	bl	8003ca8 <_kill>
 8003c52:	1c43      	adds	r3, r0, #1
 8003c54:	d102      	bne.n	8003c5c <_kill_r+0x1c>
 8003c56:	682b      	ldr	r3, [r5, #0]
 8003c58:	b103      	cbz	r3, 8003c5c <_kill_r+0x1c>
 8003c5a:	6023      	str	r3, [r4, #0]
 8003c5c:	bd38      	pop	{r3, r4, r5, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000474 	.word	0x20000474

08003c64 <_getpid_r>:
 8003c64:	f000 b810 	b.w	8003c88 <_getpid>

08003c68 <_close>:
 8003c68:	4b02      	ldr	r3, [pc, #8]	; (8003c74 <_close+0xc>)
 8003c6a:	2258      	movs	r2, #88	; 0x58
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c72:	4770      	bx	lr
 8003c74:	20000474 	.word	0x20000474

08003c78 <_fstat>:
 8003c78:	4b02      	ldr	r3, [pc, #8]	; (8003c84 <_fstat+0xc>)
 8003c7a:	2258      	movs	r2, #88	; 0x58
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c82:	4770      	bx	lr
 8003c84:	20000474 	.word	0x20000474

08003c88 <_getpid>:
 8003c88:	4b02      	ldr	r3, [pc, #8]	; (8003c94 <_getpid+0xc>)
 8003c8a:	2258      	movs	r2, #88	; 0x58
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c92:	4770      	bx	lr
 8003c94:	20000474 	.word	0x20000474

08003c98 <_isatty>:
 8003c98:	4b02      	ldr	r3, [pc, #8]	; (8003ca4 <_isatty+0xc>)
 8003c9a:	2258      	movs	r2, #88	; 0x58
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	20000474 	.word	0x20000474

08003ca8 <_kill>:
 8003ca8:	4b02      	ldr	r3, [pc, #8]	; (8003cb4 <_kill+0xc>)
 8003caa:	2258      	movs	r2, #88	; 0x58
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cb2:	4770      	bx	lr
 8003cb4:	20000474 	.word	0x20000474

08003cb8 <_lseek>:
 8003cb8:	4b02      	ldr	r3, [pc, #8]	; (8003cc4 <_lseek+0xc>)
 8003cba:	2258      	movs	r2, #88	; 0x58
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cc2:	4770      	bx	lr
 8003cc4:	20000474 	.word	0x20000474

08003cc8 <_read>:
 8003cc8:	4b02      	ldr	r3, [pc, #8]	; (8003cd4 <_read+0xc>)
 8003cca:	2258      	movs	r2, #88	; 0x58
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cd2:	4770      	bx	lr
 8003cd4:	20000474 	.word	0x20000474

08003cd8 <_write>:
 8003cd8:	4b02      	ldr	r3, [pc, #8]	; (8003ce4 <_write+0xc>)
 8003cda:	2258      	movs	r2, #88	; 0x58
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ce2:	4770      	bx	lr
 8003ce4:	20000474 	.word	0x20000474

08003ce8 <_exit>:
 8003ce8:	e7fe      	b.n	8003ce8 <_exit>
 8003cea:	bf00      	nop

08003cec <_init>:
 8003cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cee:	bf00      	nop
 8003cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf2:	bc08      	pop	{r3}
 8003cf4:	469e      	mov	lr, r3
 8003cf6:	4770      	bx	lr

08003cf8 <_fini>:
 8003cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfa:	bf00      	nop
 8003cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cfe:	bc08      	pop	{r3}
 8003d00:	469e      	mov	lr, r3
 8003d02:	4770      	bx	lr
